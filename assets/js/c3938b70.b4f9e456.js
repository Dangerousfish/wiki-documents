"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[71678],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),g=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=g(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=g(n),c=a,h=u["".concat(s,".").concat(c)]||u[c]||d[c]||o;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var g=2;g<o;g++)r[g]=n[g];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},17005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>g});var i=n(9668),a=(n(96540),n(15680));const o={description:"In this tutorial, we will embark on a journey to explore Zigbee application development using the XIAO ESP32C6 development board. The XIAO ESP32C6 is a compact yet powerful board that features the ESP32-C6 chip, which offers integrated Wi-Fi and Bluetooth Low Energy (BLE) connectivity. By leveraging the ESP Zigbee SDK, we can harness the full potential of the XIAO ESP32C6 and extend its capabilities to include Zigbee functionality.",title:"XIAO ESP32C6 Zigbee Quick Start Guide (Arduino)",image:"https://files.seeedstudio.com/wiki/xiaoc6_zigbee/3.webp",slug:"/xiao_esp32c6_zigbee_arduino",last_update:{date:"11/25/2024",author:"Spencer"}},r=void 0,l={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_zigbee_arduino",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_zigbee_arduino",title:"XIAO ESP32C6 Zigbee Quick Start Guide (Arduino)",description:"In this tutorial, we will embark on a journey to explore Zigbee application development using the XIAO ESP32C6 development board. The XIAO ESP32C6 is a compact yet powerful board that features the ESP32-C6 chip, which offers integrated Wi-Fi and Bluetooth Low Energy (BLE) connectivity. By leveraging the ESP Zigbee SDK, we can harness the full potential of the XIAO ESP32C6 and extend its capabilities to include Zigbee functionality.",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_zigbee_arduino.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application",slug:"/xiao_esp32c6_zigbee_arduino",permalink:"/xiao_esp32c6_zigbee_arduino",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C6/Application/xiao_esp32c6_zigbee_arduino.md",tags:[],version:"current",lastUpdatedBy:"Spencer",lastUpdatedAt:1732492800,formattedLastUpdatedAt:"Nov 25, 2024",frontMatter:{description:"In this tutorial, we will embark on a journey to explore Zigbee application development using the XIAO ESP32C6 development board. The XIAO ESP32C6 is a compact yet powerful board that features the ESP32-C6 chip, which offers integrated Wi-Fi and Bluetooth Low Energy (BLE) connectivity. By leveraging the ESP Zigbee SDK, we can harness the full potential of the XIAO ESP32C6 and extend its capabilities to include Zigbee functionality.",title:"XIAO ESP32C6 Zigbee Quick Start Guide (Arduino)",image:"https://files.seeedstudio.com/wiki/xiaoc6_zigbee/3.webp",slug:"/xiao_esp32c6_zigbee_arduino",last_update:{date:"11/25/2024",author:"Spencer"}},sidebar:"ProductSidebar",previous:{title:"XIAO ESP32C6 Zigbee Quick Start Guide (ESP-IDF)",permalink:"/xiao_esp32c6_zigbee"},next:{title:"Getting Started with Seeed Studio XIAO ESP32S3 Series",permalink:"/xiao_esp32s3_getting_started"}},s={},g=[{value:"Overview",id:"overview",level:2},{value:"What You&#39;ll Learn",id:"what-youll-learn",level:3},{value:"Zigbee Overview",id:"zigbee_overview",level:2},{value:"Zigbee Data Model",id:"zigbee-data-model",level:3},{value:"Zigbee Network Architecture",id:"zigbee-network-architecture",level:3},{value:"Network Topologies",id:"network-topologies",level:4},{value:"1. Mesh Topology",id:"1-mesh-topology",level:4},{value:"2. Tree Topology",id:"2-tree-topology",level:4},{value:"3. Star Topology",id:"3-star-topology",level:4},{value:"Arduino Examples",id:"examples",level:2},{value:"Example 1: Light Bulb and Light Switch",id:"Light_Bulb_switch",level:3},{value:"Zigbee Light Bulb",id:"zigbee-light-bulb",level:4},{value:"Define the Zigbee Light Device",id:"define-the-zigbee-light-device",level:5},{value:"Device State Control Function",id:"device-state-control-function",level:5},{value:"<code>setup()</code> Function",id:"setup-function",level:5},{value:"<code>loop()</code> Function",id:"loop-function",level:5},{value:"Zigbee Light Switch",id:"zigbee-light-switch",level:4},{value:"Include and Definitions",id:"include-and-definitions",level:5},{value:"Switch Configuration Types and Functions",id:"switch-configuration-types-and-functions",level:5},{value:"Instantiating the Zigbee Switch",id:"instantiating-the-zigbee-switch",level:5},{value:"Zigbee Functions and GPIO Interrupt Handling",id:"zigbee-functions-and-gpio-interrupt-handling",level:5},{value:"Handling GPIO Events",id:"handling-gpio-events",level:6},{value:"Setup Function",id:"setup-function-1",level:5},{value:"Loop Function",id:"loop-function-1",level:5},{value:"Demonstration",id:"demonstration",level:4},{value:"Reference",id:"reference",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],p={toc:g},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"This tutorial guides you through implementing ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Zigbee"},"Zigbee")," applications on the Seeed Studio ",(0,a.yg)("strong",{parentName:"p"},"XIAO ESP32C6")," development board. Powered by the ESP32-C6 chip, this board combines ",(0,a.yg)("strong",{parentName:"p"},"Wi-Fi"),", ",(0,a.yg)("strong",{parentName:"p"},"Bluetooth Low Energy (BLE)"),", and ",(0,a.yg)("strong",{parentName:"p"},"Zigbee")," connectivity, making it perfect for ",(0,a.yg)("strong",{parentName:"p"},"IoT applications"),". The examples in this guide use the ",(0,a.yg)("strong",{parentName:"p"},"esp-arduino Zigbee SDK")," to bring Zigbee functionality to life."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoc6_zigbee/0.png",style:{width:680,height:"auto","border-radius":"12.8px"}})),(0,a.yg)("h3",{id:"what-youll-learn"},"What You'll Learn"),(0,a.yg)("admonition",{title:"Prerequisite: Arduino Development Setup",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"If you haven't prepared your Arduino IDE, refer to the ",(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("a",{parentName:"strong",href:"https://chatgpt.com/xiao_esp32c6_getting_started/#software-preparation"},"Getting Started Guide")),". Make sure the ",(0,a.yg)("strong",{parentName:"p"},"esp-arduino board version")," is ",(0,a.yg)("strong",{parentName:"p"},"v3.0.6 or later"),", which supports Zigbee functionality.")),(0,a.yg)("p",null,"This guide focuses on the essentials of using Zigbee with the XIAO ESP32C6, ensuring a clear understanding of its practical applications:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("a",{parentName:"li",href:"#zigbee_overview"},"Zigbee Overview"),": Understand the Zigbee protocol and its network structure."),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("a",{parentName:"li",href:"#examples"},"Zigbee Arduino Examples"),": Implement Zigbee examples like light bulbs and switches on the ESP32-C6.")),(0,a.yg)("h2",{id:"zigbee_overview"},"Zigbee Overview"),(0,a.yg)("p",null,"Zigbee is a ",(0,a.yg)("strong",{parentName:"p"},"low-power"),", ",(0,a.yg)("strong",{parentName:"p"},"low-bandwidth")," wireless communication protocol based on the IEEE 802.15.4 standard. It is tailored for IoT scenarios such as ",(0,a.yg)("strong",{parentName:"p"},"home automation"),", ",(0,a.yg)("strong",{parentName:"p"},"smart cities"),", and ",(0,a.yg)("strong",{parentName:"p"},"industrial control"),", offering robust mesh networking capabilities for reliable communication in dynamic environments."),(0,a.yg)("h3",{id:"zigbee-data-model"},"Zigbee Data Model"),(0,a.yg)("p",null,"Zigbee communication relies on the ",(0,a.yg)("strong",{parentName:"p"},"Zigbee Cluster Library (ZCL)"),", which defines how devices organize their functionality and interact. Key components include:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Device Types"),"\nZigbee devices (e.g., switches, sensors, lights) are pre-defined with specific behaviors, grouped into functional ",(0,a.yg)("strong",{parentName:"p"},"Clusters"),".")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Clusters"),"\nClusters are logical groupings of:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Attributes"),": Represent device states, like brightness or temperature."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Commands"),": Trigger actions, such as turning a light on or setting brightness to 50%.")),(0,a.yg)("p",{parentName:"li"},"Examples:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"On/Off Cluster"),": Controls binary states like power."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Level Control Cluster"),": Adjusts intensity or brightness."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Temperature Measurement Cluster"),": Sends temperature readings."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Scenes Cluster"),": Saves and recalls preset configurations."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Attributes & Commands"),"\nAttributes store device data (e.g., state, configuration), while commands initiate actions."))),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoc6_zigbee/datamodel.png",style:{width:800,height:"auto"}})),(0,a.yg)("h3",{id:"zigbee-network-architecture"},"Zigbee Network Architecture"),(0,a.yg)("p",null,"A Zigbee network consists of three primary node types:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Zigbee Coordinator (ZC)"),"  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Serves as the central hub of the network.  "),(0,a.yg)("li",{parentName:"ul"},"Handles network creation, device authentication, and address allocation.  "),(0,a.yg)("li",{parentName:"ul"},"Responsible for initializing and managing the network.  "),(0,a.yg)("li",{parentName:"ul"},"Each Zigbee network can have only ",(0,a.yg)("strong",{parentName:"li"},"one Coordinator"),".  "))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Zigbee Router (ZR)"),"  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Extends the network range by relaying messages between devices.  "),(0,a.yg)("li",{parentName:"ul"},"Supports additional devices joining the network.  "),(0,a.yg)("li",{parentName:"ul"},"Typically mains-powered to ensure constant operation and reliable message relaying.  "),(0,a.yg)("li",{parentName:"ul"},"Battery-powered Routers are possible but less common due to higher energy demands.  "))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Zigbee End Device (ZED)"),"  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Lightweight and power-efficient devices that communicate with a parent node (either a Coordinator or Router).  "),(0,a.yg)("li",{parentName:"ul"},"Do not route messages to other devices.  "),(0,a.yg)("li",{parentName:"ul"},"Optimized for battery operation and typically enter sleep modes to conserve energy.")))),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Addressing and Routing"),":"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Zigbee uses a 16-bit addressing scheme. Devices communicate through a mix of direct and indirect addressing.  "),(0,a.yg)("li",{parentName:"ul"},"Routing decisions are made by Routers using algorithms like AODV (Ad hoc On-demand Distance Vector).  "))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Power Management"),":"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Zigbee End Devices are optimized for low power consumption. They often operate in sleep mode and only wake when needed.  "),(0,a.yg)("li",{parentName:"ul"},"Routers and the Coordinator are generally mains-powered for consistent availability."))))),(0,a.yg)("h4",{id:"network-topologies"},"Network Topologies"),(0,a.yg)("p",null,"Zigbee supports three primary network topologies, depending on the application requirements and environment:"),(0,a.yg)("h4",{id:"1-mesh-topology"},"1. Mesh Topology"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"A single Coordinator and multiple Routers form a self-healing, robust network.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Devices can dynamically reroute messages if a communication path is disrupted, ensuring high reliability.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Ideal for large-scale networks requiring wide coverage and redundancy.  "),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://mermaid.ink/svg/pako:eNptkcEOgjAQRH9lsydI5CDcuIo_oJ5MLxu6AlG6pLYmxvjvVlFSgj3NtG9nmvaBtWjGEgGgsTS0cKiUgXFtRKzuDDmxSRKZNIUsy2An3rFdJ8koYJ2m_0YjNp_YPGK_OR9ua3TFt67mEBs0jGYWHeOjLqbYYsHlMff3bKrMZ5XLGxZzvJjhoRlX2LPtqdPhPR_vYYWu5Z4VlkFqsmeFyjwDR97J_m5qLJ31vEIrvml_xg-aHFcdhQ_psTzR5Rp2BzJHkZ9_vgDkroUg",style:{width:380,height:"auto","border-radius":"1px"}}))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Key Features"),":  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Dynamic rerouting ensures high reliability.  "),(0,a.yg)("li",{parentName:"ul"},"Supports large networks with scalable coverage.  "),(0,a.yg)("li",{parentName:"ul"},"Self-healing mechanisms increase fault tolerance.  ")))),(0,a.yg)("h4",{id:"2-tree-topology"},"2. Tree Topology"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"The Coordinator acts as the root of a hierarchical structure, with Routers forming branches.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Each branch can have multiple End Devices or additional Routers, creating a tree-like structure.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Communication depends on hierarchical paths, which introduces potential single points of failure.  "),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://mermaid.ink/svg/pako:eNqF0MEKwjAMBuBXCTmt4A5OT7s6X0A9SS9hjW7omlFbQcR3tzqVFQV7yl--_IdcsRbDWCIA7B31DWwqbWF4CxFnWkteXJaNglKQ5zmsJHh20ywbBpgq9Wt1ZIuPLUb21fN0S2sqPrc1x9o4wxCS6p-8SPh3e5HyWcJn__g84XOlcIIdu45aE093fSxr9A13rLGMoyF30KjtLToKXtYXW2PpXeAJOgn7BssdHU8xhd6Q56qlePzu89uT3Yq88-0OO1R_gA",style:{width:600,height:"auto","border-radius":"1px"}}))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Key Features"),":  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Works well for structured environments.  "),(0,a.yg)("li",{parentName:"ul"},"Easier to set up and manage than a mesh network.  "),(0,a.yg)("li",{parentName:"ul"},"Vulnerable to branch failure, which can disconnect entire sub-networks.  ")))),(0,a.yg)("h4",{id:"3-star-topology"},"3. Star Topology"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"All devices communicate directly with the Coordinator.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Simple to deploy, but the Coordinator is a single point of failure.  ")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Best suited for small networks where devices are located close to the Coordinator.  "),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://mermaid.ink/svg/pako:eNqNkMEKwjAMhl8l5LTCdth269X5BHqSXsIat6JtR20FGXt3K0Nx4MGc_i_kCyEz9l4zSgSAIdA0wrFTDtbaeR-0cRR9KIovEAKqqoK90x3fTc91UeQMK0AtxK8NW6XZKM0_SrtRWiGwRMvBktH5_vm1QGEc2bJCmaOmcFGo3JLnKEV_eLgeZQyJSww-DSPKM11vmdKkKXJnKH_AfroTuZP3b16etDldgQ",style:{width:480,height:"auto","border-radius":"1px"}}))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Key Features"),":  "),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Easy to set up and manage.  "),(0,a.yg)("li",{parentName:"ul"},"Limited scalability due to range and device capacity constraints.  "),(0,a.yg)("li",{parentName:"ul"},"Reliance on the Coordinator for all communication reduces fault tolerance.  ")))),(0,a.yg)("p",null,"After get a quick view of these concepts, let's get started with the Zigbee development on XIAO ESP32C6."),(0,a.yg)("h2",{id:"examples"},"Arduino Examples"),(0,a.yg)("p",null,"Refer to ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/espressif/arduino-esp32/tree/master/libraries/Zigbee/examples"},"Zigbee examples - Arduino")),(0,a.yg)("h3",{id:"Light_Bulb_switch"},"Example 1: Light Bulb and Light Switch"),(0,a.yg)("p",null,"First, prepare two XIAO ESP32C6s, one as a ",(0,a.yg)("strong",{parentName:"p"},"Zigbee Light Bulb")," and the other as a ",(0,a.yg)("strong",{parentName:"p"},"Zigbee Light Switch"),"."),(0,a.yg)("p",null,"Use the ",(0,a.yg)("inlineCode",{parentName:"p"},"Zigbee_On_Off_Light")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Zigbee_On_Off_Switch")," examples to understand how Zigbee-enabled devices interact in real-world scenarios. Ready to begin? Let's dive into development!"),(0,a.yg)("h4",{id:"zigbee-light-bulb"},"Zigbee Light Bulb"),(0,a.yg)("p",null,"Ensure you've opt for ",(0,a.yg)("inlineCode",{parentName:"p"},"Zigbee ED(end device)")," for Zigbee Mode."),(0,a.yg)("p",null,"some constants:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"#define LED_PIN               LED_BUILTIN\n#define BUTTON_PIN            9  // ESP32-C6/H2 Boot button\n#define ZIGBEE_LIGHT_ENDPOINT 10\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"LED_PIN")," is used to control the built-in LED."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"BUTTON_PIN")," is for the factory reset button."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ZIGBEE_LIGHT_ENDPOINT")," represents the Zigbee endpoint for the light bulb, which acts like a service identifier in the network.")),(0,a.yg)("h5",{id:"define-the-zigbee-light-device"},"Define the Zigbee Light Device"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"ZigbeeLight zbLight = ZigbeeLight(ZIGBEE_LIGHT_ENDPOINT);\n")),(0,a.yg)("p",null,"This line defines a ",(0,a.yg)("inlineCode",{parentName:"p"},"ZigbeeLight")," object with an endpoint ID. Endpoints are used to represent different functionalities within a Zigbee device."),(0,a.yg)("h5",{id:"device-state-control-function"},"Device State Control Function"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"setLED()")," function controls the LED status:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"void setLED(bool value) {\n  digitalWrite(LED_PIN, value);\n}\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"setLED()")," function accepts a boolean value and sets the LED state accordingly, turning it on or off based on the input value."),(0,a.yg)("h5",{id:"setup-function"},(0,a.yg)("inlineCode",{parentName:"h5"},"setup()")," Function"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"setup()")," function initializes the device, including the LED, button, and Zigbee settings."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"void setup() {\n  pinMode(LED_PIN, OUTPUT);\n  digitalWrite(LED_PIN, LOW);\n")),(0,a.yg)("p",null,"First, we configure the LED pin as an output and turn it off initially."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  pinMode(BUTTON_PIN, INPUT_PULLUP);\n")),(0,a.yg)("p",null,"The button pin is configured as an input with an internal pull-up resistor."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'  zbLight.setManufacturerAndModel("Espressif", "ZBLightBulb");\n')),(0,a.yg)("p",null,"This sets the manufacturer and model name for the device, which helps identify it on the Zigbee network."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  zbLight.onLightChange(setLED);\n")),(0,a.yg)("p",null,"This registers ",(0,a.yg)("inlineCode",{parentName:"p"},"setLED()")," as a callback function, which gets called whenever there is a change in the light state."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  Zigbee.addEndpoint(&zbLight);\n")),(0,a.yg)("p",null,"We add ",(0,a.yg)("inlineCode",{parentName:"p"},"zbLight")," as an endpoint to the Zigbee core. This allows other Zigbee devices to interact with this endpoint."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  Zigbee.begin();\n")),(0,a.yg)("p",null,"Finally, we call ",(0,a.yg)("inlineCode",{parentName:"p"},"Zigbee.begin()")," to initialize the Zigbee stack and start the device as an end device in the network."),(0,a.yg)("h5",{id:"loop-function"},(0,a.yg)("inlineCode",{parentName:"h5"},"loop()")," Function"),(0,a.yg)("p",null,"The main loop handles button presses for performing a factory reset:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'void loop() {\n  if (digitalRead(BUTTON_PIN) == LOW) {\n    delay(100);  // Key debounce handling\n    int startTime = millis();\n    while (digitalRead(BUTTON_PIN) == LOW) {\n      delay(50);\n      if ((millis() - startTime) > 3000) {\n        Serial.printf("Resetting Zigbee to factory settings, reboot.\\n");\n        Zigbee.factoryReset();\n      }\n    }\n  }\n  delay(100);\n}\n')),(0,a.yg)("p",null,"This code checks if the button is pressed:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"If pressed, it waits for 100 ms (for debounce handling)."),(0,a.yg)("li",{parentName:"ul"},"If the button remains pressed for more than 3 seconds, it triggers a factory reset by calling ",(0,a.yg)("inlineCode",{parentName:"li"},"Zigbee.factoryReset()"),".")),(0,a.yg)("p",null,"This feature is useful for users when they need to reconfigure the device due to network or pairing issues."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp",metastring:"title=Zigbee_On_Off_Light.ino showLineNumbers",title:"Zigbee_On_Off_Light.ino",showLineNumbers:!0},'#ifndef ZIGBEE_MODE_ED\n#error "Zigbee end device mode is not selected in Tools->Zigbee mode"\n#endif\n\n#include "Zigbee.h"\n\n#define LED_PIN               LED_BUILTIN\n#define BUTTON_PIN            9  // ESP32-C6/H2 Boot button\n#define ZIGBEE_LIGHT_ENDPOINT 10\n\nZigbeeLight zbLight = ZigbeeLight(ZIGBEE_LIGHT_ENDPOINT);\n\n/********************* RGB LED functions **************************/\nvoid setLED(bool value) {\n  digitalWrite(LED_PIN, value);\n}\n\n/********************* Arduino functions **************************/\nvoid setup() {\n  // Init LED and turn it OFF (if LED_PIN == RGB_BUILTIN, the rgbLedWrite() will be used under the hood)\n  pinMode(LED_PIN, OUTPUT);\n  digitalWrite(LED_PIN, LOW);\n\n  // Init button for factory reset\n  pinMode(BUTTON_PIN, INPUT_PULLUP);\n\n  //Optional: set Zigbee device name and model\n  zbLight.setManufacturerAndModel("Espressif", "ZBLightBulb");\n\n  // Set callback function for light change\n  zbLight.onLightChange(setLED);\n\n  //Add endpoint to Zigbee Core\n  log_d("Adding ZigbeeLight endpoint to Zigbee Core");\n  Zigbee.addEndpoint(&zbLight);\n\n  // When all EPs are registered, start Zigbee. By default acts as ZIGBEE_END_DEVICE\n  log_d("Calling Zigbee.begin()");\n  Zigbee.begin();\n}\n\nvoid loop() {\n  // Checking button for factory reset\n  if (digitalRead(BUTTON_PIN) == LOW) {  // Push button pressed\n    // Key debounce handling\n    delay(100);\n    int startTime = millis();\n    while (digitalRead(BUTTON_PIN) == LOW) {\n      delay(50);\n      if ((millis() - startTime) > 3000) {\n        // If key pressed for more than 3secs, factory reset Zigbee and reboot\n        Serial.printf("Resetting Zigbee to factory settings, reboot.\\n");\n        Zigbee.factoryReset();\n      }\n    }\n  }\n  delay(100);\n}\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Zigbee End Device")),(0,a.yg)("p",null,"In this section, we will explore how the Zigbee HA On/Off Light example code is structured based on the Zigbee data model. By understanding the relationship between the code and the data model, you will gain insights into how to interpret and modify the code according to your specific requirements."),(0,a.yg)("p",null,"Now, let's examine the HA On/Off Light example code and see how it maps to the Zigbee data model."),(0,a.yg)("h4",{id:"zigbee-light-switch"},"Zigbee Light Switch"),(0,a.yg)("p",null,"Here, the XIAO ESP32C6 serves as the ",(0,a.yg)("strong",{parentName:"p"},"Zigbee Coordinator"),", responsible for controlling other Zigbee devices. Here, the ",(0,a.yg)("strong",{parentName:"p"},"Zigbee Switch")," represents the controller, which binds to a Zigbee light device and controls it through commands such as toggling the light on or off."),(0,a.yg)("h5",{id:"include-and-definitions"},"Include and Definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "Zigbee.h"\n\n#define SWITCH_ENDPOINT_NUMBER 5\n#define GPIO_INPUT_IO_TOGGLE_SWITCH 9\n#define PAIR_SIZE(TYPE_STR_PAIR) (sizeof(TYPE_STR_PAIR) / sizeof(TYPE_STR_PAIR[0]))\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SWITCH_ENDPOINT_NUMBER")," is defined as ",(0,a.yg)("inlineCode",{parentName:"li"},"5"),". It represents the endpoint of the switch. Just like in the light bulb example, the endpoint number is used to define the specific function within a Zigbee device."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"GPIO_INPUT_IO_TOGGLE_SWITCH")," refers to GPIO pin ",(0,a.yg)("inlineCode",{parentName:"li"},"9"),", which acts as the switch button."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"PAIR_SIZE()")," is a macro used to calculate the size of a given array, used here to handle button configurations.")),(0,a.yg)("h5",{id:"switch-configuration-types-and-functions"},"Switch Configuration Types and Functions"),(0,a.yg)("p",null,"The code defines several enumerations and data structures related to switch functionality:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"typedef enum {\n  SWITCH_ON_CONTROL,\n  SWITCH_OFF_CONTROL,\n  SWITCH_ONOFF_TOGGLE_CONTROL,\n  SWITCH_LEVEL_UP_CONTROL,\n  SWITCH_LEVEL_DOWN_CONTROL,\n  SWITCH_LEVEL_CYCLE_CONTROL,\n  SWITCH_COLOR_CONTROL,\n} SwitchFunction;\n\ntypedef struct {\n  uint8_t pin;\n  SwitchFunction func;\n} SwitchData;\n\ntypedef enum {\n  SWITCH_IDLE,\n  SWITCH_PRESS_ARMED,\n  SWITCH_PRESS_DETECTED,\n  SWITCH_PRESSED,\n  SWITCH_RELEASE_DETECTED,\n} SwitchState;\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"SwitchFunction"))," enumerates different functions the switch can perform, such as turning the light on, off, toggling, adjusting brightness, etc."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"SwitchData"))," is a struct that pairs a GPIO pin with a specific function, which allows for better organization when adding multiple buttons with different functionalities."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"SwitchState"))," represents different states of the switch during user interaction (e.g., idle, pressed, released).")),(0,a.yg)("h5",{id:"instantiating-the-zigbee-switch"},"Instantiating the Zigbee Switch"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"static SwitchData buttonFunctionPair[] = {{GPIO_INPUT_IO_TOGGLE_SWITCH, SWITCH_ONOFF_TOGGLE_CONTROL}};\nZigbeeSwitch zbSwitch = ZigbeeSwitch(SWITCH_ENDPOINT_NUMBER);\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"buttonFunctionPair"))," is an array defining the functions of the buttons. Here, the button connected to ",(0,a.yg)("inlineCode",{parentName:"li"},"GPIO 9")," will be used for toggling the light on or off."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"zbSwitch"))," creates an instance of ",(0,a.yg)("inlineCode",{parentName:"li"},"ZigbeeSwitch"),", with endpoint number ",(0,a.yg)("inlineCode",{parentName:"li"},"5"),".")),(0,a.yg)("h5",{id:"zigbee-functions-and-gpio-interrupt-handling"},"Zigbee Functions and GPIO Interrupt Handling"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"static void onZbButton(SwitchData *button_func_pair) {\n  if (button_func_pair->func == SWITCH_ONOFF_TOGGLE_CONTROL) {\n    zbSwitch.lightToggle();  // Sends a toggle command to the light.\n  }\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"onZbButton()"))," is called whenever a button is pressed. In this case, it sends a Zigbee command to toggle the light."),(0,a.yg)("h6",{id:"handling-gpio-events"},"Handling GPIO Events"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"static void IRAM_ATTR onGpioInterrupt(void *arg) {\n  xQueueSendFromISR(gpio_evt_queue, (SwitchData *)arg, NULL);\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"onGpioInterrupt()"))," is the interrupt service routine (ISR) for handling GPIO pin interrupts. It places an event in a queue whenever the button is pressed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"static void enableGpioInterrupt(bool enabled) {\n  for (int i = 0; i < PAIR_SIZE(buttonFunctionPair); ++i) {\n    if (enabled) {\n      enableInterrupt((buttonFunctionPair[i]).pin);\n    } else {\n      disableInterrupt((buttonFunctionPair[i]).pin);\n    }\n  }\n}\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("inlineCode",{parentName:"strong"},"enableGpioInterrupt()"))," enables or disables the GPIO interrupt, depending on whether the parameter ",(0,a.yg)("inlineCode",{parentName:"p"},"enabled")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("h5",{id:"setup-function-1"},"Setup Function"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'void setup() {\n  Serial.begin(115200);\n  while (!Serial) {\n    delay(10);\n  }\n\n  zbSwitch.setManufacturerAndModel("Espressif", "ZigbeeSwitch");\n  zbSwitch.allowMultipleBinding(true);\n\n  Zigbee.addEndpoint(&zbSwitch);\n  Zigbee.setRebootOpenNetwork(180);\n\n  for (int i = 0; i < PAIR_SIZE(buttonFunctionPair); i++) {\n    pinMode(buttonFunctionPair[i].pin, INPUT_PULLUP);\n    gpio_evt_queue = xQueueCreate(10, sizeof(SwitchData));\n    if (gpio_evt_queue == 0) {\n      log_e("Queue was not created and must not be used");\n      while (1);\n    }\n    attachInterruptArg(buttonFunctionPair[i].pin, onGpioInterrupt, (void *)(buttonFunctionPair + i), FALLING);\n  }\n\n  Zigbee.begin(ZIGBEE_COORDINATOR);\n\n  Serial.println("Waiting for Light to bound to the switch");\n  while (!zbSwitch.isBound()) {\n    Serial.printf(".");\n    delay(500);\n  }\n\n  std::list<zb_device_params_t *> boundLights = zbSwitch.getBoundDevices();\n  for (const auto &device : boundLights) {\n    Serial.printf("Device on endpoint %d, short address: 0x%x\\n", device->endpoint, device->short_addr);\n    Serial.printf(\n      "IEEE Address: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\\n", device->ieee_addr[0], device->ieee_addr[1], device->ieee_addr[2], device->ieee_addr[3],\n      device->ieee_addr[4], device->ieee_addr[5], device->ieee_addr[6], device->ieee_addr[7]\n    );\n    Serial.printf("Light manufacturer: %s", zbSwitch.readManufacturer(device->endpoint, device->short_addr));\n    Serial.printf("Light model: %s", zbSwitch.readModel(device->endpoint, device->short_addr));\n  }\n  Serial.println();\n}\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Serial Communication Initialization"),": Initializes serial for debugging."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Device Information"),": Sets manufacturer and model, allows multiple devices to bind, and adds an endpoint to Zigbee core."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Network Initialization"),": Opens the Zigbee network for ",(0,a.yg)("inlineCode",{parentName:"li"},"180")," seconds after reboot to allow devices to join."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Button Initialization"),": Sets up GPIO pins for the buttons, creates a queue to handle GPIO interrupts, and attaches interrupts to the buttons."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Wait for Binding"),": The coordinator waits until it binds to a light device before proceeding. Once bound, it prints the bound device information.")),(0,a.yg)("h5",{id:"loop-function-1"},"Loop Function"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"void loop() {\n  uint8_t pin = 0;\n  SwitchData buttonSwitch;\n  static SwitchState buttonState = SWITCH_IDLE;\n  bool eventFlag = false;\n\n  if (xQueueReceive(gpio_evt_queue, &buttonSwitch, portMAX_DELAY)) {\n    pin = buttonSwitch.pin;\n    enableGpioInterrupt(false);\n    eventFlag = true;\n  }\n  while (eventFlag) {\n    bool value = digitalRead(pin);\n    switch (buttonState) {\n      case SWITCH_IDLE:           buttonState = (value == LOW) ? SWITCH_PRESS_DETECTED : SWITCH_IDLE; break;\n      case SWITCH_PRESS_DETECTED: buttonState = (value == LOW) ? SWITCH_PRESS_DETECTED : SWITCH_RELEASE_DETECTED; break;\n      case SWITCH_RELEASE_DETECTED:\n        buttonState = SWITCH_IDLE;\n        (*onZbButton)(&buttonSwitch);\n        break;\n      default: break;\n    }\n    if (buttonState == SWITCH_IDLE) {\n      enableGpioInterrupt(true);\n      eventFlag = false;\n      break;\n    }\n    vTaskDelay(10 / portTICK_PERIOD_MS);\n  }\n\n  static uint32_t lastPrint = 0;\n  if (millis() - lastPrint > 10000) {\n    lastPrint = millis();\n    zbSwitch.printBoundDevices();\n  }\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("strong",{parentName:"li"},"loop function")," manages button presses by reading from the interrupt queue (",(0,a.yg)("inlineCode",{parentName:"li"},"gpio_evt_queue"),") and updating the ",(0,a.yg)("inlineCode",{parentName:"li"},"buttonState")," accordingly."),(0,a.yg)("li",{parentName:"ul"},"When the button is pressed and released (",(0,a.yg)("inlineCode",{parentName:"li"},"SWITCH_RELEASE_DETECTED"),"), the ",(0,a.yg)("inlineCode",{parentName:"li"},"onZbButton()")," callback is invoked to toggle the light."),(0,a.yg)("li",{parentName:"ul"},"Every ",(0,a.yg)("strong",{parentName:"li"},"10 seconds"),", the bound lights are printed for monitoring purposes.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp",metastring:"title=Zigbee_On_Off_Switch.ino showLineNumbers",title:"Zigbee_On_Off_Switch.ino",showLineNumbers:!0},'#ifndef ZIGBEE_MODE_ZCZR\n#error "Zigbee coordinator mode is not selected in Tools->Zigbee mode"\n#endif\n\n#include "Zigbee.h"\n\n#define SWITCH_ENDPOINT_NUMBER 5\n\n/* Switch configuration */\n#define GPIO_INPUT_IO_TOGGLE_SWITCH 9\n#define PAIR_SIZE(TYPE_STR_PAIR)    (sizeof(TYPE_STR_PAIR) / sizeof(TYPE_STR_PAIR[0]))\n\ntypedef enum {\n  SWITCH_ON_CONTROL,\n  SWITCH_OFF_CONTROL,\n  SWITCH_ONOFF_TOGGLE_CONTROL,\n  SWITCH_LEVEL_UP_CONTROL,\n  SWITCH_LEVEL_DOWN_CONTROL,\n  SWITCH_LEVEL_CYCLE_CONTROL,\n  SWITCH_COLOR_CONTROL,\n} SwitchFunction;\n\ntypedef struct {\n  uint8_t pin;\n  SwitchFunction func;\n} SwitchData;\n\ntypedef enum {\n  SWITCH_IDLE,\n  SWITCH_PRESS_ARMED,\n  SWITCH_PRESS_DETECTED,\n  SWITCH_PRESSED,\n  SWITCH_RELEASE_DETECTED,\n} SwitchState;\n\nstatic SwitchData buttonFunctionPair[] = {{GPIO_INPUT_IO_TOGGLE_SWITCH, SWITCH_ONOFF_TOGGLE_CONTROL}};\n\nZigbeeSwitch zbSwitch = ZigbeeSwitch(SWITCH_ENDPOINT_NUMBER);\n\n/********************* Zigbee functions **************************/\nstatic void onZbButton(SwitchData *button_func_pair) {\n  if (button_func_pair->func == SWITCH_ONOFF_TOGGLE_CONTROL) {\n    // Send toggle command to the light\n    zbSwitch.lightToggle();\n  }\n}\n\n/********************* GPIO functions **************************/\nstatic QueueHandle_t gpio_evt_queue = NULL;\n\nstatic void IRAM_ATTR onGpioInterrupt(void *arg) {\n  xQueueSendFromISR(gpio_evt_queue, (SwitchData *)arg, NULL);\n}\n\nstatic void enableGpioInterrupt(bool enabled) {\n  for (int i = 0; i < PAIR_SIZE(buttonFunctionPair); ++i) {\n    if (enabled) {\n      enableInterrupt((buttonFunctionPair[i]).pin);\n    } else {\n      disableInterrupt((buttonFunctionPair[i]).pin);\n    }\n  }\n}\n\n/********************* Arduino functions **************************/\nvoid setup() {\n\n  Serial.begin(115200);\n  while (!Serial) {\n    delay(10);\n  }\n\n  //Optional: set Zigbee device name and model\n  zbSwitch.setManufacturerAndModel("Espressif", "ZigbeeSwitch");\n\n  //Optional to allow multiple light to bind to the switch\n  zbSwitch.allowMultipleBinding(true);\n\n  //Add endpoint to Zigbee Core\n  log_d("Adding ZigbeeSwitch endpoint to Zigbee Core");\n  Zigbee.addEndpoint(&zbSwitch);\n\n  //Open network for 180 seconds after boot\n  Zigbee.setRebootOpenNetwork(180);\n\n  // Init button switch\n  for (int i = 0; i < PAIR_SIZE(buttonFunctionPair); i++) {\n    pinMode(buttonFunctionPair[i].pin, INPUT_PULLUP);\n    /* create a queue to handle gpio event from isr */\n    gpio_evt_queue = xQueueCreate(10, sizeof(SwitchData));\n    if (gpio_evt_queue == 0) {\n      log_e("Queue was not created and must not be used");\n      while (1);\n    }\n    attachInterruptArg(buttonFunctionPair[i].pin, onGpioInterrupt, (void *)(buttonFunctionPair + i), FALLING);\n  }\n\n  // When all EPs are registered, start Zigbee with ZIGBEE_COORDINATOR mode\n  log_d("Calling Zigbee.begin()");\n  Zigbee.begin(ZIGBEE_COORDINATOR);\n\n  Serial.println("Waiting for Light to bound to the switch");\n  //Wait for switch to bound to a light:\n  while (!zbSwitch.isBound()) {\n    Serial.printf(".");\n    delay(500);\n  }\n\n  // Optional: read manufacturer and model name from the bound light\n  std::list<zb_device_params_t *> boundLights = zbSwitch.getBoundDevices();\n  //List all bound lights\n  for (const auto &device : boundLights) {\n    Serial.printf("Device on endpoint %d, short address: 0x%x\\n", device->endpoint, device->short_addr);\n    Serial.printf(\n      "IEEE Address: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\\n", device->ieee_addr[0], device->ieee_addr[1], device->ieee_addr[2], device->ieee_addr[3],\n      device->ieee_addr[4], device->ieee_addr[5], device->ieee_addr[6], device->ieee_addr[7]\n    );\n    Serial.printf("Light manufacturer: %s", zbSwitch.readManufacturer(device->endpoint, device->short_addr));\n    Serial.printf("Light model: %s", zbSwitch.readModel(device->endpoint, device->short_addr));\n  }\n\n  Serial.println();\n}\n\nvoid loop() {\n  // Handle button switch in loop()\n  uint8_t pin = 0;\n  SwitchData buttonSwitch;\n  static SwitchState buttonState = SWITCH_IDLE;\n  bool eventFlag = false;\n\n  /* check if there is any queue received, if yes read out the buttonSwitch */\n  if (xQueueReceive(gpio_evt_queue, &buttonSwitch, portMAX_DELAY)) {\n    pin = buttonSwitch.pin;\n    enableGpioInterrupt(false);\n    eventFlag = true;\n  }\n  while (eventFlag) {\n    bool value = digitalRead(pin);\n    switch (buttonState) {\n      case SWITCH_IDLE:           buttonState = (value == LOW) ? SWITCH_PRESS_DETECTED : SWITCH_IDLE; break;\n      case SWITCH_PRESS_DETECTED: buttonState = (value == LOW) ? SWITCH_PRESS_DETECTED : SWITCH_RELEASE_DETECTED; break;\n      case SWITCH_RELEASE_DETECTED:\n        buttonState = SWITCH_IDLE;\n        /* callback to button_handler */\n        (*onZbButton)(&buttonSwitch);\n        break;\n      default: break;\n    }\n    if (buttonState == SWITCH_IDLE) {\n      enableGpioInterrupt(true);\n      eventFlag = false;\n      break;\n    }\n    vTaskDelay(10 / portTICK_PERIOD_MS);\n  }\n\n  // print the bound lights every 10 seconds\n  static uint32_t lastPrint = 0;\n  if (millis() - lastPrint > 10000) {\n    lastPrint = millis();\n    zbSwitch.printBoundDevices();\n  }\n}\n')),(0,a.yg)("h4",{id:"demonstration"},"Demonstration"),(0,a.yg)("iframe",{className:"youtube-video-r",src:"https://www.youtube.com/embed/Z2NROYx7hcQ",title:"XIAO Zigbe Light bulb/switch Example",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",style:{width:"380px",height:"640px"}}),(0,a.yg)("p",null,"Congratulations on successfully completing your Zigbee-controlled lighting project! There are many more exciting Zigbee applications waiting for you to explore. Keep up the great work!"),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://docs.espressif.com/projects/esp-zigbee-sdk/en/latest/esp32c6/introduction.html"},"ESP Zigbee SDK")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://www.cnx-software.com/2024/08/23/arduino-core-for-esp32-gets-a-zigbee-wrapper-library/"},"Arduino Core for ESP32 gets a Zigbee wrapper library"))),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}d.isMDXComponent=!0}}]);