"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[10428],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>S});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},_=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),_=r,S=u["".concat(o,".").concat(_)]||u[_]||c[_]||l;return t?i.createElement(S,a(a({ref:n},d),{},{components:t})):i.createElement(S,a({ref:n},d))}));function S(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=_;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<l;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}_.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>a});var i=t(96540),r=t(20053);const l={tabItem:"tabItem_Ymn6"};function a(e){let{children:n,hidden:t,className:a}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,a),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>v});var i=t(9668),r=t(96540),l=t(20053),a=t(23104),s=t(56347),o=t(57485),p=t(31682),d=t(89466);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}function c(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function _(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function S(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,l=c(e),[a,s]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!_({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:l}))),[o,p]=S({queryString:t,groupId:i}),[u,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,d.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:i}),h=(()=>{const e=o??u;return _({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!_({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),g(e)}),[p,g,l]),tabValues:l}}var h=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function m(e){let{className:n,block:t,selectedValue:s,selectValue:o,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=d.indexOf(n),i=p[t].value;i!==s&&(u(n),o(i))},_=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:a}=e;return r.createElement("li",(0,i.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>d.push(e),onKeyDown:_,onClick:c},a,{className:(0,l.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":s===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function E(e){const n=g(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(m,(0,i.A)({},e,n)),r.createElement(y,(0,i.A)({},e,n)))}function v(e){const n=(0,h.A)();return r.createElement(E,(0,i.A)({key:String(n)},e))}},41798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>S,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var i=t(9668),r=(t(96540),t(15680)),l=t(11470),a=t(19365);const s={description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 XIAO ESP32S3\uff0c\u5f55\u5236\u8bed\u97f3\uff0c\u8bc6\u522b\u8bed\u97f3\uff0c\u7136\u540e\u5411 ChatGPT \u63d0\u95ee\u5e76\u83b7\u5f97\u7b54\u6848\u5e76\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002",title:"\u57fa\u4e8e XIAO ESP32S3 Sense \u7684\u5fae\u578b ChatGPT \u8bed\u97f3\u52a9\u624b",keywords:["xiao esp32s3 sense","chatGPT","speech to text"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/cn/xiao_esp32s3_speech2chatgpt",last_update:{date:"11/27/2024",author:"Agnes"}},o="\u57fa\u4e8e XIAO ESP32S3 \u7684\u5fae\u578b ChatGPT \u8bed\u97f3\u52a9\u624b",p={unversionedId:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3_Sense/CN_XIAO_ESP32S3_Speech2chatgpt",id:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3_Sense/CN_XIAO_ESP32S3_Speech2chatgpt",title:"\u57fa\u4e8e XIAO ESP32S3 Sense \u7684\u5fae\u578b ChatGPT \u8bed\u97f3\u52a9\u624b",description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 XIAO ESP32S3\uff0c\u5f55\u5236\u8bed\u97f3\uff0c\u8bc6\u522b\u8bed\u97f3\uff0c\u7136\u540e\u5411 ChatGPT \u63d0\u95ee\u5e76\u83b7\u5f97\u7b54\u6848\u5e76\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002",source:"@site/docs/zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3_Sense/CN_XIAO_ESP32S3_Speech2chatgpt.md",sourceDirName:"zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3_Sense",slug:"/cn/xiao_esp32s3_speech2chatgpt",permalink:"/cn/xiao_esp32s3_speech2chatgpt",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32S3_Sense/CN_XIAO_ESP32S3_Speech2chatgpt.md",tags:[],version:"current",lastUpdatedBy:"Agnes",lastUpdatedAt:1732665600,formattedLastUpdatedAt:"Nov 27, 2024",frontMatter:{description:"\u672c\u6559\u7a0b\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 XIAO ESP32S3\uff0c\u5f55\u5236\u8bed\u97f3\uff0c\u8bc6\u522b\u8bed\u97f3\uff0c\u7136\u540e\u5411 ChatGPT \u63d0\u95ee\u5e76\u83b7\u5f97\u7b54\u6848\u5e76\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002",title:"\u57fa\u4e8e XIAO ESP32S3 Sense \u7684\u5fae\u578b ChatGPT \u8bed\u97f3\u52a9\u624b",keywords:["xiao esp32s3 sense","chatGPT","speech to text"],image:"https://files.seeedstudio.com/wiki/seeed_logo/logo_2023.png",slug:"/cn/xiao_esp32s3_speech2chatgpt",last_update:{date:"11/27/2024",author:"Agnes"}},sidebar:"CNSidebar",previous:{title:"\u5173\u952e\u8bcd\u8bc6\u522b",permalink:"/cn/tinyml_course_Key_Word_Spotting"},next:{title:"SenseCraft \u6a21\u578b\u52a9\u624b\u90e8\u7f72",permalink:"/cn/xiao_esp32s3_edgelab"}},d={},u=[{value:"\u5f00\u59cb\u4e4b\u524d",id:"\u5f00\u59cb\u4e4b\u524d",level:2},{value:"\u786c\u4ef6\u51c6\u5907",id:"\u786c\u4ef6\u51c6\u5907",level:3},{value:"\u8f6f\u4ef6\u51c6\u5907",id:"\u8f6f\u4ef6\u51c6\u5907",level:3},{value:"\u6ce8\u518c\u5e76\u542f\u7528 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u6ce8\u518c\u5e76\u542f\u7528-google-cloud-\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:2},{value:"\u6b65\u9aa4 1. \u767b\u5f55 Google Cloud \u63a7\u5236\u53f0",id:"\u6b65\u9aa4-1-\u767b\u5f55-google-cloud-\u63a7\u5236\u53f0",level:3},{value:"\u6b65\u9aa4 2. \u8fdb\u5165\u9879\u76ee\u9009\u62e9\u9875\u9762",id:"\u6b65\u9aa4-2-\u8fdb\u5165\u9879\u76ee\u9009\u62e9\u9875\u9762",level:3},{value:"\u6b65\u9aa4 3. \u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u6b65\u9aa4-3-\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:3},{value:"\u6b65\u9aa4 4. \u521b\u5efa\u670d\u52a1\u8d26\u6237",id:"\u6b65\u9aa4-4-\u521b\u5efa\u670d\u52a1\u8d26\u6237",level:3},{value:"\u6b65\u9aa4 5. \u4e3a\u670d\u52a1\u8d26\u6237\u521b\u5efa JSON \u5bc6\u94a5",id:"\u6b65\u9aa4-5-\u4e3a\u670d\u52a1\u8d26\u6237\u521b\u5efa-json-\u5bc6\u94a5",level:3},{value:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",id:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1",level:2},{value:"\u6b65\u9aa4 6. \u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6",id:"\u6b65\u9aa4-6-\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6",level:3},{value:"\u6b65\u9aa4 7. \u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf",id:"\u6b65\u9aa4-7-\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf",level:3},{value:"\u6b65\u9aa4 8. \u6d4b\u8bd5\u672c\u5730 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72",id:"\u6b65\u9aa4-8-\u6d4b\u8bd5\u672c\u5730-google-cloud-\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72",level:3},{value:"\u4e0a\u4f20 XIAO ESP32S3 Sense \u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u5230 Google Cloud \u8fdb\u884c\u8bc6\u522b",id:"\u4e0a\u4f20-xiao-esp32s3-sense-\u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u5230-google-cloud-\u8fdb\u884c\u8bc6\u522b",level:2},{value:"\u6b65\u9aa4 9. \u542f\u52a8 Google Cloud \u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u76d1\u542c",id:"\u6b65\u9aa4-9-\u542f\u52a8-google-cloud-\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u76d1\u542c",level:3},{value:"\u6b65\u9aa4 10. \u68c0\u67e5\u4e3b\u673a IP \u5730\u5740",id:"\u6b65\u9aa4-10-\u68c0\u67e5\u4e3b\u673a-ip-\u5730\u5740",level:3},{value:"\u6b65\u9aa4 11. \u4e0a\u4f20 XIAO ESP32S3 Sense \u7684\u7a0b\u5e8f",id:"\u6b65\u9aa4-11-\u4e0a\u4f20-xiao-esp32s3-sense-\u7684\u7a0b\u5e8f",level:3},{value:"\u5728XIAO ESP32S3 Sense\u4e0a\u90e8\u7f72ChatGPT",id:"\u5728xiao-esp32s3-sense\u4e0a\u90e8\u7f72chatgpt",level:2},{value:"\u7b2c12\u6b65. \u4f7f\u7528\u8bc6\u522b\u51fa\u7684\u6587\u672c\u4f5c\u4e3a\u95ee\u9898\u5411ChatGPT\u63d0\u95ee",id:"\u7b2c12\u6b65-\u4f7f\u7528\u8bc6\u522b\u51fa\u7684\u6587\u672c\u4f5c\u4e3a\u95ee\u9898\u5411chatgpt\u63d0\u95ee",level:3},{value:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1 &amp; \u7a0b\u5e8f\u96c6\u6210",id:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1--\u7a0b\u5e8f\u96c6\u6210",level:2},{value:"\u6b65\u9aa413. \u4f7f\u7528 SquareLine Studio \u7ed8\u5236\u663e\u793a\u5c4f",id:"\u6b65\u9aa413-\u4f7f\u7528-squareline-studio-\u7ed8\u5236\u663e\u793a\u5c4f",level:3},{value:"\u6b65\u9aa414. \u7a0b\u5e8f\u96c6\u6210",id:"\u6b65\u9aa414-\u7a0b\u5e8f\u96c6\u6210",level:3},{value:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba",id:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba",level:2}],c={toc:u},_="wrapper";function S(e){let{components:n,...t}=e;return(0,r.yg)(_,(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u57fa\u4e8e-xiao-esp32s3-\u7684\u5fae\u578b-chatgpt-\u8bed\u97f3\u52a9\u624b"},"\u57fa\u4e8e XIAO ESP32S3 \u7684\u5fae\u578b ChatGPT \u8bed\u97f3\u52a9\u624b"),(0,r.yg)("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/wPi-XjeJPNw?controls=0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.yg)("p",null,"\u4eca\u5929\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u4e3a\u5927\u5bb6\u5e26\u6765\u4e00\u4e2a\u5168\u65b0\u7684\u9879\u76ee\uff0c\u4f7f\u7528 XIAO ESP32S3 Sense \u548c XIAO \u5706\u5f62\u663e\u793a\u5c4f\uff01\u8be5\u9879\u76ee\u7684\u76ee\u6807\u662f\u9996\u5148\u5229\u7528 XIAO ESP32S3 Sense \u7684\u9ea6\u514b\u98ce\u548c Google Cloud \u7684\u8bed\u97f3\u8f6c\u6587\u5b57\u670d\u52a1\uff0c\u6784\u5efa\u4e00\u4e2a\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u3002\u7136\u540e\uff0c\u5c06\u8bc6\u522b\u5230\u7684\u8bed\u97f3\u6587\u672c\u7528\u6765\u8c03\u7528 OpenAI \u7684\u63a5\u53e3\uff0c\u5411 ChatGPT \u63d0\u95ee\u5e76\u8fd4\u56de\u7b54\u6848\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u663e\u793a\u8bc6\u522b\u5230\u7684\u8bed\u97f3\u6587\u672c\u548c ChatGPT \u7684\u56de\u7b54\u5185\u5bb9\u5728\u5c4f\u5e55\u4e0a\u3002"),(0,r.yg)("p",null,'\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u667a\u80fd "XIAO" \u52a9\u624b\uff01'),(0,r.yg)("p",null,"\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b8c\u6210\u8fd9\u4e2a\u9879\u76ee\u6240\u9700\u7684\u4e00\u4e9b\u57fa\u672c\u6b65\u9aa4\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#sign-up-and-enable-google-cloud-speech-to-text-service"},"\u6ce8\u518c\u5e76\u542f\u7528 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#deploy-speech-to-text-services-on-local-hosts"},"\u5728\u672c\u5730\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#upload-xiao-esp32s3-sense-recorded-sound-files-to-google-cloud-for-recognition"},"\u5c06 XIAO ESP32S3 Sense \u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u4e0a\u4f20\u5230 Google Cloud \u8fdb\u884c\u8bc6\u522b")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#deploy-chatgpt-on-xiao-esp32s3-sense"},"\u5728 XIAO ESP32S3 Sense \u4e0a\u90e8\u7f72 ChatGPT")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#design-of-screen-display-content--integration-of-programs"},"\u8bbe\u8ba1\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u4e0e\u7a0b\u5e8f\u96c6\u6210"))),(0,r.yg)("p",null,"\u4e0b\u9762\u7684\u56fe\u793a\u5c55\u793a\u4e86\u6574\u4e2a\u9879\u76ee\u7684\u6846\u67b6\u7ed3\u6784\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/17.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5f00\u59cb\u4e4b\u524d"},"\u5f00\u59cb\u4e4b\u524d"),(0,r.yg)("p",null,"\u5728\u5f00\u59cb\u8fd9\u4e2a\u9879\u76ee\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u63d0\u524d\u51c6\u5907\u597d\u786c\u4ef6\u548c\u8f6f\u4ef6\uff0c\u5982\u4e0b\u6240\u8ff0\u3002"),(0,r.yg)("h3",{id:"\u786c\u4ef6\u51c6\u5907"},"\u786c\u4ef6\u51c6\u5907"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u60f3\u5b8c\u6574\u4f53\u9a8c\u6574\u4e2a\u7a0b\u5e8f\u5185\u5bb9\uff0c\u60a8\u81f3\u5c11\u9700\u8981\u4ee5\u4e0b\u786c\u4ef6\u8bbe\u5907\u3002"),(0,r.yg)("div",{class:"table-center"},(0,r.yg)("table",{align:"center"},(0,r.yg)("tr",null,(0,r.yg)("th",null,"Seeed Studio XIAO ESP32S3 Sense"),(0,r.yg)("th",null,"Seeed Studio XIAO \u5706\u5f62\u663e\u793a\u5c4f")),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/xiaoesp32s3sense.jpg",style:{width:250,height:"auto"}}))),(0,r.yg)("td",null,(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/round_display_for_xiao/rounddisplay.jpg",style:{width:250,height:"auto"}})))),(0,r.yg)("tr",null,(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/XIAO-ESP32S3-Sense-p-5639.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u7acb\u5373\u8d2d\u4e70 \ud83d\uddb1\ufe0f")))))),(0,r.yg)("td",null,(0,r.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-Studio-Round-Display-for-XIAO-p-5638.html"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u7acb\u5373\u8d2d\u4e70 \ud83d\uddb1\ufe0f"))))))))),(0,r.yg)("p",null,"\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u5f20\u683c\u5f0f\u4e3a FAT32\uff0c\u5927\u5c0f\u4e0d\u8d85\u8fc7 32GB \u7684 microSD \u5361\u6765\u5b58\u50a8\u5f55\u97f3\u6587\u4ef6\u3002"),(0,r.yg)("p",null,"\u7531\u4e8e XIAO ESP32S3 Sense \u7684\u8bbe\u8ba1\u4e2d\uff0cSD \u5361\u63d2\u69fd\u8fde\u63a5\u4e86\u4e09\u4e2a\u4e0a\u62c9\u7535\u963b\uff08R4~R6\uff09\uff0c\u800c\u5706\u5f62\u663e\u793a\u5c4f\u4e5f\u6709\u4e0a\u62c9\u7535\u963b\uff0c\u56e0\u6b64\u5f53\u540c\u65f6\u4f7f\u7528\u4e24\u8005\u65f6\uff0cSD \u5361\u65e0\u6cd5\u6b63\u5e38\u8bfb\u53d6\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5207\u65ad XIAO ESP32S3 Sense \u6269\u5c55\u677f\u4e0a\u7684 J3 \u8fde\u63a5\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/33.png",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u5207\u65ad J3 \u540e\uff0cXIAO ESP32S3 Sense \u4e0a\u7684 SD \u5361\u63d2\u69fd\u5c06\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u56e0\u6b64\u9700\u8981\u5c06 microSD \u5361\u63d2\u5165\u5706\u5f62\u663e\u793a\u5c4f\u4e0a\u7684 SD \u5361\u63d2\u69fd\u3002"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\uff0c\u8bf7\u6309\u987a\u5e8f\u5b89\u88c5 microSD \u5361\u3001XIAO ESP32S3 Sense \u548c\u5706\u5f62\u663e\u793a\u5c4f\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/101.gif",style:{width:500,height:"auto"}})),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"\u6211\u4eec\u5efa\u8bae\u60a8\u5148\u62c6\u4e0b\u6444\u50cf\u5934\u6a21\u5757\uff0c\u4ee5\u514d\u5728\u5207\u5272 J3 \u8fde\u63a5\u65f6\u522e\u4f24\u6444\u50cf\u5934\u3002")),(0,r.yg)("h3",{id:"\u8f6f\u4ef6\u51c6\u5907"},"\u8f6f\u4ef6\u51c6\u5907"),(0,r.yg)("p",null,"\u7531\u4e8e\u4f7f\u7528\u7684\u662f XIAO ESP32S3\uff0c\u8bf7\u6309\u7167 Wiki \u4e0a\u7684\u8bf4\u660e\u5b89\u88c5 XIAO ESP32S3 \u5f00\u53d1\u677f\u5305\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/#software-preparation"},"Seeed Studio XIAO ESP32S3 \u5165\u95e8\u6307\u5357"))),(0,r.yg)("p",null,"\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528\u4e86 XIAO \u7684\u5706\u5f62\u663e\u793a\u5c4f\uff0c\u56e0\u6b64\u60a8\u8fd8\u9700\u8981\u6309\u7167 Wiki \u4e0a\u7684\u8bf4\u660e\u51c6\u5907\u6269\u5c55\u677f\u7684\u5e93\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/get_start_round_display/#getting-started"},"Seeed Studio XIAO \u5706\u5f62\u663e\u793a\u5c4f\u5165\u95e8"))),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fd8\u53ef\u80fd\u4f7f\u7528\u4e00\u4e9b\u7b2c\u4e09\u65b9\u5e93\uff0c\u5982 ChatGPT \u7684\u5e93\u548c ArduinoJSON\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u5e76\u6dfb\u52a0\u5230 Arduino \u5f00\u53d1\u73af\u5883\u4e2d\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/tree/main/libraries"},"\u5e93"))),(0,r.yg)("p",null,"\u9664\u4e86\u57fa\u7840\u5e93\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4f7f\u7528 Node \u670d\u52a1\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u81ea\u884c\u5b89\u88c5 Nodejs\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4ece ",(0,r.yg)("a",{parentName:"p",href:"https://nodejs.org/en"},"\u5b98\u7f51")," \u4e0b\u8f7d\u3002"),(0,r.yg)("p",null,"\u4e00\u5207\u51c6\u5907\u5c31\u7eea\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u4eca\u5929\u7684\u6559\u7a0b\u3002"),(0,r.yg)("h2",{id:"\u6ce8\u518c\u5e76\u542f\u7528-google-cloud-\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u6ce8\u518c\u5e76\u542f\u7528 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"\u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/before-you-begin#setting_up_your_google_cloud_platform_project"},"Google Cloud \u5b98\u65b9\u6559\u7a0b"),"\uff0c\u4e86\u89e3\u5982\u4f55\u6ce8\u518c\u5e76\u542f\u52a8 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u8fdb\u884c\u914d\u7f6e\u3002")),(0,r.yg)("p",null,"\u8bed\u97f3\u8f6c\u6587\u672c\uff08Speech-to-Text\uff09\u662f\u7531 Google \u7684\u4eba\u5de5\u667a\u80fd\uff08AI\uff09\u6280\u672f\u652f\u6301\u7684 API\u3002\u60a8\u5c06\u97f3\u9891\u6570\u636e\u53d1\u9001\u5230 Speech-to-Text\uff0c\u7136\u540e\u6536\u5230\u97f3\u9891\u6570\u636e\u7684\u6587\u672c\u8f6c\u5f55\u7ed3\u679c\u3002\u5728\u5f00\u59cb\u5411 Speech-to-Text \u53d1\u9001\u8bf7\u6c42\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u5728 Google Cloud \u63a7\u5236\u53f0\u4e2d\u542f\u7528\u8be5 API\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-1-\u767b\u5f55-google-cloud-\u63a7\u5236\u53f0"},"\u6b65\u9aa4 1. \u767b\u5f55 Google Cloud \u63a7\u5236\u53f0"),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb ",(0,r.yg)("a",{parentName:"p",href:"https://console.cloud.google.com/?_ga=2.241031875.1758680688.1685496686-1606155345.1684977559"},"\u8fd9\u91cc")," \u8df3\u8f6c\u5230 Google Cloud \u63a7\u5236\u53f0\u3002\u5982\u679c\u60a8\u5c1a\u672a\u6ce8\u518c Google Cloud\uff0c\u60a8\u53ef\u4ee5 ",(0,r.yg)("a",{parentName:"p",href:"https://console.cloud.google.com/?_ga=2.241031875.1758680688.1685496686-1606155345.1684977559"},"\u70b9\u51fb\u8fd9\u91cc")," \u6ce8\u518c\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/18.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-2-\u8fdb\u5165\u9879\u76ee\u9009\u62e9\u9875\u9762"},"\u6b65\u9aa4 2. ",(0,r.yg)("a",{parentName:"h3",href:"https://console.cloud.google.com/projectselector2/home/dashboard?_ga=2.5754355.1758680688.1685496686-1606155345.1684977559"},"\u8fdb\u5165\u9879\u76ee\u9009\u62e9\u9875\u9762")),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u73b0\u6709\u7684\u9879\u76ee\u6216\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u3002\u6709\u5173\u521b\u5efa\u9879\u76ee\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/resource-manager/docs/creating-managing-projects"},"\u521b\u5efa\u548c\u7ba1\u7406\u9879\u76ee"),"\u3002"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u7cfb\u7edf\u4f1a\u63d0\u793a\u60a8\u5c06\u8ba1\u8d39\u8d26\u6237\u5173\u8054\u5230\u8be5\u9879\u76ee\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u5df2\u6709\u9879\u76ee\uff0c\u8bf7\u786e\u4fdd\u8be5\u9879\u76ee\u5df2\u542f\u7528\u8ba1\u8d39\u3002"),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"\u6ce8\u610f\uff1a\u60a8\u5fc5\u987b\u542f\u7528\u8ba1\u8d39\u624d\u80fd\u4f7f\u7528 Speech-to-Text API\uff0c\u7136\u800c\uff0c\u9664\u975e\u8d85\u51fa\u514d\u8d39\u914d\u989d\uff0c\u5426\u5219\u4e0d\u4f1a\u6536\u53d6\u8d39\u7528\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/pricing"},"\u5b9a\u4ef7")," \u9875\u9762\u3002")),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/2.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-3-\u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u6b65\u9aa4 3. \u542f\u52a8\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("p",null,"\u4e00\u65e6\u9009\u62e9\u4e86\u9879\u76ee\u5e76\u5c06\u5176\u4e0e\u8ba1\u8d39\u8d26\u6237\u5173\u8054\uff0c\u60a8\u53ef\u4ee5\u542f\u7528 Speech-to-Text API\u3002\u524d\u5f80\u9875\u9762\u9876\u90e8\u7684\u641c\u7d22\u4ea7\u54c1\u548c\u8d44\u6e90\u680f\uff0c\u8f93\u5165 ",(0,r.yg)("strong",{parentName:"p"},"speech"),"\u3002\u4ece\u641c\u7d22\u7ed3\u679c\u4e2d\u9009\u62e9 ",(0,r.yg)("strong",{parentName:"p"},"Cloud Speech-to-Text API"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/1.png",style:{width:600,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-4-\u521b\u5efa\u670d\u52a1\u8d26\u6237"},"\u6b65\u9aa4 4. \u521b\u5efa\u670d\u52a1\u8d26\u6237"),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u7684\u9879\u76ee\u5c1a\u672a\u6709\u670d\u52a1\u8d26\u6237\uff0c\u60a8\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u3002\u4f7f\u7528 Speech-to-Text \u670d\u52a1\u5fc5\u987b\u6709\u4e00\u4e2a\u670d\u52a1\u8d26\u6237\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/3.png",style:{width:600,height:"auto"}})),(0,r.yg)("p",null,"\u5728\u5f39\u51fa\u7684\u65b0\u9875\u9762\u4e2d\uff0c\u9009\u62e9 ",(0,r.yg)("strong",{parentName:"p"},"CREATE CREDENTIALS")," \u4e0b\u7684 ",(0,r.yg)("strong",{parentName:"p"},"Service account"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/4.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("p",null,"\u5728 ",(0,r.yg)("strong",{parentName:"p"},"\u670d\u52a1\u8d26\u6237\u540d\u79f0")," \u6846\u4e2d\uff0c\u8f93\u5165\u65b0\u670d\u52a1\u8d26\u6237\u7684\u552f\u4e00\u540d\u79f0\u3002\u60a8\u7684\u8f93\u5165\u4f1a\u81ea\u52a8\u586b\u5145\u5230 ",(0,r.yg)("strong",{parentName:"p"},"Service account ID")," \u6846\u4e2d\u3002",(0,r.yg)("strong",{parentName:"p"},"Service account description")," \u6846\u662f\u53ef\u9009\u7684\uff0c\u4f46\u5982\u679c\u60a8\u6253\u7b97\u5c06\u591a\u4e2a\u670d\u52a1\u8d26\u6237\u4e0e\u9879\u76ee\u5173\u8054\uff0c\u5efa\u8bae\u586b\u5199\u8be5\u63cf\u8ff0\u3002\u8f93\u5165\u7b80\u77ed\u7684\u63cf\u8ff0\u540e\uff0c\u70b9\u51fb ",(0,r.yg)("strong",{parentName:"p"},"CREATE AND CONTINUE"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/5.png",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u6211\u4eec\u5efa\u8bae\u60a8\u4e3a\u670d\u52a1\u8d26\u6237\u5206\u914d\u4e00\u4e2a\u57fa\u7840\u7684 IAM \u89d2\u8272\u3002\u5982\u679c\u9700\u8981\uff0c\u60a8\u8fd8\u53ef\u4ee5\u4e3a\u5355\u4e2a\u670d\u52a1\u8d26\u6237\u5206\u914d\u591a\u4e2a\u89d2\u8272\u3002\u6709\u5173\u53ef\u7528\u89d2\u8272\u53ca\u5176\u6743\u9650\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/iam/docs/understanding-roles"},"IAM \u89d2\u8272"),"\u3002\u70b9\u51fb\u4e0b\u62c9\u83dc\u5355\u4e2d\u7684 ",(0,r.yg)("strong",{parentName:"p"},"Select a role"),"\uff0c\u7136\u540e\u5411\u4e0b\u6eda\u52a8\u81f3 ",(0,r.yg)("strong",{parentName:"p"},"Owner"),"\uff0c\u4ece\u53f3\u4fa7\u680f\u4e2d\u9009\u62e9\u89d2\u8272\u3002\u70b9\u51fb ",(0,r.yg)("strong",{parentName:"p"},"CONTINUE"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/6.png",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u6700\u540e\u4e00\u6b65\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u5141\u8bb8\u5176\u4ed6\u5b9e\u4f53\uff08\u4e2a\u4eba\u3001Google \u7fa4\u7ec4\u7b49\uff09\u8bbf\u95ee\u60a8\u7684\u670d\u52a1\u8d26\u6237\u3002\u5982\u679c\u4e0d\u9700\u8981\u6388\u4e88\u989d\u5916\u6743\u9650\uff0c\u53ef\u4ee5\u70b9\u51fb ",(0,r.yg)("strong",{parentName:"p"},"DONE")," \u800c\u4e0d\u8f93\u5165\u4efb\u4f55\u4fe1\u606f\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/7.png",style:{width:500,height:"auto"}})),(0,r.yg)("p",null,"\u73b0\u5728\uff0c\u670d\u52a1\u8d26\u6237\u5df2\u5217\u51fa\u5728 ",(0,r.yg)("strong",{parentName:"p"},"Service Accounts")," \u9875\u9762\u4e0a\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u66f4\u6539\u670d\u52a1\u8d26\u6237\u7684\u6743\u9650\u3001\u6dfb\u52a0\u6216\u751f\u6210\u65b0\u7684\u5bc6\u94a5\uff0c\u5e76\u6388\u4e88\u8bbf\u95ee\u6743\u9650\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/8.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-5-\u4e3a\u670d\u52a1\u8d26\u6237\u521b\u5efa-json-\u5bc6\u94a5"},"\u6b65\u9aa4 5. \u4e3a\u670d\u52a1\u8d26\u6237\u521b\u5efa JSON \u5bc6\u94a5"),(0,r.yg)("p",null,"\u5728\u5411 Speech-to-Text \u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u6b64\u79c1\u94a5\u8fdb\u884c ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/before-you-begin#set_up_your_environment_variables"},"\u8eab\u4efd\u9a8c\u8bc1"),"\u3002"),(0,r.yg)("p",null,"\u8981\u521b\u5efa\u5bc6\u94a5\uff0c\u70b9\u51fb\u670d\u52a1\u8d26\u6237\u5e76\u9009\u62e9 ",(0,r.yg)("strong",{parentName:"p"},"KEYS")," \u6807\u7b7e\u3002\u70b9\u51fb ",(0,r.yg)("strong",{parentName:"p"},"ADD KEY -> Create new key"),"\u3002\u6211\u4eec\u5efa\u8bae\u60a8\u521b\u5efa JSON \u683c\u5f0f\u7684\u5bc6\u94a5\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/9.png",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u7cfb\u7edf\u5c06\u81ea\u52a8\u4e0b\u8f7d\u60a8\u9009\u62e9\u683c\u5f0f\u7684\u65b0\u5bc6\u94a5\u3002\u8bf7\u5c06\u6b64\u6587\u4ef6\u4fdd\u5b58\u5728\u5b89\u5168\u7684\u5730\u65b9\uff0c\u5e76\u8bb0\u5f55\u6587\u4ef6\u8def\u5f84\u3002\u5728\u6bcf\u6b21\u5f00\u59cb\u65b0\u7684 Speech-to-Text \u4f1a\u8bdd\u65f6\uff0c\u60a8\u9700\u8981\u5c06 ",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS")," \u73af\u5883\u53d8\u91cf\u6307\u5411\u6b64\u6587\u4ef6\u3002\u8fd9\u662f\u8fdb\u884c Speech-to-Text \u8bf7\u6c42\u8eab\u4efd\u9a8c\u8bc1\u7684\u5fc5\u8981\u6b65\u9aa4\u3002\u5bc6\u94a5\u7684\u552f\u4e00 ID \u4f1a\u51fa\u73b0\u5728\u670d\u52a1\u8d26\u6237\u540d\u79f0\u65c1\u8fb9\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/10.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"\u8bf7\u4fdd\u6301 JSON \u683c\u5f0f\u7684\u5bc6\u94a5\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5728\u540e\u7eed\u6b65\u9aa4\u4e2d\u4f7f\u7528\u5b83\u3002")),(0,r.yg)("h2",{id:"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"},"\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-6-\u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6"},"\u6b65\u9aa4 6. \u4e0b\u8f7d\u9879\u76ee\u6587\u4ef6"),(0,r.yg)("p",null,"\u6211\u4eec\u5df2\u7ecf\u5c06\u5b8c\u6210\u6574\u4e2a\u6559\u7a0b\u6240\u9700\u7684\u9879\u76ee\u6587\u4ef6\u6253\u5305\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4ece Github \u4e0b\u8f7d\uff0c\u6216\u8005\u4f7f\u7528 Git \u547d\u4ee4\u5c06\u5176\u4e0b\u8f7d\u5230\u672c\u5730\u3002"),(0,r.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,r.yg)("a",{class:"github_item",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT"},(0,r.yg)("strong",null,(0,r.yg)("span",null,(0,r.yg)("font",{color:"FFFFFF",size:"4"}," \u4e0b\u8f7d\u9879\u76ee")))," ",(0,r.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,r.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,r.yg)("br",null),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"git clone https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT.git\n")),(0,r.yg)("p",null,"\u540c\u65f6\uff0c\u60a8\u53ef\u4ee5\u5c06\u6211\u4eec\u5728 ",(0,r.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 5")," \u4e2d\u51c6\u5907\u7684 JSON \u6587\u4ef6\u590d\u5236\u5230 ",(0,r.yg)("strong",{parentName:"p"},"NodejsServer")," \u6587\u4ef6\u5939\u4e2d\uff0c\u7a0d\u540e\u6211\u4eec\u4f1a\u4f7f\u7528\u5b83\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/19.png",style:{width:600,height:"auto"}})),(0,r.yg)("h3",{id:"\u6b65\u9aa4-7-\u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf"},"\u6b65\u9aa4 7. \u8bbe\u7f6e\u8eab\u4efd\u9a8c\u8bc1\u73af\u5883\u53d8\u91cf"),(0,r.yg)("p",null,"\u4e3a\u4e86\u8bbe\u7f6e ",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS"),"\uff0c\u60a8\u5fc5\u987b\u62e5\u6709\u4e0e\u9879\u76ee\u5173\u8054\u7684\u670d\u52a1\u8d26\u6237\uff0c\u5e76\u8bbf\u95ee\u8be5\u670d\u52a1\u8d26\u6237\u7684 JSON \u5bc6\u94a5\u3002"),(0,r.yg)("p",null,"\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf ",(0,r.yg)("strong",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS"),"\uff0c\u4e3a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u63d0\u4f9b\u8eab\u4efd\u9a8c\u8bc1\u51ed\u636e\u3002"),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(a.A,{value:"Windows",label:"Windows",mdxType:"TabItem"},(0,r.yg)("p",null,"\u5bf9\u4e8e PowerShell\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"\n')),(0,r.yg)("p",null,"\u5c06 ",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH")," \u66ff\u6362\u4e3a\u5305\u542b\u60a8\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684 JSON \u6587\u4ef6\u8def\u5f84\u3002"),(0,r.yg)("p",null,"\u4f8b\u5982\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="C:\\Users\\username\\Downloads\\service-account-file.json"\n')),(0,r.yg)("p",null,"\u5bf9\u4e8e\u547d\u4ee4\u63d0\u793a\u7b26\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"set GOOGLE_APPLICATION_CREDENTIALS=KEY_PATH\n")),(0,r.yg)("p",null,"\u5c06 ",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH")," \u66ff\u6362\u4e3a\u5305\u542b\u60a8\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684 JSON \u6587\u4ef6\u8def\u5f84\u3002")),(0,r.yg)(a.A,{value:"MacOS or Linux",label:"MacOS \u6216 Linux",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export GOOGLE_APPLICATION_CREDENTIALS="KEY_PATH"\n')),(0,r.yg)("p",null,"\u5c06 ",(0,r.yg)("strong",{parentName:"p"},"KEY_PATH")," \u66ff\u6362\u4e3a\u5305\u542b\u60a8\u7684\u670d\u52a1\u8d26\u6237\u5bc6\u94a5\u7684 JSON \u6587\u4ef6\u8def\u5f84\u3002"),(0,r.yg)("p",null,"\u4f8b\u5982\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'export GOOGLE_APPLICATION_CREDENTIALS="/home/user/Downloads/service-account-file.json"\n')))),(0,r.yg)("p",null,"\u5728\u524d\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06 JSON \u6587\u4ef6\u653e\u7f6e\u5728 ",(0,r.yg)("strong",{parentName:"p"},"NodejsServer")," \u6587\u4ef6\u5939\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u8be5\u6587\u4ef6\u5939\uff0c\u53f3\u952e\u70b9\u51fb\u5e76\u9009\u62e9 ",(0,r.yg)("strong",{parentName:"p"},"Open in Powershell")," \u6253\u5f00 Windows \u7ec8\u7aef\u3002"),(0,r.yg)("p",null,"\u7136\u540e\u53ea\u9700\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$env:GOOGLE_APPLICATION_CREDENTIALS="tensile-yen-3xxxxx-fdxxxxxxxxxx.json"\n')),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u65f6\uff0c\u8bf7\u4f7f\u7528\u60a8\u7684 JSON \u6587\u4ef6\u540d\u3002")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"\u5982\u679c\u60a8\u91cd\u542f\u4e86\u8ba1\u7b97\u673a\u6216\u5173\u95ed\u4e86 Powershell\uff0c\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u6765\u6dfb\u52a0\u5bc6\u94a5\u3002")),(0,r.yg)("h3",{id:"\u6b65\u9aa4-8-\u6d4b\u8bd5\u672c\u5730-google-cloud-\u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72"},"\u6b65\u9aa4 8. \u6d4b\u8bd5\u672c\u5730 Google Cloud \u8bed\u97f3\u8f6c\u6587\u672c\u670d\u52a1\u7684\u90e8\u7f72"),(0,r.yg)("p",null,"\u4e00\u5207\u5c31\u7eea\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u6bb5\u5f55\u5236\u7684\u97f3\u9891\uff0c\u7ed3\u5408 JSON \u7a0b\u5e8f\uff0c\u68c0\u67e5\u6211\u4eec\u7684\u90e8\u7f72\u662f\u5426\u6210\u529f\u5730\u5c06\u5f55\u97f3\u8f6c\u6362\u4e3a\u6587\u672c\u3002"),(0,r.yg)("p",null,"\u8bf7\u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e2d\u7684 ",(0,r.yg)("strong",{parentName:"p"},"NodejsServer")," \u4e2d\u6253\u5f00\u4e00\u4e2a Powershell \u7a97\u53e3\u3002"),(0,r.yg)("p",null,"\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u3002\u6b64\u547d\u4ee4\u5c06\u6267\u884c ",(0,r.yg)("inlineCode",{parentName:"p"},"speechAPItest.js")," \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u9879\u76ee\u8d44\u6e90\u6587\u4ef6\u5939\u4e2d\u7684\u5f55\u97f3\u6587\u4ef6\u4f5c\u4e3a\u97f3\u9891\u8f93\u5165\u6e90\uff0c\u53d1\u9001\u5230 Google Cloud \u8fdb\u884c\u5206\u6790\uff0c\u5e76\u8fd4\u56de\u8bc6\u522b\u51fa\u7684\u8bed\u97f3\u5185\u5bb9\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"node ./speechAPItest.js\n")),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/13.png",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u5982\u679c\u60a8\u7684\u5b9e\u73b0\u5982\u4e0a\u6240\u793a\uff0c\u5219\u8868\u793a\u60a8\u5df2\u6210\u529f\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u90e8\u7f72\u4e86 Google Cloud \u670d\u52a1\uff0c\u5e76\u51c6\u5907\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6b65\u3002"),(0,r.yg)("p",null,"\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u67e5\u9605 ",(0,r.yg)("a",{parentName:"p",href:"https://cloud.google.com/speech-to-text/docs/"},"\u5b98\u65b9 Google Cloud \u6307\u5357")," \u4ee5\u68c0\u67e5\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u662f\u5426\u5b58\u5728\u4efb\u4f55\u9519\u8bef\u6216\u9057\u6f0f\u7684\u6b65\u9aa4\u3002"),(0,r.yg)("h2",{id:"\u4e0a\u4f20-xiao-esp32s3-sense-\u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u5230-google-cloud-\u8fdb\u884c\u8bc6\u522b"},"\u4e0a\u4f20 XIAO ESP32S3 Sense \u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u5230 Google Cloud \u8fdb\u884c\u8bc6\u522b"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539\u4e0a\u4f20\u97f3\u9891\u6587\u4ef6\u7684\u8def\u5f84\u3002\u7531\u672c\u5730\u4e0a\u4f20\u53d8\u4e3a\u901a\u8fc7 XIAO ESP32S3 Sense \u5f55\u97f3\u4e0a\u4f20\u3002XIAO ESP32S3 Sense \u5f55\u5236\u7684\u97f3\u9891\u6587\u4ef6\u9996\u5148\u4fdd\u5b58\u5728 microSD \u5361\u4e0a\uff0c\u7136\u540e\u901a\u8fc7\u672c\u5730\u7aef\u53e3\u4f20\u8f93\u5230 Google Cloud\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-9-\u542f\u52a8-google-cloud-\u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u76d1\u542c"},"\u6b65\u9aa4 9. \u542f\u52a8 Google Cloud \u8bed\u97f3\u8bc6\u522b\u670d\u52a1\u7684\u7aef\u53e3\u76d1\u542c"),(0,r.yg)("p",null,"\u540c\u6837\uff0c\u5728 NodejsServer \u6587\u4ef6\u5939\u4e2d\uff0c\u4f7f\u7528 PowerShell \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"node ./speechAPIServer.js\n")),(0,r.yg)("p",null,"\u6267\u884c\u540e\uff0c",(0,r.yg)("strong",{parentName:"p"},"speechAPIServer.js")," \u7a0b\u5e8f\u5c06\u5f00\u59cb\u6267\u884c\uff0c\u5e76\u6301\u7eed\u76d1\u542c ",(0,r.yg)("inlineCode",{parentName:"p"},"localhost:8888"),"\u3002\u4e00\u65e6\u6709\u6587\u4ef6\u4f20\u8f93\u5230\u8be5\u7aef\u53e3\uff0cGoogle Cloud \u670d\u52a1\u5c06\u88ab\u8c03\u7528\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/20.png",style:{width:800,height:"auto"}})),(0,r.yg)("p",null,"\u4e00\u65e6\u76d1\u542c\u5f00\u59cb\uff0c\u53ea\u9700\u4fdd\u6301\u8be5\u7a97\u53e3\u6253\u5f00\uff0c\u670d\u52a1\u5c06\u6301\u7eed\u8fd0\u884c\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-10-\u68c0\u67e5\u4e3b\u673a-ip-\u5730\u5740"},"\u6b65\u9aa4 10. \u68c0\u67e5\u4e3b\u673a IP \u5730\u5740"),(0,r.yg)("p",null,"\u7531\u4e8e XIAO \u5f55\u5236\u7684\u6587\u4ef6\u9700\u8981\u901a\u8fc7\u4e3b\u673a\u7684\u7aef\u53e3\u53f7\u4e0a\u4f20\u5230 Google Cloud \u670d\u52a1\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u60a8\u8ba1\u7b97\u673a\u4e3b\u673a\u7684 IP \u5730\u5740\u3002"),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(a.A,{value:"Windows",label:"Windows",mdxType:"TabItem"},(0,r.yg)("p",null,"\u5728 PowerShell \u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u83b7\u53d6\u8ba1\u7b97\u673a\u7684 IP \u5730\u5740\u4fe1\u606f\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"ipcofig\n"))),(0,r.yg)(a.A,{value:"MacOS or Linux",label:"MacOS \u6216 Linux",mdxType:"TabItem"},(0,r.yg)("p",null,"\u5728 shell \u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u83b7\u53d6\u8ba1\u7b97\u673a\u7684 IP \u5730\u5740\u4fe1\u606f\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"ifconfig\n")))),(0,r.yg)("p",null,"\u8bf7\u8bb0\u4e0b\u60a8\u7684 IP \u5730\u5740\uff0c\u56e0\u4e3a\u7a0d\u540e\u6211\u4eec\u5c06\u9700\u8981\u4f7f\u7528\u5b83\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa4-11-\u4e0a\u4f20-xiao-esp32s3-sense-\u7684\u7a0b\u5e8f"},"\u6b65\u9aa4 11. \u4e0a\u4f20 XIAO ESP32S3 Sense \u7684\u7a0b\u5e8f"),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u6587\u4ef6\u5939 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino"},"XIAOESP32S3-RECORD-UPLOAD"))," \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3a\u672c\u8282\u7684\u793a\u4f8b\u51c6\u5907\u4e86\u7a0b\u5e8f\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5982\u679c\u60a8\u7684 ESP32 \u7248\u672c\u662f 2.0.x\uff0c\u8bf7\u70b9\u51fb\u8fd9\u91cc\u67e5\u770b\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n// \u7528\u4e8e\u5f55\u97f3\u7a0b\u5e8f\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4e0d\u8981\u66f4\u6539\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 10      // \u79d2\uff0c\u6700\u5927\u503c\u4e3a240\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\n\nbool isWIFIConnected;\n\nvoid setup() {\n  // \u5728\u6b64\u7f16\u5199\u60a8\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u4ec5\u8fd0\u884c\u4e00\u6b21\uff1a\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n  // \u4f20\u8f93\u6a21\u5f0f\u4e3a PDM_MONO_MODE\uff0c\u5373\u4f7f\u7528 PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n  if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n    Serial.println("\u521d\u59cb\u5316 I2S \u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("SD \u5361\u6302\u8f7d\u5931\u8d25\uff01");\n    while (1) ;\n  }\n  \n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  delay(500);\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\nvoid loop() {\n  // \u4e3b\u5faa\u73af\u4ee3\u7801\uff0c\u5728\u6b64\u91cd\u590d\u8fd0\u884c\uff1a\n}\n\nvoid i2s_adc(void *arg)\n{\n  uint32_t sample_size = 0;\n\n  // \u8be5\u53d8\u91cf\u7528\u4e8e\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n  uint8_t *rec_buffer = NULL;\n  Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n\n  File file = SD.open(filename, FILE_WRITE);\n\n  // \u5c06\u5934\u4fe1\u606f\u5199\u5165 WAV \u6587\u4ef6\n  uint8_t wav_header[WAV_HEADER_SIZE];\n\n  // \u5c06 WAV \u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165 wav_header \u6570\u7ec4\n  generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n\n  // \u8c03\u7528 file.write() \u51fd\u6570\u5c06 wav_header \u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684 WAV \u6587\u4ef6\n  file.write(wav_header, WAV_HEADER_SIZE);\n\n  // \u8be5\u4ee3\u7801\u4f7f\u7528 ESP32 \u7684 PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u5f55\u97f3\u6570\u636e\n  rec_buffer = (uint8_t *)ps_malloc(record_size);\n  if (rec_buffer == NULL) {\n    Serial.printf("malloc \u5931\u8d25\uff01\\n");\n    while(1) ;\n  }\n  Serial.printf("\u7f13\u51b2\u533a\uff1a%d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n\n  // \u5f00\u59cb\u5f55\u97f3\n  // I2S \u7aef\u53e3\u53f7\uff08\u5728\u6b64\u4e3a I2S_NUM_0\uff09\uff0c\n  // \u6307\u5411\u8981\u5199\u5165\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373 rec_buffer\uff09\uff0c\n  // \u8bfb\u53d6\u6570\u636e\u7684\u5927\u5c0f\uff08\u5373 record_size\uff09\uff0c\n  // \u6307\u5411\u53d8\u91cf\u7684\u6307\u9488\uff0c\u7528\u4e8e\u6307\u793a\u8bfb\u53d6\u6570\u636e\u7684\u5b9e\u9645\u5927\u5c0f\uff08\u5373 &sample_size\uff09\uff0c\n  // \u6700\u5927\u7b49\u5f85\u65f6\u95f4\uff08\u6b64\u5904\u4e3a portMAX_DELAY\uff0c\u8868\u793a\u65e0\u9650\u7b49\u5f85\u65f6\u95f4\uff09\n  esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n  if (sample_size == 0) {\n    Serial.printf("\u5f55\u97f3\u5931\u8d25\uff01\\n");\n  } else {\n    Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n  }\n\n  // \u63d0\u5347\u97f3\u91cf\n  for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n    (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n  }\n\n  // \u5c06\u6570\u636e\u5199\u5165 WAV \u6587\u4ef6\n  Serial.printf("\u6b63\u5728\u5199\u5165\u6587\u4ef6 ...\\n");\n  if (file.write(rec_buffer, record_size) != record_size)\n    Serial.printf("\u5199\u5165\u6587\u4ef6\u5931\u8d25\uff01\\n");\n\n  free(rec_buffer);\n  rec_buffer = NULL;\n  file.close();\n  Serial.printf("\u5f55\u97f3\u7ed3\u675f\u3002\\n");\n    \n  listDir(SD, "/", 0);\n\n  if(isWIFIConnected){\n    uploadFile();\n  }\n  \n  vTaskDelete(NULL);\n}\n\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // \u53c2\u8003\u6b64\u94fe\u63a5\uff1a http://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16 bits)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  char* ssid = "wifi-ssid";\n  char* password = "wifi-password";\n  Serial.print("Try to connect to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi Connected!");\n  isWIFIConnected = true;\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n\nvoid uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    Serial.println("====================      End      ====================");\n  }else{\n    Serial.println("Error");\n  }\n  file.close();\n  client.end();\n}\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"If your ESP32 version is 3.0.x. Click here to preview the full program"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <ESP_I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n// \u7528\u4e8e\u5f55\u97f3\u7a0b\u5e8f\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4e0d\u8981\u66f4\u6539\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 10      // \u79d2\uff0c\u6700\u5927\u503c\u4e3a240\n\n// \u5b9a\u4e49 I2S\nI2SClass I2S;\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\n\nbool isWIFIConnected;\n\nvoid setup() {\n  // \u5728\u6b64\u7f16\u5199\u60a8\u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u4ec5\u8fd0\u884c\u4e00\u6b21\uff1a\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  // \u8bbe\u7f6e42\u4e3aPDM\u65f6\u949f\uff0c41\u4e3aPDM\u6570\u636e\u5f15\u811a\n  I2S.setPinsPdmRx(42, 41);\n\n  // \u4f20\u8f93\u6a21\u5f0f\u4e3aPDM_MONO_MODE\uff0c\u5373\u4f7f\u7528PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n  if (!I2S.begin(I2S_MODE_PDM_RX, 16000, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO)) {\n    Serial.println("\u521d\u59cb\u5316 I2S \u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("SD\u5361\u6302\u8f7d\u5931\u8d25\uff01");\n    while (1) ;\n  }\n  \n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  delay(500);\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\nvoid loop() {\n  // \u4e3b\u5faa\u73af\u4ee3\u7801\uff0c\u5728\u6b64\u91cd\u590d\u8fd0\u884c\uff1a\n}\n\nvoid i2s_adc(void *arg)\n{\n  uint32_t sample_size = 0;\n\n  // \u8be5\u53d8\u91cf\u7528\u4e8e\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n  uint8_t *rec_buffer = NULL;\n  Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n\n  File file = SD.open(filename, FILE_WRITE);\n\n  // \u5c06\u5934\u4fe1\u606f\u5199\u5165WAV\u6587\u4ef6\n  uint8_t wav_header[WAV_HEADER_SIZE];\n\n  // \u5c06WAV\u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165wav_header\u6570\u7ec4\n  generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n\n  // \u8c03\u7528file.write()\u51fd\u6570\u5c06wav_header\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684WAV\u6587\u4ef6\n  file.write(wav_header, WAV_HEADER_SIZE);\n\n  // \u8be5\u4ee3\u7801\u4f7f\u7528ESP32\u7684PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u5f55\u97f3\u6570\u636e\n  rec_buffer = (uint8_t *)ps_malloc(record_size);\n  if (rec_buffer == NULL) {\n    Serial.printf("malloc\u5931\u8d25\uff01\\n");\n    while(1) ;\n  }\n  Serial.printf("\u7f13\u51b2\u533a\uff1a%d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n\n  // \u5f00\u59cb\u5f55\u97f3\n  // I2S\u7aef\u53e3\u53f7\uff08\u5728\u6b64\u4e3aI2S_NUM_0\uff09\uff0c\n  // \u6307\u5411\u8981\u5199\u5165\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373rec_buffer\uff09\uff0c\n  // \u8bfb\u53d6\u6570\u636e\u7684\u5927\u5c0f\uff08\u5373record_size\uff09\uff0c\n  // \u6307\u5411\u53d8\u91cf\u7684\u6307\u9488\uff0c\u7528\u4e8e\u6307\u793a\u8bfb\u53d6\u6570\u636e\u7684\u5b9e\u9645\u5927\u5c0f\uff08\u5373&sample_size\uff09\uff0c\n  // \u6700\u5927\u7b49\u5f85\u65f6\u95f4\uff08\u6b64\u5904\u4e3aportMAX_DELAY\uff0c\u8868\u793a\u65e0\u9650\u7b49\u5f85\u65f6\u95f4\uff09\n  esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n  if (sample_size == 0) {\n    Serial.printf("\u5f55\u97f3\u5931\u8d25\uff01\\n");\n  } else {\n    Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n  }\n\n  // \u63d0\u5347\u97f3\u91cf\n  for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n    (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n  }\n\n  // \u5c06\u6570\u636e\u5199\u5165WAV\u6587\u4ef6\n  Serial.printf("\u6b63\u5728\u5199\u5165\u6587\u4ef6 ...\\n");\n  if (file.write(rec_buffer, record_size) != record_size)\n    Serial.printf("\u5199\u5165\u6587\u4ef6\u5931\u8d25\uff01\\n");\n\n  free(rec_buffer);\n  rec_buffer = NULL;\n  file.close();\n  Serial.printf("\u5f55\u97f3\u7ed3\u675f\u3002\\n");\n    \n  listDir(SD, "/", 0);\n\n  if(isWIFIConnected){\n    uploadFile();\n  }\n  \n  vTaskDelete(NULL);\n}\n\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // \u53c2\u8003\u8d44\u6599\uff1a http://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // \u683c\u5f0f\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (PCM\u4e3a16)\n    0x01, 0x00, // AudioFormat (PCM\u4e3a1)\n    0x01, 0x00, // NumChannels (1\u901a\u9053)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16\u4f4d)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  char* ssid = "wifi-ssid";\n  char* password = "wifi-password";\n  Serial.print("Try to connect to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi Connected!");\n  isWIFIConnected = true;\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n\nvoid uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    Serial.println("====================      End      ====================");\n  }else{\n    Serial.println("Error");\n  }\n  file.close();\n  client.end();\n}\n'))),(0,r.yg)("p",null,"\u5728\u7f16\u8bd1\u5e76\u4e0a\u4f20\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u6839\u636e\u60a8\u7684\u60c5\u51b5\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u5f55\u97f3\u65f6\u95f4")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL13C2-L13C2"},"\u7b2c13\u884c"),"\uff0c\u9ed8\u8ba4\u7684\u5f55\u97f3\u65f6\u95f4\u8bbe\u7f6e\u4e3a10\u79d2\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\u8fd9\u4e2a\u5f55\u97f3\u65f6\u95f4\uff0c\u6700\u591a\u53ef\u8bbe\u7f6e\u4e3a240\u79d2\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4fdd\u5b58\u5f55\u97f3\u6587\u4ef6\u7684\u6587\u4ef6\u540d")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#L19"},"\u7b2c19\u884c"),"\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u5f55\u97f3\u6587\u4ef6\u7684\u540d\u79f0\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi\u7f51\u7edc\u540d\u79f0")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#L172"},"\u7b2c172\u884c"),"\uff0c\u5c06\u7f51\u7edc\u540d\u79f0\u66f4\u6539\u4e3a\u4e0e\u60a8\u90e8\u7f72Google Cloud\u670d\u52a1\u7684\u4e3b\u673a\u5728\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\u7684\u7f51\u7edc\u540d\u79f0\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi\u7f51\u7edc\u5bc6\u7801")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL173C5-L173C5"},"\u7b2c172\u884c"),"\uff0c\u66f4\u6539\u4e0e\u7f51\u7edc\u5bf9\u5e94\u7684\u5bc6\u7801\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4e3b\u673aIP\u5730\u5740")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-RECORD-UPLOAD/XIAOESP32S3-RECORD-UPLOAD.ino#LL198C7-L198C7"},"\u7b2c198\u884c"),"\uff0c\u60a8\u9700\u8981\u5c06\u6b64\u5904\u7684IP\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u7684\u4e3b\u673aIP\u5730\u5740\uff0c\u5e76\u4fdd\u6301\u7aef\u53e3\u53f7\u4e3a8888\u3002")),(0,r.yg)("p",null,"\u4e00\u65e6\u60a8\u6839\u636e\u9700\u8981\u66f4\u6539\u4e86\u7a0b\u5e8f\u5e76\u4e0a\u4f20\uff0c\u5c31\u53ef\u4ee5\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u5f00\u59cb\u51c6\u5907\u5f55\u5236\u60a8\u60f3\u8bf4\u7684\u5185\u5bb9\u3002\u5f55\u97f3\u5b8c\u6210\u540e\uff0cGoogle Cloud\u5c06\u5206\u6790\u60a8\u7684\u5f55\u97f3\u6587\u4ef6\uff0c\u5e76\u5c06\u8bc6\u522b\u7ed3\u679c\u8fd4\u56de\u7ed9\u60a8\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/15.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5728xiao-esp32s3-sense\u4e0a\u90e8\u7f72chatgpt"},"\u5728XIAO ESP32S3 Sense\u4e0a\u90e8\u7f72ChatGPT"),(0,r.yg)("p",null,"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u589e\u52a0\u96be\u5ea6\uff0c\u7ee7\u7eed\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0ChatGPT\u7684\u8c03\u7528\u3002"),(0,r.yg)("h3",{id:"\u7b2c12\u6b65-\u4f7f\u7528\u8bc6\u522b\u51fa\u7684\u6587\u672c\u4f5c\u4e3a\u95ee\u9898\u5411chatgpt\u63d0\u95ee"},"\u7b2c12\u6b65. \u4f7f\u7528\u8bc6\u522b\u51fa\u7684\u6587\u672c\u4f5c\u4e3a\u95ee\u9898\u5411ChatGPT\u63d0\u95ee"),(0,r.yg)("p",null,"\u5728\u9879\u76ee\u6587\u4ef6\u5939 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino"},"XIAOESP32S3-SPEECH-TO-CHATGPT"))," \u4e2d\uff0c\u6211\u4eec\u4e3a\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u51c6\u5907\u4e86\u7a0b\u5e8f\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5982\u679c\u60a8\u7684ESP32\u7248\u672c\u662f2.0.x\uff0c\u8bf7\u70b9\u51fb\u8fd9\u91cc\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n// \u5f55\u97f3\u7a0b\u5e8f\u4e2d\u8981\u4f7f\u7528\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4e0d\u8981\u66f4\u6539\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // \u79d2\uff0c\u6700\u5927\u503c\u4e3a240\n\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\nbool isWIFIConnected;\n\nString chatgpt_Q;\n\nTaskHandle_t chatgpt_handle;\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");\n\n//*****************************************Arduino \u57fa\u7840\u8bbe\u7f6e******************************************//\n\nvoid setup() {\n  // \u8bbe\u7f6e\u4ee3\u7801\uff0c\u8fd0\u884c\u4e00\u6b21\uff1a\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n  // \u4f20\u8f93\u6a21\u5f0f\u662f PDM_MONO_MODE\uff0c\u610f\u5473\u7740\u4f7f\u7528 PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n  if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n    Serial.println("\u521d\u59cb\u5316 I2S \u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("SD \u5361\u6302\u8f7d\u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n  delay(500);\n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  xTaskCreate(chatgpt, "chatgpt", 1024 * 8, NULL, 2, &chatgpt_handle);\n}\n\nvoid loop() {\n  // \u4e3b\u5faa\u73af\u4ee3\u7801\uff0c\u91cd\u590d\u8fd0\u884c\uff1a\n}\n\n//*****************************************RTOS\u4efb\u52a1******************************************//\n\nvoid i2s_adc(void *arg)\n{\n  while(1){\n    uint32_t sample_size = 0;\n  \n    // \u8fd9\u4e2a\u53d8\u91cf\u5c06\u7528\u4e8e\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // \u5199\u5165 WAV \u6587\u4ef6\u5934\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // \u5c06 WAV \u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165 wav_header \u6570\u7ec4\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // \u8c03\u7528 file.write() \u51fd\u6570\u5c06 wav_header \u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684 WAV \u6587\u4ef6\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 ESP32 \u7684 PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u5f55\u97f3\u6570\u636e\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("\u5185\u5b58\u5206\u914d\u5931\u8d25\uff01\\n");\n      while(1) ;\n    }\n    Serial.printf("\u7f13\u51b2\u533a: %d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // \u5f00\u59cb\u5f55\u97f3\n    // I2S \u7aef\u53e3\u53f7\uff08\u6b64\u5904\u4e3a I2S_NUM_0\uff09\uff0c\n    // \u6307\u5411\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373 rec_buffer\uff09\uff0c\n    // \u8981\u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff08\u5373 record_size\uff09\uff0c\n    // \u6307\u5411\u5b9e\u9645\u8bfb\u53d6\u6570\u636e\u5927\u5c0f\u7684\u53d8\u91cf\u7684\u6307\u9488\uff08\u5373 &sample_size\uff09\uff0c\n    // \u8bfb\u53d6\u6570\u636e\u7684\u6700\u5927\u7b49\u5f85\u65f6\u95f4\uff08\u6b64\u5904\u4e3a portMAX_DELAY\uff0c\u8868\u793a\u65e0\u9650\u7b49\u5f85\uff09\u3002\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("\u5f55\u97f3\u5931\u8d25\uff01\\n");\n    } else {\n      Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n    }\n  \n    // \u589e\u52a0\u97f3\u91cf\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // \u5199\u5165\u6570\u636e\u5230 WAV \u6587\u4ef6\n    Serial.printf("\u5199\u5165\u6587\u4ef6 ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("\u5199\u5165\u6587\u4ef6\u5931\u8d25\uff01\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("\u5f55\u97f3\u7ed3\u675f\u3002\\n");\n      \n    listDir(SD, "/", 0);\n\n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n    \n    if(uploadStatus)\n      xTaskNotifyGive(chatgpt_handle);\n    vTaskDelay(10000);       // \u6bcf\u6b21\u5f55\u97f3\u95f4\u969410\u79d2\n  }\n//  vTaskDelete(NULL);\n}\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  Serial.print("\u5c1d\u8bd5\u8fde\u63a5\u5230 ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi \u5df2\u8fde\u63a5\uff01");\n  isWIFIConnected = true;\n  // \u5ffd\u7565 SSL \u8bc1\u4e66\u9a8c\u8bc1\n  client.setInsecure();\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n\nvoid chatgpt(void *pvParameters){\n  while(1){\n    // \u7b49\u5f85\u6765\u81ea\u4efb\u52a11\u7684\u901a\u77e5\u4fe1\u53f7\n    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);\n\n    String result;\n    if (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", chatgpt_Q, result)) {\n      Serial.println("===\u6210\u529f===");\n      Serial.println(result);\n    } else {\n      Serial.println("===\u9519\u8bef===");\n      Serial.println(result);\n    }\n\n  }\n}\n\n//*****************************************\u97f3\u9891\u5904\u7406******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // \u53c2\u8003\u6587\u6863\uff1ahttp://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16 bits)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************\u6587\u4ef6\u5904\u7406******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    chatgpt_Q = response;\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    return true;\n  }else{\n    Serial.println("Error");\n    return false;\n  }\n  \n}\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5982\u679c\u60a8\u7684 ESP32 \u7248\u672c\u662f 3.0.x\uff0c\u8bf7\u70b9\u51fb\u8fd9\u91cc\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <ESP_I2S.h>\n#include <WiFi.h>\n#include <HTTPClient.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n// \u7528\u4e8e\u5f55\u97f3\u7a0b\u5e8f\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4e0d\u8981\u66f4\u6539\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // \u79d2\uff0c\u6700\u5927\u503c\u4e3a 240\n\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\n// \u5b9a\u4e49 I2S\nI2SClass I2S;\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\nFile file;\nconst char filename[] = "/recording.wav";\nbool isWIFIConnected;\n\nString chatgpt_Q;\n\nTaskHandle_t chatgpt_handle;\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");\n\n//*****************************************Arduino \u57fa\u7840\u8bbe\u7f6e******************************************//\n\nvoid setup() {\n  // \u5728\u6b64\u5904\u653e\u7f6e\u60a8\u7684\u8bbe\u7f6e\u4ee3\u7801\uff0c\u53ea\u4f1a\u8fd0\u884c\u4e00\u6b21\uff1a\n  Serial.begin(115200);\n  while (!Serial) ;\n  \n  // \u8bbe\u7f6e 42 \u5f15\u811a\u4e3a PDM \u65f6\u949f\uff0c41 \u5f15\u811a\u4e3a PDM \u6570\u636e\n  I2S.setPinsPdmRx(42, 41);\n\n  // \u4f20\u8f93\u6a21\u5f0f\u4e3a PDM_MONO_MODE\uff0c\u8868\u793a\u4f7f\u7528 PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n  if (!I2S.begin(I2S_MODE_PDM_RX, 16000, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO)) {\n    Serial.println("\u521d\u59cb\u5316 I2S \u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  if(!SD.begin(D2)){\n    Serial.println("SD \u5361\u6302\u8f7d\u5931\u8d25\uff01");\n    while (1) ;\n  }\n\n  xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n  delay(500);\n  xTaskCreate(i2s_adc, "i2s_adc", 1024 * 8, NULL, 1, NULL);\n  xTaskCreate(chatgpt, "chatgpt", 1024 * 8, NULL, 2, &chatgpt_handle);\n}\n\nvoid loop() {\n  // \u5728\u6b64\u5904\u653e\u7f6e\u60a8\u7684\u4e3b\u5faa\u73af\u4ee3\u7801\uff0c\u5c06\u91cd\u590d\u8fd0\u884c\uff1a\n}\n\n//*****************************************RTOS \u4efb\u52a1******************************************//\n\nvoid i2s_adc(void *arg)\n{\n  while(1){\n    uint32_t sample_size = 0;\n  \n    // \u6b64\u53d8\u91cf\u5c06\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // \u5c06\u5934\u90e8\u5199\u5165 WAV \u6587\u4ef6\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // \u5c06 WAV \u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165 wav_header \u6570\u7ec4\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // \u8c03\u7528 file.write() \u51fd\u6570\uff0c\u5c06 wav_header \u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684 WAV \u6587\u4ef6\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 ESP32 \u7684 PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u5f55\u97f3\u6570\u636e\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("\u5185\u5b58\u5206\u914d\u5931\u8d25\uff01\\n");\n      while(1) ;\n    }\n    Serial.printf("\u7f13\u51b2\u533a: %d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // \u5f00\u59cb\u5f55\u97f3\n    // I2S \u7aef\u53e3\u53f7\uff08\u5728\u6b64\u6848\u4f8b\u4e2d\u4e3a I2S_NUM_0\uff09\uff0c\n    // \u6307\u5411\u8981\u5199\u5165\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373 rec_buffer\uff09\uff0c\n    // \u8981\u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff08\u5373 record_size\uff09\uff0c\n    // \u6307\u5411\u53d8\u91cf\u7684\u6307\u9488\uff0c\u8be5\u53d8\u91cf\u6307\u5411\u5b9e\u9645\u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff08\u5373 &sample_size\uff09\uff0c\n    // \u6700\u5927\u7b49\u5f85\u65f6\u95f4\uff08\u5728\u6b64\u6848\u4f8b\u4e2d\u4e3a portMAX_DELAY\uff0c\u8868\u793a\u65e0\u9650\u7b49\u5f85\uff09\u3002\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("\u5f55\u97f3\u5931\u8d25\uff01\\n");\n    } else {\n      Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n    }\n\n  \n    // \u589e\u52a0\u97f3\u91cf\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // \u5199\u5165\u6570\u636e\u5230 WAV \u6587\u4ef6\n    Serial.printf("Writing to the file ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("Write file Failed!\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("The recording is over.\\n");\n      \n    listDir(SD, "/", 0);\n\n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n    \n    if(uploadStatus)\n      xTaskNotifyGive(chatgpt_handle);\n    vTaskDelay(10000);       // \u6bcf\u6b21\u5f55\u97f3\u95f4\u9694 10 \u79d2\n  }\n//  vTaskDelete(NULL);\n}\n\nvoid wifiConnect(void *pvParameters){\nisWIFIConnected = false;\nSerial.print("\u5c1d\u8bd5\u8fde\u63a5\u5230 ");\nSerial.println(ssid);\nWiFi.begin(ssid, password);\nwhile(WiFi.status() != WL_CONNECTED){\n  vTaskDelay(500);\n  Serial.print(".");\n}\nSerial.println("Wi-Fi \u8fde\u63a5\u6210\u529f\uff01");\nisWIFIConnected = true;\n// \u5ffd\u7565 SSL \u8bc1\u4e66\u9a8c\u8bc1\nclient.setInsecure();\nwhile(true){\n  vTaskDelay(1000);\n}\n}\n\nvoid chatgpt(void *pvParameters){\nwhile(1){\n// \u7b49\u5f85\u6765\u81ea\u4efb\u52a1 1 \u7684\u901a\u77e5\u4fe1\u53f7\nulTaskNotifyTake(pdTRUE, portMAX_DELAY);\n\nString result;\nif (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", chatgpt_Q, result)) {\n  Serial.println("===\u6210\u529f===");\n  Serial.println(result);\n} else {\n  Serial.println("===\u9519\u8bef===");\n  Serial.println(result);\n}\n\n}\n}\n\n//*****************************************\u97f3\u9891\u5904\u7406******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n// \u53c2\u8003\u8d44\u6599\uff1a http://soundfile.sapp.org/doc/WaveFormat/\nuint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\nuint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\nconst uint8_t set_wav_header[] = {\n  \'R\', \'I\', \'F\', \'F\', // ChunkID\n  file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n  \'W\', \'A\', \'V\', \'E\', // Format\n  \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n  0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n  0x01, 0x00, // AudioFormat (1 for PCM)\n  0x01, 0x00, // NumChannels (1 channel)\n  sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n  byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n  0x02, 0x00, // BlockAlign\n  0x10, 0x00, // BitsPerSample (16 bits)\n  \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n  wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n};\nmemcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************\u6587\u4ef6\u5904\u7406******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    String response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    chatgpt_Q = response;\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    return true;\n  }else{\n    Serial.println("Error");\n    return false;\n  }\n  \n}\n'))),(0,r.yg)("p",null,"\u518d\u6b21\u5f3a\u8c03\uff0c\u5728\u4f7f\u7528\u6b64\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u6839\u636e\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi \u7f51\u7edc\u540d\u79f0")," - \u66f4\u6539\u4ee3\u7801\u4e2d\u7684\u7f51\u7edc\u540d\u79f0\uff0c\u4f4d\u4e8e ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L18"},"\u7b2c18\u884c"),"\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u4e0e\u60a8\u90e8\u7f72 Google \u4e91\u670d\u52a1\u7684\u4e3b\u673a\u5728\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\u7684\u7f51\u7edc\u540d\u79f0\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi \u7f51\u7edc\u5bc6\u7801")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL19C40-L19C40"},"\u7b2c19\u884c"),"\uff0c\u66f4\u6539\u5bf9\u5e94\u7f51\u7edc\u7684\u5bc6\u7801\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4e3b\u673a IP \u5730\u5740")," - \u5728\u4ee3\u7801\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL241C7-L241C7"},"\u7b2c241\u884c"),"\uff0c\u60a8\u9700\u8981\u5c06\u8fd9\u91cc\u7684 IP \u5730\u5740\u66f4\u6539\u4e3a\u60a8\u7684\u4e3b\u673a IP \u5730\u5740\uff0c\u5e76\u5c06\u7aef\u53e3\u53f7\u4fdd\u6301\u4e3a 8888\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"OpenAI API Token")," - \u7531\u4e8e\u9700\u8981\u8c03\u7528 ChatGPT \u63a5\u53e3\uff0c\u60a8\u9700\u8981\u51c6\u5907 OpenAI Token\uff0c\u5e76\u5c06\u5176\u586b\u5165\u4ee3\u7801\u4e2d\u7684 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L33"},"\u7b2c33\u884c"),"\u3002\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 Token\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb ",(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/xiaoesp32c3-chatgpt/#submit-questions-via-the-built-in-web-page"},"\u6b64 Wiki \u5185\u5bb9")," \u6765\u4e86\u89e3\u5982\u4f55\u83b7\u53d6\u5b83\u4eec\u3002")),(0,r.yg)("p",null,"\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u4e0a\u4f20\u7a0b\u5e8f\u5e76\u6253\u5f00\u4e32\u53e3\u76d1\u89c6\u5668\u3002\u5f55\u97f3\u5b8c\u6210\u540e\uff0c\u60a8\u5c06\u770b\u5230 ChatGPT \u8fd4\u56de\u7684\u7b54\u6848\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/16.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("h2",{id:"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1--\u7a0b\u5e8f\u96c6\u6210"},"\u5c4f\u5e55\u663e\u793a\u5185\u5bb9\u8bbe\u8ba1 & \u7a0b\u5e8f\u96c6\u6210"),(0,r.yg)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u52a0\u4e86\u4e00\u4e9b\u70ab\u9177\u7684\u6548\u679c\u3002\u6211\u4eec\u4e0d\u518d\u4f7f\u7528\u4e32\u53e3\u76d1\u89c6\u5668\uff0c\u8fd9\u79cd\u754c\u9762\u5bf9\u4e8e\u663e\u793a\u6548\u679c\u4e0d\u592a\u5408\u9002\uff0c\u800c\u662f\u4f7f\u7528\u89e6\u6478\u5c4f\u6765\u5b9e\u73b0\u89e6\u6478\u548c\u70b9\u51fb\u529f\u80fd\u3002"),(0,r.yg)("h3",{id:"\u6b65\u9aa413-\u4f7f\u7528-squareline-studio-\u7ed8\u5236\u663e\u793a\u5c4f"},"\u6b65\u9aa413. \u4f7f\u7528 SquareLine Studio \u7ed8\u5236\u663e\u793a\u5c4f"),(0,r.yg)("p",null,"SquareLine Studio \u662f\u7531 LVGL \u5f00\u53d1\u7684\u56fe\u5f62\u7528\u6237\u754c\u9762\u8bbe\u8ba1\u5de5\u5177\uff0c\u4e13\u4e3a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8bbe\u8ba1\u3002SquareLine Studio \u65e8\u5728\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u9ad8\u6548\u5730\u521b\u5efa\u548c\u8bbe\u8ba1\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u7528\u6237\u754c\u9762\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u62d6\u653e\u754c\u9762\u6765\u8bbe\u8ba1 UI\uff0c\u5e76\u4e14\u652f\u6301\u591a\u79cd\u5c0f\u90e8\u4ef6\u548c\u4e3b\u9898\u3002"),(0,r.yg)("p",null,"\u56e0\u6b64\uff0c\u6211\u4eec\u63a8\u8350\u60a8\u4f7f\u7528\u8be5\u5de5\u5177\u6765\u8bbe\u8ba1\u8fd9\u6837\u7b80\u5355\u7684\u754c\u9762\u3002\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5728 SquareLine Studio \u4e2d\u4f7f\u7528\u5706\u5f62\u663e\u793a\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bbf\u95ee\u6211\u4eec\u7684\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/using_lvgl_and_tft_on_round_display/#drawing-complex-ui-interfaces-with-squareline-studio"},"Wiki"),"\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/21.png",style:{width:1e3,height:"auto"}})),(0,r.yg)("p",null,"\u7531\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u672c\u6587\u4e0d\u518d\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u8bbe\u8ba1\u663e\u793a\u9875\u9762\uff0c\u4f46\u6211\u4eec\u4f1a\u63d0\u4f9b\u5bfc\u51fa\u7684\u7a0b\u5e8f\u4ee3\u7801\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\u5b83\u76ee\u524d\u4f4d\u4e8e\u8be5 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/tree/main/ui"},"\u9879\u76ee\u6587\u4ef6\u5939")," \u4e0b\u7684 ",(0,r.yg)("strong",{parentName:"p"},"ui")," \u6587\u4ef6\u5939\u4e2d\u3002"),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"\u6211\u4eec\u5efa\u8bae\u60a8\u4f7f\u7528 ",(0,r.yg)("strong",{parentName:"p"},"v1.2.3")," \u7248\u672c\u7684 SquareLine Studio\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0cv1.3.0 \u7248\u672c\u4e0e tft_eSPI \u5e93\u53ef\u80fd\u5b58\u5728\u517c\u5bb9\u6027\u95ee\u9898\u3002")),(0,r.yg)("h3",{id:"\u6b65\u9aa414-\u7a0b\u5e8f\u96c6\u6210"},"\u6b65\u9aa414. \u7a0b\u5e8f\u96c6\u6210"),(0,r.yg)("p",null,"\u6700\u7ec8\u7684\u5b8c\u6574\u9879\u76ee\u4ee3\u7801\u4f4d\u4e8e ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("a",{parentName:"strong",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/main/XIAOESP32S3-SPEECH-CHATGPT-COMPLETE/XIAOESP32S3-SPEECH-CHATGPT-COMPLETE.ino"},"XIAOESP32S3-SPEECH-CHATGPT-COMPLETE"))," \u6587\u4ef6\u5939\u4e2d\u3002"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5982\u679c\u60a8\u7684 ESP32 \u7248\u672c\u662f 2.0.x\uff0c\u8bf7\u70b9\u51fb\u6b64\u5904\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <lvgl.h>\n#include <TFT_eSPI.h>\n#include "ui.h"\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include <I2S.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n\n// \u5bfc\u5165\u5706\u5f62\u663e\u793a\u7684\u5e93\uff0c\u5e76\u5b9a\u4e49\u4f5c\u4e3a TFT \u663e\u793a\u6846\u67b6\u7684\u6846\u67b6\n#define USE_TFT_ESPI_LIBRARY\n#include "lv_xiao_round_screen.h"\n\n\n/* \u8bf7\u6839\u636e\u60a8\u7684\u5c4f\u5e55\u5206\u8fa8\u7387\u8fdb\u884c\u4fee\u6539 */\nstatic const uint16_t screenWidth  = 240;\nstatic const uint16_t screenHeight = 240;\n\n\n// \u7528\u4e8e\u5f55\u97f3\u7a0b\u5e8f\u7684\u53d8\u91cf\uff0c\u8bf7\u4e0d\u8981\u66f4\u6539\uff0c\u4ee5\u4fdd\u8bc1\u6700\u4f73\u6548\u679c\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // \u79d2\uff0c\u6700\u5927\u503c\u4e3a 240\n\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\n\n// \u4fdd\u5b58\u5f55\u97f3\u7684\u6587\u4ef6\u540d\u79f0\nFile file;\nconst char filename[] = "/recording.wav";\n\n\n// \u7f51\u7edc\u8fde\u63a5\u72b6\u6001\u6807\u5fd7\nbool isWIFIConnected;\n\n\n// ChatGPT \u56de\u590d\u95ee\u9898\u7684\u7b54\u6848\nString response;\n\n\n// \u4e0d\u540c\u4efb\u52a1\u542f\u52a8\u7684\u6807\u5fd7\nbool recordTask = false;\nbool chatgptTask = false;\n\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");   // \u8bf7\u586b\u5199\u60a8\u7684 OpenAI \u5bc6\u94a5\n\n\n// \u8bf7\u66f4\u6539\u4e3a\u60a8\u7684\u7f51\u7edc\u4fe1\u606f\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\nstatic lv_disp_draw_buf_t draw_buf;\nstatic lv_color_t buf[ screenWidth * screenHeight / 10 ];\n\n\n/****************************************LVGL****************************************************//\n\n#if LV_USE_LOG != 0\n/* \u4e32\u53e3\u8c03\u8bd5 */\nvoid my_print(const char * buf)\n{\n    Serial.printf(buf);\n    Serial.flush();\n}\n#endif\n\n/* \u663e\u793a\u5237\u65b0 */\nvoid my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )\n{\n    uint32_t w = ( area->x2 - area->x1 + 1 );\n    uint32_t h = ( area->y2 - area->y1 + 1 );\n\n    tft.startWrite();\n    tft.setAddrWindow( area->x1, area->y1, w, h );\n    tft.pushColors( ( uint16_t * )&color_p->full, w * h, true );\n    tft.endWrite();\n\n    lv_disp_flush_ready( disp );\n}\n\n/* \u8bfb\u53d6\u89e6\u6478\u677f */\nvoid my_touchpad_read( lv_indev_drv_t * indev_driver, lv_indev_data_t * data )\n{\n    // uint16_t touchX = 0, touchY = 0;\n    // bool touched = false;//tft.getTouch( &touchX, &touchY, 600 );\n\n    lv_coord_t touchX, touchY;\n    chsc6x_get_xy(&touchX, &touchY);\n\n    // if( !touched )\n    if(!chsc6x_is_pressed())\n    {\n        data->state = LV_INDEV_STATE_REL;\n    }\n    else\n    {\n        data->state = LV_INDEV_STATE_PR;\n\n        /* \u8bbe\u7f6e\u5750\u6807 */\n        data->point.x = touchX;\n        data->point.y = touchY;\n\n        //        Serial.print( "\u6570\u636e x " );\n        //        Serial.println( touchX );\n        //\n        //        Serial.print( "\u6570\u636e y " );\n        //        Serial.println( touchY );\n\n        // \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u53d6\u6d88\u6ce8\u91ca\u5e76\u5728\u70b9\u51fb\u5fbd\u6807\u65f6\u914d\u7f6e\u6765\u5f00\u59cb\u5f55\u97f3\n//        if((touchX < 240 && touchX > 230) && (touchY < 120 && touchY > 100)){\n          recordTask = true;\n//        }\n    }\n}\n\n//****************************************Arduino \u57fa\u7840\u8bbe\u7f6e****************************************************//\n\nvoid setup()\n{\n    Serial.begin( 115200 ); /* \u4e3a\u53ef\u80fd\u7684\u4e32\u53e3\u8c03\u8bd5\u505a\u51c6\u5907 */\n    //    while(!Serial);\n\n    pinMode(TOUCH_INT, INPUT_PULLUP);\n    Wire.begin();\n\n    String LVGL_Arduino = "Hello Arduino! ";\n    LVGL_Arduino += String(\'V\') + lv_version_major() + "." + lv_version_minor() + "." + lv_version_patch();\n\n    Serial.println( LVGL_Arduino );\n    Serial.println( "\u6211\u662f LVGL_Arduino" );\n\n    lv_init();\n\n#if LV_USE_LOG != 0\n    lv_log_register_print_cb( my_print ); /* \u6ce8\u518c\u8c03\u8bd5\u7528\u7684\u6253\u5370\u51fd\u6570 */\n#endif\n\n    tft.begin();          /* TFT \u521d\u59cb\u5316 */\n    tft.setRotation( 0 ); /* \u6a2a\u5c4f\u65b9\u5411\uff0c\u7ffb\u8f6c */\n\n    lv_disp_draw_buf_init( &draw_buf, buf, NULL, screenWidth * screenHeight / 10 );\n\n    /* \u521d\u59cb\u5316\u663e\u793a */\n    static lv_disp_drv_t disp_drv;\n    lv_disp_drv_init( &disp_drv );\n    /* \u66f4\u6539\u4ee5\u4e0b\u884c\u4ee5\u5339\u914d\u60a8\u7684\u663e\u793a\u5206\u8fa8\u7387 */\n    disp_drv.hor_res = screenWidth;\n    disp_drv.ver_res = screenHeight;\n    disp_drv.flush_cb = my_disp_flush;\n    disp_drv.draw_buf = &draw_buf;\n    lv_disp_drv_register( &disp_drv );\n\n    /* \u521d\u59cb\u5316\uff08\u865a\u62df\uff09\u8f93\u5165\u8bbe\u5907\u9a71\u52a8 */\n    static lv_indev_drv_t indev_drv;\n    lv_indev_drv_init( &indev_drv );\n    indev_drv.type = LV_INDEV_TYPE_POINTER;\n    indev_drv.read_cb = my_touchpad_read;\n    lv_indev_drv_register( &indev_drv );\n\n    ui_init();\n\n    I2S.setAllPins(-1, 42, 41, -1, -1);\n  \n    // \u4f20\u8f93\u6a21\u5f0f\u662f PDM_MONO_MODE\uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528 PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n    if (!I2S.begin(PDM_MONO_MODE, SAMPLE_RATE, SAMPLE_BITS)) {\n        Serial.println("I2S \u521d\u59cb\u5316\u5931\u8d25\uff01");\n        while (1) ;\n    }\n\n    if(!SD.begin(D2)){\n        Serial.println("SD \u5361\u6302\u8f7d\u5931\u8d25\uff01");\n        while (1) ;\n    }\n\n    Serial.println( "\u8bbe\u7f6e\u5b8c\u6210" );\n\n    // \u521b\u5efa\u4e00\u4e2a FreeRTOS \u4efb\u52a1\uff0c\u5b9a\u671f\u68c0\u67e5\u7f51\u7edc\u7684\u8fde\u63a5\u72b6\u6001\u3002\n    xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\n// void loop()\n{\n    lv_timer_handler(); /* \u8ba9GUI\u505a\u5b83\u7684\u5de5\u4f5c */\n    record();\n    chatgpt();\n    delay(5);\n}\n\n//*****************************************\u97f3\u9891\u5904\u7406******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // \u53c2\u8003\u8d44\u6599\uff1ahttp://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // Format\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size (16 for PCM)\n    0x01, 0x00, // AudioFormat (1 for PCM)\n    0x01, 0x00, // NumChannels (1 channel)\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample (16\u4f4d)\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************\u6587\u4ef6\u5904\u7406******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    const char* chatgpt_Q = response.c_str();\n    lv_label_set_text(ui_question, chatgpt_Q);\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    recordTask = false;\n    chatgptTask = true;\n    return true;\n  }else{\n    Serial.println("Error");\n    lv_label_set_text(ui_question, "Error");\n    recordTask = false;\n    chatgptTask = false;\n    return false;\n  }\n}\n\n\n//*****************************************\u4e3b\u529f\u80fd******************************************//\n\nvoid record(){\n  if(recordTask){\n    Serial.println("\u5f55\u97f3\u4efb\u52a1\u5f00\u59cb!!!");\n    lv_label_set_text(ui_question, "\u6b63\u5728\u5f55\u97f3 ...");\n    lv_timer_handler();\n    uint32_t sample_size = 0;\n    \n    // \u8fd9\u4e2a\u53d8\u91cf\u5c06\u7528\u4e8e\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // \u5c06\u5934\u4fe1\u606f\u5199\u5165WAV\u6587\u4ef6\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // \u5c06WAV\u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165wav_header\u6570\u7ec4\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // \u8c03\u7528file.write()\u51fd\u6570\u5c06wav_header\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684WAV\u6587\u4ef6\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528ESP32\u7684PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u7528\u4e8e\u5b58\u50a8\u5f55\u97f3\u6570\u636e\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("malloc\u5931\u8d25!\\n");\n      while(1) ;\n    }\n    Serial.printf("\u7f13\u51b2\u533a: %d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // \u5f00\u59cb\u5f55\u97f3\n    // I2S\u7aef\u53e3\u53f7\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662fI2S_NUM_0\uff09\uff0c\n    // \u4e00\u4e2a\u6307\u5411\u5b58\u50a8\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373rec_buffer\uff09\uff0c\n    // \u8981\u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff08\u5373record_size\uff09\uff0c\n    // \u4e00\u4e2a\u6307\u5411\u5b9e\u9645\u8bfb\u53d6\u6570\u636e\u5927\u5c0f\u7684\u53d8\u91cf\u7684\u6307\u9488\uff08\u5373&sample_size\uff09\uff0c\n    // \u4ee5\u53ca\u7b49\u5f85\u6570\u636e\u8bfb\u53d6\u7684\u6700\u5927\u65f6\u95f4\uff08\u5728\u8fd9\u91ccportMAX_DELAY\u8868\u793a\u65e0\u9650\u7b49\u5f85\uff09\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("\u5f55\u97f3\u5931\u8d25!\\n");\n    } else {\n      Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n    }\n  \n    // \u63d0\u5347\u97f3\u91cf\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // \u5c06\u6570\u636e\u5199\u5165WAV\u6587\u4ef6\n    Serial.printf("\u5199\u5165\u6587\u4ef6\u4e2d ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("\u5199\u5165\u6587\u4ef6\u5931\u8d25!\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("\u5f55\u97f3\u7ed3\u675f.\\n");\n    lv_label_set_text(ui_question, "\u6b63\u5728\u8bc6\u522b ...");\n    lv_timer_handler();\n    listDir(SD, "/", 0);\n  \n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n  }\n}\n\nvoid chatgpt(){\n  if(chatgptTask){\n    Serial.println("ChatGPT Task Begin!!!");\n    lv_label_set_text(ui_answer,"Answering ...");\n    lv_timer_handler();\n    String result;\n    if (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", response, result)) {\n      Serial.println("===OK===");\n      Serial.println(result);\n      const char* chatgpt_A = result.c_str();\n      lv_label_set_text(ui_answer, chatgpt_A);\n    } else {\n      Serial.println("===ERROR===");\n      Serial.println(result);\n      lv_label_set_text(ui_answer, "ERROR");\n      lv_timer_handler();\n    }\n    recordTask = false;\n    chatgptTask = false;\n  }\n}\n\n//*****************************************RTOS******************************************// \n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  Serial.print("\u5c1d\u8bd5\u8fde\u63a5\u5230 ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi \u5df2\u8fde\u63a5!");\n  isWIFIConnected = true;\n  // \u5ffd\u7565SSL\u8bc1\u4e66\u9a8c\u8bc1\n  client.setInsecure();\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u5982\u679c\u4f60\u7684 ESP32 \u7248\u672c\u662f 3.0.x\uff0c\u70b9\u51fb\u8fd9\u91cc\u9884\u89c8\u5b8c\u6574\u7a0b\u5e8f"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <lvgl.h>\n#include <TFT_eSPI.h>\n#include "ui.h"\n#include <WiFi.h>\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include <ChatGPT.hpp>\n#include <ESP_I2S.h>\n#include <HTTPClient.h>\n#include "FS.h"\n#include "SD.h"\n#include "SPI.h"\n\n\n// \u5bfc\u5165\u5706\u5f62\u663e\u793a\u5c4f\u7684\u5e93\uff0c\u5e76\u5b9a\u4e49\u7528\u4f5cTFT\u663e\u793a\u6846\u67b6\u7684\u6846\u67b6\n#define USE_TFT_ESPI_LIBRARY\n#include "lv_xiao_round_screen.h"\n\n\n/* \u4fee\u6539\u4e3a\u4f60\u7684\u5c4f\u5e55\u5206\u8fa8\u7387 */\nstatic const uint16_t screenWidth  = 240;\nstatic const uint16_t screenHeight = 240;\n\n\n// \u7528\u4e8e\u5f55\u97f3\u7a0b\u5e8f\u7684\u53d8\u91cf\uff0c\u6700\u597d\u4e0d\u8981\u66f4\u6539\n#define SAMPLE_RATE 16000U\n#define SAMPLE_BITS 16\n#define WAV_HEADER_SIZE 44\n#define VOLUME_GAIN 2\n#define RECORD_TIME 5  // \u79d2\uff0c\u6700\u5927\u503c\u4e3a240\n\n\n// \u5f55\u97f3\u7f13\u51b2\u533a\u6240\u9700\u7684\u5b57\u8282\u6570\nuint32_t record_size = (SAMPLE_RATE * SAMPLE_BITS / 8) * RECORD_TIME;\n\n// \u5b9a\u4e49I2S\nI2SClass I2S;\n\n// \u5f55\u97f3\u4fdd\u5b58\u7684\u6587\u4ef6\u540d\nFile file;\nconst char filename[] = "/recording.wav";\n\n\n// \u7f51\u7edc\u8fde\u63a5\u72b6\u6001\u6807\u5fd7\nbool isWIFIConnected;\n\n\n// ChatGPT\u56de\u590d\u7684\u95ee\u9898\u7b54\u6848\nString response;\n\n\n// \u4e0d\u540c\u4efb\u52a1\u5f00\u59cb\u7684\u6807\u5fd7\nbool recordTask = false;\nbool chatgptTask = false;\n\nWiFiClientSecure client;\nChatGPT<WiFiClientSecure> chat_gpt(&client, "v1", "OpenAI-TOKEN");   // \u8bf7\u586b\u5199\u4f60\u7684 OpenAI \u5bc6\u94a5\n\n\n// \u8bf7\u4fee\u6539\u4e3a\u4f60\u7684\u7f51\u7edc\u4fe1\u606f\nconst char* ssid = "wifi-ssid";\nconst char* password = "wifi-password";\n\nstatic lv_disp_draw_buf_t draw_buf;\nstatic lv_color_t buf[ screenWidth * screenHeight / 10 ];\n\n\n //****************************************LVGL****************************************************//\n\n#if LV_USE_LOG != 0\n/* \u4e32\u53e3\u8c03\u8bd5 */\nvoid my_print(const char * buf)\n{\n    Serial.printf(buf);\n    Serial.flush();\n}\n#endif\n\n/* \u663e\u793a\u5237\u65b0 */\nvoid my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )\n{\n    uint32_t w = ( area->x2 - area->x1 + 1 );\n    uint32_t h = ( area->y2 - area->y1 + 1 );\n\n    tft.startWrite();\n    tft.setAddrWindow( area->x1, area->y1, w, h );\n    tft.pushColors( ( uint16_t * )&color_p->full, w * h, true );\n    tft.endWrite();\n\n    lv_disp_flush_ready( disp );\n}\n\n/* \u8bfb\u53d6\u89e6\u6478\u677f */\nvoid my_touchpad_read( lv_indev_drv_t * indev_driver, lv_indev_data_t * data )\n{\n    // uint16_t touchX = 0, touchY = 0;\n    // bool touched = false;//tft.getTouch( &touchX, &touchY, 600 );\n\n    lv_coord_t touchX, touchY;\n    chsc6x_get_xy(&touchX, &touchY);\n\n    // \u5982\u679c\u6ca1\u6709\u89e6\u6478\n    if(!chsc6x_is_pressed())\n    {\n        data->state = LV_INDEV_STATE_REL;\n    }\n    else\n    {\n        data->state = LV_INDEV_STATE_PR;\n\n        /* \u8bbe\u7f6e\u5750\u6807 */\n        data->point.x = touchX;\n        data->point.y = touchY;\n\n        // \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53d6\u6d88\u6ce8\u91ca\u5e76\u5728\u70b9\u51fb logo \u65f6\u914d\u7f6e\u6765\u542f\u52a8\u5f55\u97f3\n//        if((touchX < 240 && touchX > 230) && (touchY < 120 && touchY > 100)){\n          recordTask = true;\n//        }\n    }\n}\n\n//**************************************** Arduino \u57fa\u7840 ****************************************************//\n\nvoid setup()\n{\n    Serial.begin( 115200 ); /* \u4e3a\u53ef\u80fd\u7684\u4e32\u53e3\u8c03\u8bd5\u505a\u51c6\u5907 */\n    // while(!Serial);\n\n    pinMode(TOUCH_INT, INPUT_PULLUP);\n    Wire.begin();\n\n    String LVGL_Arduino = "Hello Arduino! ";\n    LVGL_Arduino += String(\'V\') + lv_version_major() + "." + lv_version_minor() + "." + lv_version_patch();\n\n    Serial.println( LVGL_Arduino );\n    Serial.println( "\u6211\u662f LVGL_Arduino" );\n\n    lv_init();\n\n#if LV_USE_LOG != 0\n    lv_log_register_print_cb( my_print ); /* \u6ce8\u518c\u6253\u5370\u51fd\u6570\u4ee5\u8fdb\u884c\u8c03\u8bd5 */\n#endif\n\n    tft.begin();          /* TFT \u521d\u59cb\u5316 */\n    tft.setRotation( 0 ); /* \u6a2a\u5c4f\u6a21\u5f0f\uff0c\u7ffb\u8f6c\u663e\u793a */\n\n    lv_disp_draw_buf_init( &draw_buf, buf, NULL, screenWidth * screenHeight / 10 );\n\n    /* \u521d\u59cb\u5316\u663e\u793a */\n    static lv_disp_drv_t disp_drv;\n    lv_disp_drv_init( &disp_drv );\n    /* \u4fee\u6539\u4e3a\u4f60\u7684\u5c4f\u5e55\u5206\u8fa8\u7387 */\n    disp_drv.hor_res = screenWidth;\n    disp_drv.ver_res = screenHeight;\n    disp_drv.flush_cb = my_disp_flush;\n    disp_drv.draw_buf = &draw_buf;\n    lv_disp_drv_register( &disp_drv );\n\n    /* \u521d\u59cb\u5316\uff08\u865a\u62df\uff09\u8f93\u5165\u8bbe\u5907\u9a71\u52a8 */\n    static lv_indev_drv_t indev_drv;\n    lv_indev_drv_init( &indev_drv );\n    indev_drv.type = LV_INDEV_TYPE_POINTER;\n    indev_drv.read_cb = my_touchpad_read;\n    lv_indev_drv_register( &indev_drv );\n\n    ui_init();\n\n    // \u8bbe\u7f6e 42 \u53f7 PDM \u65f6\u949f\u548c 41 \u53f7 PDM \u6570\u636e\u5f15\u811a\n    I2S.setPinsPdmRx(42, 41);  \n\n    // \u4f20\u8f93\u6a21\u5f0f\u4e3a PDM_MONO_MODE\uff0c\u610f\u5473\u7740\u4f7f\u7528 PDM\uff08\u8109\u51b2\u5bc6\u5ea6\u8c03\u5236\uff09\u5355\u58f0\u9053\u6a21\u5f0f\u8fdb\u884c\u4f20\u8f93\n    if (!I2S.begin(I2S_MODE_PDM_RX, 16000, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_MONO)) {\n        Serial.println("\u521d\u59cb\u5316 I2S \u5931\u8d25\uff01");\n        while (1) ;\n    }\n\n    if(!SD.begin(D2)){\n        Serial.println("SD \u5361\u6302\u8f7d\u5931\u8d25\uff01");\n        while (1) ;\n    }\n\n    Serial.println( "\u8bbe\u7f6e\u5b8c\u6210" );\n\n    // \u521b\u5efa\u4e00\u4e2a FreeRTOS \u4efb\u52a1\uff0c\u7528\u4e8e\u5b9a\u671f\u68c0\u67e5\u7f51\u7edc\u8fde\u63a5\u72b6\u6001\n    xTaskCreate(wifiConnect, "wifi_Connect", 4096, NULL, 0, NULL);\n}\n\nvoid loop()\n{\n    lv_timer_handler(); /* \u8ba9 GUI \u6267\u884c\u5b83\u7684\u5de5\u4f5c */\n    record();\n    chatgpt();\n    delay(5);\n}\n\n//*****************************************\u97f3\u9891\u5904\u7406******************************************//\n\nvoid generate_wav_header(uint8_t *wav_header, uint32_t wav_size, uint32_t sample_rate)\n{\n  // \u53c2\u8003\u6587\u6863\uff1ahttp://soundfile.sapp.org/doc/WaveFormat/\n  uint32_t file_size = wav_size + WAV_HEADER_SIZE - 8;\n  uint32_t byte_rate = SAMPLE_RATE * SAMPLE_BITS / 8;\n  const uint8_t set_wav_header[] = {\n    \'R\', \'I\', \'F\', \'F\', // ChunkID\n    file_size, file_size >> 8, file_size >> 16, file_size >> 24, // ChunkSize\n    \'W\', \'A\', \'V\', \'E\', // \u683c\u5f0f\n    \'f\', \'m\', \'t\', \' \', // Subchunk1ID\n    0x10, 0x00, 0x00, 0x00, // Subchunk1Size\uff08PCM\u683c\u5f0f\u4e3a16\uff09\n    0x01, 0x00, // AudioFormat\uff08PCM\u4e3a1\uff09\n    0x01, 0x00, // NumChannels\uff081\u4e2a\u58f0\u9053\uff09\n    sample_rate, sample_rate >> 8, sample_rate >> 16, sample_rate >> 24, // SampleRate\n    byte_rate, byte_rate >> 8, byte_rate >> 16, byte_rate >> 24, // ByteRate\n    0x02, 0x00, // BlockAlign\n    0x10, 0x00, // BitsPerSample\uff0816\u4f4d\uff09\n    \'d\', \'a\', \'t\', \'a\', // Subchunk2ID\n    wav_size, wav_size >> 8, wav_size >> 16, wav_size >> 24, // Subchunk2Size\n  };\n  memcpy(wav_header, set_wav_header, sizeof(set_wav_header));\n}\n\n//*****************************************\u6587\u4ef6\u5904\u7406******************************************//\n\nvoid listDir(fs::FS &fs, const char * dirname, uint8_t levels){\n    Serial.printf("Listing directory: %s\\n", dirname);\n\n    File root = fs.open(dirname);\n    if(!root){\n        Serial.println("Failed to open directory");\n        return;\n    }\n    if(!root.isDirectory()){\n        Serial.println("Not a directory");\n        return;\n    }\n\n    File file = root.openNextFile();\n    while(file){\n        if(file.isDirectory()){\n            Serial.print("  DIR : ");\n            Serial.println(file.name());\n            if(levels){\n                listDir(fs, file.path(), levels -1);\n            }\n        } else {\n            Serial.print("  FILE: ");\n            Serial.print(file.name());\n            Serial.print("  SIZE: ");\n            Serial.println(file.size());\n        }\n        file = root.openNextFile();\n    }\n}\n\nbool uploadFile(){\n  file = SD.open(filename, FILE_READ);\n  if(!file){\n    Serial.println("FILE IS NOT AVAILABLE!");\n    return false;\n  }\n\n  Serial.println("===> Upload FILE to Node.js Server");\n\n  HTTPClient client;\n  client.begin("http://192.168.1.208:8888/uploadAudio");\n  client.addHeader("Content-Type", "audio/wav");\n  int httpResponseCode = client.sendRequest("POST", &file, file.size());\n  Serial.print("httpResponseCode : ");\n  Serial.println(httpResponseCode);\n\n  if(httpResponseCode == 200){\n    response = client.getString();\n    Serial.println("==================== Transcription ====================");\n    Serial.println(response);\n    const char* chatgpt_Q = response.c_str();\n    lv_label_set_text(ui_question, chatgpt_Q);\n    Serial.println("====================      End      ====================");\n    file.close();\n    client.end();\n    recordTask = false;\n    chatgptTask = true;\n    return true;\n  }else{\n    Serial.println("Error");\n    lv_label_set_text(ui_question, "Error");\n    recordTask = false;\n    chatgptTask = false;\n    return false;\n  }\n}\n\n\n//*****************************************\u4e3b\u529f\u80fd******************************************//\n\nvoid record(){\n  if(recordTask){\n    Serial.println("\u5f55\u97f3\u4efb\u52a1\u5f00\u59cb!!!");\n    lv_label_set_text(ui_question, "\u6b63\u5728\u5f55\u97f3 ...");\n    lv_timer_handler();\n    uint32_t sample_size = 0;\n    \n    // \u8fd9\u4e2a\u53d8\u91cf\u5c06\u7528\u4e8e\u6307\u5411\u5b9e\u9645\u7684\u5f55\u97f3\u7f13\u51b2\u533a\n    uint8_t *rec_buffer = NULL;\n    Serial.printf("\u51c6\u5907\u5f00\u59cb\u5f55\u97f3 ...\\n");\n  \n    File file = SD.open(filename, FILE_WRITE);\n  \n    // \u5c06\u5934\u4fe1\u606f\u5199\u5165WAV\u6587\u4ef6\n    uint8_t wav_header[WAV_HEADER_SIZE];\n  \n    // \u5c06WAV\u6587\u4ef6\u5934\u4fe1\u606f\u5199\u5165wav_header\u6570\u7ec4\n    generate_wav_header(wav_header, record_size, SAMPLE_RATE);\n  \n    // \u8c03\u7528file.write()\u51fd\u6570\u5c06wav_header\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u5199\u5165\u65b0\u521b\u5efa\u7684WAV\u6587\u4ef6\n    file.write(wav_header, WAV_HEADER_SIZE);\n  \n    // \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528ESP32\u7684PSRAM\uff08\u5916\u90e8\u7f13\u5b58\u5185\u5b58\uff09\u52a8\u6001\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u5f55\u97f3\u6570\u636e\u3002\n    rec_buffer = (uint8_t *)ps_malloc(record_size);\n    if (rec_buffer == NULL) {\n      Serial.printf("malloc\u5931\u8d25!\\n");\n      while(1) ;\n    }\n    Serial.printf("\u7f13\u51b2\u533a: %d \u5b57\u8282\\n", ESP.getPsramSize() - ESP.getFreePsram());\n  \n    // \u5f00\u59cb\u5f55\u97f3\n    // I2S\u7aef\u53e3\u53f7\uff08\u5728\u6b64\u4e3aI2S_NUM_0\uff09\uff0c\n    // \u4e00\u4e2a\u6307\u5411\u6570\u636e\u5c06\u8981\u5199\u5165\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\uff08\u5373rec_buffer\uff09\uff0c\n    // \u8981\u8bfb\u53d6\u7684\u6570\u636e\u5927\u5c0f\uff08\u5373record_size\uff09\uff0c\n    // \u4e00\u4e2a\u6307\u5411\u6307\u5411\u5b9e\u9645\u8bfb\u53d6\u6570\u636e\u5927\u5c0f\u7684\u53d8\u91cf\u7684\u6307\u9488\uff08\u5373&sample_size\uff09\uff0c\n    // \u4ee5\u53ca\u7b49\u5f85\u6570\u636e\u8bfb\u53d6\u7684\u6700\u5927\u65f6\u95f4\uff08\u5728\u6b64\u4e3aportMAX_DELAY\uff0c\u8868\u793a\u65e0\u9650\u7b49\u5f85\u65f6\u95f4\uff09\u3002\n    esp_i2s::i2s_read(esp_i2s::I2S_NUM_0, rec_buffer, record_size, &sample_size, portMAX_DELAY);\n    if (sample_size == 0) {\n      Serial.printf("\u5f55\u97f3\u5931\u8d25!\\n");\n    } else {\n      Serial.printf("\u5f55\u97f3 %d \u5b57\u8282\\n", sample_size);\n    }\n  \n    // \u589e\u52a0\u97f3\u91cf\n    for (uint32_t i = 0; i < sample_size; i += SAMPLE_BITS/8) {\n      (*(uint16_t *)(rec_buffer+i)) <<= VOLUME_GAIN;\n    }\n  \n    // \u5c06\u6570\u636e\u5199\u5165WAV\u6587\u4ef6\n    Serial.printf("\u6b63\u5728\u5199\u5165\u6587\u4ef6 ...\\n");\n    if (file.write(rec_buffer, record_size) != record_size)\n      Serial.printf("\u5199\u5165\u6587\u4ef6\u5931\u8d25!\\n");\n  \n    free(rec_buffer);\n    rec_buffer = NULL;\n    file.close();\n    Serial.printf("\u5f55\u97f3\u7ed3\u675f\u3002\\n");\n    lv_label_set_text(ui_question, "\u6b63\u5728\u8bc6\u522b ...");\n    lv_timer_handler();\n    listDir(SD, "/", 0);\n  \n    bool uploadStatus = false;\n  \n    if(isWIFIConnected){\n      uploadStatus = uploadFile();\n    }\n  }\n}\n\nvoid chatgpt(){\n  if(chatgptTask){\n    Serial.println("ChatGPT Task Begin!!!");\n    lv_label_set_text(ui_answer,"Answering ...");\n    lv_timer_handler();\n    String result;\n    if (chat_gpt.simple_message("gpt-3.5-turbo-0301", "user", response, result)) {\n      Serial.println("===OK===");\n      Serial.println(result);\n      const char* chatgpt_A = result.c_str();\n      lv_label_set_text(ui_answer, chatgpt_A);\n    } else {\n      Serial.println("===ERROR===");\n      Serial.println(result);\n      lv_label_set_text(ui_answer, "ERROR");\n      lv_timer_handler();\n    }\n    recordTask = false;\n    chatgptTask = false;\n  }\n}\n\n//*****************************************RTOS******************************************//\n\nvoid wifiConnect(void *pvParameters){\n  isWIFIConnected = false;\n  Serial.print("\u5c1d\u8bd5\u8fde\u63a5\u5230 ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while(WiFi.status() != WL_CONNECTED){\n    vTaskDelay(500);\n    Serial.print(".");\n  }\n  Serial.println("Wi-Fi \u8fde\u63a5\u6210\u529f!");\n  isWIFIConnected = true;\n  // \u5ffd\u7565SSL\u8bc1\u4e66\u9a8c\u8bc1\n  client.setInsecure();\n  while(true){\n    vTaskDelay(1000);\n  }\n}\n'))),(0,r.yg)("p",null,"\u5728\u7f16\u8bd1\u548c\u4e0a\u4f20\u793a\u4f8b\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u66f4\u6539\u4ee5\u4e0b\u51e0\u4e2a\u8bbe\u7f6e\u4ee5\u9002\u5e94\u60a8\u7684\u60c5\u51b5\u3002"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi\u7f51\u7edc\u540d\u79f0")," - \u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L18"},"\u7b2c18\u884c"),"\uff0c\u5c06\u7f51\u7edc\u540d\u79f0\u66f4\u6539\u4e3a\u4e0e\u60a8\u90e8\u7f72Google Cloud\u670d\u52a1\u7684\u4e3b\u673a\u4f4d\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u4e2d\u7684\u7f51\u7edc\u540d\u79f0\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"WiFi\u7f51\u7edc\u5bc6\u7801")," - \u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL19C40-L19C40"},"\u7b2c19\u884c"),"\uff0c\u5c06\u5bc6\u7801\u66f4\u6539\u4e3a\u4e0e\u7f51\u7edc\u5bf9\u5e94\u7684\u5bc6\u7801\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"\u4e3b\u673aIP\u5730\u5740")," - \u5728\u4ee3\u7801\u7684",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#LL241C7-L241C7"},"\u7b2c241\u884c"),"\uff0c\u60a8\u9700\u8981\u5c06\u6b64\u5904\u7684IP\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u7684\u4e3b\u673aIP\u5730\u5740\uff0c\u5e76\u5c06\u7aef\u53e3\u53f7\u4fdd\u6301\u4e3a8888\u3002"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"OpenAI API Token")," - \u7531\u4e8e\u60a8\u9700\u8981\u8c03\u7528ChatGPT\u63a5\u53e3\uff0c\u60a8\u9700\u8981\u51c6\u5907OpenAI Token\u5e76\u5c06\u5176\u586b\u5165\u4ee3\u7801\u4e2d\u7684",(0,r.yg)("a",{parentName:"li",href:"https://github.com/limengdu/XIAO-ESP32S3Sense-Speech2ChatGPT/blob/404007a16f42495576d729848d00c6bb6a8149fc/XIAOESP32S3-SPEECH-TO-CHATGPT/XIAOESP32S3-SPEECH-TO-CHATGPT.ino#L33"},"\u7b2c33\u884c"),"\u3002\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528Token\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb",(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/xiaoesp32c3-chatgpt/#submit-questions-via-the-built-in-web-page"},"\u8fd9\u4e2aWiki\u5185\u5bb9"),"\u6765\u4e86\u89e3\u5982\u4f55\u83b7\u53d6\u5b83\u4eec\u3002")),(0,r.yg)("p",null,"\u4e00\u65e6\u60a8\u4e0a\u4f20\u4e86\u7a0b\u5e8f\u5e76\u70b9\u51fb\u5c4f\u5e55\uff0c\u5f55\u97f3\u4efb\u52a1\u5c06\u5f00\u59cb\uff0c\u6b64\u65f6\u60a8\u53ef\u4ee5\u5bf9\u7740\u9ea6\u514b\u98ce\u8bf4\u51fa\u60a8\u60f3\u8981\u63d0\u95ee\u7684\u95ee\u9898\u3002\u4e00\u65e6\u8bc6\u522b\u51fa\u7ed3\u679c\uff0c\u95ee\u9898\u5c06\u663e\u793a\u5728\u5c4f\u5e55\u7684\u4e0a\u534a\u90e8\u5206\u3002\u968f\u5373\uff0c\u6211\u4eec\u5c06\u83b7\u5f97ChatGPT\u7684\u7b54\u6848\uff0c\u5e76\u5c06\u5176\u663e\u793a\u5728\u5c4f\u5e55\u7684\u4e0b\u534a\u90e8\u5206\u3002"),(0,r.yg)("div",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiaoesp32s3sense-speech2chatgpt/22.jpg",style:{width:600,height:"auto"}})),(0,r.yg)("h2",{id:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba"},"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba"),(0,r.yg)("p",null,"\u611f\u8c22\u60a8\u9009\u62e9\u6211\u4eec\u7684\u4ea7\u54c1\uff01\u6211\u4eec\u5c06\u4e3a\u60a8\u63d0\u4f9b\u5404\u79cd\u652f\u6301\uff0c\u4ee5\u786e\u4fdd\u60a8\u4f7f\u7528\u6211\u4eec\u7684\u4ea7\u54c1\u65f6\u4f53\u9a8c\u987a\u7545\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u591a\u4e2a\u6c9f\u901a\u6e20\u9053\uff0c\u4ee5\u9002\u5e94\u4e0d\u540c\u7684\u9700\u6c42\u548c\u504f\u597d\u3002"),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,r.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,r.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}S.isMDXComponent=!0}}]);