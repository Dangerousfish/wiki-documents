"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[97753],{15680:(e,n,i)=>{i.d(n,{xA:()=>c,yg:()=>m});var t=i(96540);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},c=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=d(i),u=a,m=g["".concat(s,".").concat(u)]||g[u]||p[u]||r;return i?t.createElement(m,l(l({ref:n},c),{},{components:i})):t.createElement(m,l({ref:n},c))}));function m(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[g]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=i[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},41130:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=i(9668),a=(i(96540),i(15680));const r={title:"Seeed Studio XIAO MG24 Sense built-in Sensor",description:"This article describes how to use the Microphone on the XIAO MG24 Sense.",image:"https://files.seeedstudio.com/wiki/mg24_mic/mg24.jpg",slug:"/xiao_mg24_sense_built_in_sensor",keywords:["XIAO","MG24"],last_update:{date:"11/20/2024",author:"Jason"},sidebar_position:3},l="Usage of Seeed Studio XIAO MG24 Sense built-in Sensor",o={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_MG24/XIAO-MG24-Built-in-Sensor",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_MG24/XIAO-MG24-Built-in-Sensor",title:"Seeed Studio XIAO MG24 Sense built-in Sensor",description:"This article describes how to use the Microphone on the XIAO MG24 Sense.",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_MG24/XIAO-MG24-Built-in-Sensor.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_MG24",slug:"/xiao_mg24_sense_built_in_sensor",permalink:"/xiao_mg24_sense_built_in_sensor",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_MG24/XIAO-MG24-Built-in-Sensor.md",tags:[],version:"current",lastUpdatedBy:"Jason",lastUpdatedAt:1732060800,formattedLastUpdatedAt:"Nov 20, 2024",sidebarPosition:3,frontMatter:{title:"Seeed Studio XIAO MG24 Sense built-in Sensor",description:"This article describes how to use the Microphone on the XIAO MG24 Sense.",image:"https://files.seeedstudio.com/wiki/mg24_mic/mg24.jpg",slug:"/xiao_mg24_sense_built_in_sensor",keywords:["XIAO","MG24"],last_update:{date:"11/20/2024",author:"Jason"},sidebar_position:3},sidebar:"ProductSidebar",previous:{title:"Seeed Studio XIAO MG24 Example - Matter",permalink:"/xiao_mg24_matter"},next:{title:"Getting Started with Seeed Studio XIAO RP2040",permalink:"/XIAO-RP2040"}},s={},d=[{value:"XIAO MG24 Sense IMU",id:"xiao-mg24-sense-imu",level:2},{value:"Overview of Built-in Sensors",id:"overview-of-built-in-sensors",level:3},{value:"Software Preparation",id:"software-preparation",level:3},{value:"Code Implementation",id:"code-implementation",level:3},{value:"Function Overview",id:"function-overview",level:3},{value:"Results Chart",id:"results-chart",level:3},{value:"Greater",id:"greater",level:3},{value:"XIAO MG24 Sense Microphone",id:"xiao-mg24-sense-microphone",level:2},{value:"Overview of Built-in Sensors",id:"overview-of-built-in-sensors-1",level:3},{value:"Software Preparation",id:"software-preparation-1",level:3},{value:"Code Implementation",id:"code-implementation-1",level:3},{value:"Function Overview",id:"function-overview-1",level:3},{value:"Results Chart",id:"results-chart-1",level:3},{value:"Greater",id:"greater-1",level:3},{value:"Resources",id:"resources",level:2},{value:"For Seeed Studio XIAO MG24 Sense",id:"for-seeed-studio-xiao-mg24-sense",level:3},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],c={toc:d},g="wrapper";function p(e){let{components:n,...i}=e;return(0,a.yg)(g,(0,t.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"usage-of-seeed-studio-xiao-mg24-sense-built-in-sensor"},"Usage of Seeed Studio XIAO MG24 Sense built-in Sensor"),(0,a.yg)("h2",{id:"xiao-mg24-sense-imu"},"XIAO MG24 Sense IMU"),(0,a.yg)("h3",{id:"overview-of-built-in-sensors"},"Overview of Built-in Sensors"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"6-Axis IMU (Inertial Measurement Unit)")," Sensors like the ",(0,a.yg)("strong",{parentName:"p"},"LSM6DS3TR-C")," integrate accelerometers and gyroscopes to measure the motion and orientation of an object in three-dimensional space. Specifically, the LSM6DS3TR-C has the following features:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Accelerometer function:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Measures the acceleration of an object along the X, Y, and Z axes. It is able to sense object motion (e.g., rest, acceleration, deceleration) and tilt changes (e.g., angle of the object)."),(0,a.yg)("li",{parentName:"ul"},"It can be used to detect gait, position changes, vibrations, etc.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/xyz1.5.jpg",style:{width:320,height:"auto"}})),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Gyroscope function (Gyroscope):")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Measures the angular velocity of an object around the X, Y, and Z axes, i.e., the rotation of the object."),(0,a.yg)("li",{parentName:"ul"},"Can be used to detect rotation, rate of rotation, and change in direction.")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/xyz2.0.jpg",style:{width:320,height:"auto"}})),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("strong",{parentName:"li"},"X-axis angle ( Roll )")," is the angle in the direction of rotation around the X-axis."),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("strong",{parentName:"li"},"Y-axis angle ( Pitch )")," is the angle in the direction of rotation around the Y-axis."),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("strong",{parentName:"li"},"Z-axis angle ( Yaw )")," is the angle in the direction of rotation around the Z-axis.")),(0,a.yg)("h3",{id:"software-preparation"},"Software Preparation"),(0,a.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"github_item",href:"https://github.com/Seeed-Studio/Seeed_Arduino_LSM6DS3"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Download the Libraries")))," ",(0,a.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.yg)("p",null,"Click on the github download link to drive the six-axis sensor."),(0,a.yg)("h3",{id:"code-implementation"},"Code Implementation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"\n#include <LSM6DS3.h>\n#include <Wire.h>\n\n//Create a instance of class LSM6DS3\nLSM6DS3 myIMU(I2C_MODE, 0x6A);    //I2C device address 0x6A\nfloat aX, aY, aZ, gX, gY, gZ;\nconst float accelerationThreshold = 2.5; // threshold of significant in G's\nconst int numSamples = 119;\nint samplesRead = numSamples;\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n  while (!Serial);\n\n  pinMode(PD5,OUTPUT);\n  digitalWrite(PD5,HIGH);\n  //Call .begin() to configure the IMUs\n  if (myIMU.begin() != 0) {\n    Serial.println(\"Device error\");\n  } else {\n    Serial.println(\"aX,aY,aZ,gX,gY,gZ\");\n  }\n}\n\nvoid loop() {\n  // wait for significant motion\n  while (samplesRead == numSamples) {\n    // read the acceleration data\n    aX = myIMU.readFloatAccelX();\n    aY = myIMU.readFloatAccelY();\n    aZ = myIMU.readFloatAccelZ();\n\n    // sum up the absolutes\n    float aSum = fabs(aX) + fabs(aY) + fabs(aZ);\n\n    // check if it's above the threshold\n    if (aSum >= accelerationThreshold) {\n      // reset the sample read count\n      samplesRead = 0;\n      break;\n    }\n  }\n\n  // check if the all the required samples have been read since\n  // the last time the significant motion was detected\n  while (samplesRead < numSamples) {\n    // check if both new acceleration and gyroscope data is\n    // available\n    // read the acceleration and gyroscope data\n\n    samplesRead++;\n\n    // print the data in CSV format\n    Serial.print(myIMU.readFloatAccelX(), 3);\n    Serial.print(',');\n    Serial.print(myIMU.readFloatAccelY(), 3);\n    Serial.print(',');\n    Serial.print(myIMU.readFloatAccelZ(), 3);\n    Serial.print(',');\n    Serial.print(myIMU.readFloatGyroX(), 3);\n    Serial.print(',');\n    Serial.print(myIMU.readFloatGyroY(), 3);\n    Serial.print(',');\n    Serial.print(myIMU.readFloatGyroZ(), 3);\n    Serial.println();\n\n    if (samplesRead == numSamples) {\n      // add an empty line if it's the last sample\n      Serial.println();\n    }\n  }\n}\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Due to the update of the LSM6DS3 library, if you have previously added this library to the user, you will need to re-download version 2.0.4 or higher and add the ZIP file to the Arduino.")),(0,a.yg)("h3",{id:"function-overview"},"Function Overview"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Include Libraries")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  #include <LSM6DS3.h> \n  #include <Wire.h>\n")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Includes the library for communicating with the LSM6DS3 sensor."),(0,a.yg)("li",{parentName:"ul"},"Includes the library for I2C communication."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Create Sensor Instance")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"LSM6DS3 myIMU(I2C_MODE, 0x6A)")," Creates an instance of the LSM6DS3 class for the IMU sensor, specifying I2C communication mode and the device address 0x6A."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Variables and Constants")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"float aX, aY, aZ, gX, gY, gZ"),": Variables to store accelerometer and gyroscope data."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"const float accelerationThreshold = 2.5"),": The threshold value in G's for detecting significant motion."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"const int numSamples = 119"),": The number of samples to collect after detecting significant motion."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"int samplesRead = numSamples"),": Initializes the sample counter to the total number of samples, indicating no data has been collected yet."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Basic Settings")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  pinMode(PD5,OUTPUT);\n  digitalWrite(PD5,HIGH);\n")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Turn on the gyro enable pin."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Data Processing")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"aX = myIMU.readFloatAccelX();:\naY = myIMU.readFloatAccelY();:\naZ = myIMU.readFloatAccelZ();:\nfloat aSum = fabs(aX) + fabs(aY) + fabs(aZ);\n")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Reads the acceleration along X."),(0,a.yg)("li",{parentName:"ul"},"Reads the acceleration along Y."),(0,a.yg)("li",{parentName:"ul"},"Reads the acceleration along Z."),(0,a.yg)("li",{parentName:"ul"},"Calculate the sum of the absolute values of the acceleration data\uff0c",(0,a.yg)("inlineCode",{parentName:"li"},"fabs()"),"Returns the absolute value.")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"  // check if it's above the threshold\n  if (aSum >= accelerationThreshold) {\n    // reset the sample read count\n    samplesRead = 0;\n    break;\n  }\n")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If the sum of the absolute acceleration values is greater than or equal to the set threshold, reset the sample count samplesRead to 0 and exit the loop."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Check Data")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"while (samplesRead < numSamples) {\n  samplesRead++;\n  .\n  .\n  .\n  .\n  .\n  if (samplesRead == numSamples) {\n    // add an empty line if it's the last sample\n    Serial.println();\n  }\n}\n")),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Go to another loop and check if the required number of samples have been read."),(0,a.yg)("li",{parentName:"ul"},"Increase the count of samplesRead."),(0,a.yg)("li",{parentName:"ul"},"If all samples have been read, print a blank line to separate the data output.")))),(0,a.yg)("h3",{id:"results-chart"},"Results Chart"),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/six_resutl.png",style:{width:700,height:"auto"}})),(0,a.yg)("h3",{id:"greater"},"Greater"),(0,a.yg)("p",null,"If you want more sample code , Please Click : ",(0,a.yg)("strong",{parentName:"p"},'"File" -> Example -> Seeed Arduino LSM6DS3"')),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/33.png",style:{width:500,height:"auto"}})),(0,a.yg)("h2",{id:"xiao-mg24-sense-microphone"},"XIAO MG24 Sense Microphone"),(0,a.yg)("h3",{id:"overview-of-built-in-sensors-1"},"Overview of Built-in Sensors"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Microphone Sensor"),"like the ",(0,a.yg)("strong",{parentName:"p"},"MSM381ACT001")," is a MEMS (Micro-Electro-Mechanical Systems) microphone designed to capture audio signals with ",(0,a.yg)("strong",{parentName:"p"},"high sensitivity and low noise"),". Specifically, the MSM381ACT001 has the following features:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Microphone Function:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Captures sound waves and converts them into electrical signals, enabling the detection of audio input in various environments."),(0,a.yg)("li",{parentName:"ul"},"It features a wide frequency response range, typically from 20 Hz to 20 kHz, suitable for a variety of audio applications, including voice recognition and music playback.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Key Features")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"High Sensitivity: Capable of detecting faint sounds, making it ideal for applications requiring precise audio capture."),(0,a.yg)("li",{parentName:"ul"},"Low Noise: Designed to provide a high signal-to-noise ratio (SNR), ensuring clear audio output even in noisy environments."),(0,a.yg)("li",{parentName:"ul"},"Compact Size: MEMS technology allows for a small form factor, facilitating easy integration into portable devices like smartphones and wearables."),(0,a.yg)("li",{parentName:"ul"},"Digital Output: Offers digital signal output options (e.g., I2S), simplifying the interface with digital signal processors (DSPs) and microcontrollers.")),(0,a.yg)("h3",{id:"software-preparation-1"},"Software Preparation"),(0,a.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"github_item",href:"https://github.com/Seeed-Studio/Seeed_Arduino_Mic"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Download the Libraries")))," ",(0,a.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.yg)("p",null,"Click on the github download link to drive the microphone sensor."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Currently we need to manually modify the replacement file, the subsequent direct download library can be used, please wait for our wiki update.")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Replacement Files]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/mg24_mic/gsdk_v2.a"},"gsdk.a"))),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Changing the file path")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"/Users/yourname/Library/Arduino15/packages/SiliconLabs/hardware/silabs/2.2.0/variants/xiao_mg24/ble_silabs/"))),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/file.png",style:{width:350,height:"auto"}})),(0,a.yg)("h3",{id:"code-implementation-1"},"Code Implementation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <mic.h>\n#if defined(WIO_TERMINAL)\n#include "processing/filters.h"\n#endif\n\n// Settings\n#if defined(WIO_TERMINAL)\n#define DEBUG 1                 // Enable pin pulse during ISR  \n#define SAMPLES 16000*3\n#elif defined(ARDUINO_ARCH_NRF52840)\n#define DEBUG 1                 // Enable pin pulse during ISR  \n#define SAMPLES 800\n#elif defined(ARDUINO_SILABS)\n#define DEBUG 1                 // Enable pin pulse during ISR  \n#define SAMPLES 800\n#endif\n\nmic_config_t mic_config{\n  .channel_cnt = 1,\n  .sampling_rate = 16000,\n  .buf_size = 1600,\n#if defined(WIO_TERMINAL)\n  .debug_pin = 1                // Toggles each DAC ISR (if DEBUG is set to 1)\n#elif defined(ARDUINO_ARCH_NRF52840)\n  .debug_pin = LED_BUILTIN                // Toggles each DAC ISR (if DEBUG is set to 1)\n#elif defined(ARDUINO_SILABS)\n  .debug_pin = LED_BUILTIN                // Toggles each DAC ISR (if DEBUG is set to 1)  \n#endif\n};\n\n#if defined(WIO_TERMINAL)\nDMA_ADC_Class Mic(&mic_config);\n#elif defined(ARDUINO_ARCH_NRF52840)\nNRF52840_ADC_Class Mic(&mic_config);\n#elif defined(ARDUINO_SILABS)\nMG24_ADC_Class Mic(&mic_config);\n#endif\n\nint16_t recording_buf[SAMPLES];\nvolatile uint8_t recording = 0;\nvolatile static bool record_ready = false;\n\n#if defined(WIO_TERMINAL)\nFilterBuHp filter;\n#endif\n\nvoid setup() {\n\n  Serial.begin(115200);\n  while (!Serial) {delay(10);}\n  \n#if defined(WIO_TERMINAL)  \n  pinMode(WIO_KEY_A, INPUT_PULLUP);\n#endif\n\n  Mic.set_callback(audio_rec_callback);\n\n  if (!Mic.begin()) {\n    Serial.println("Mic initialization failed");\n    while (1);\n  }\n\n  Serial.println("Mic initialization done.");\n\n}\n\nvoid loop() { \n\n#if defined(WIO_TERMINAL)  \nif (digitalRead(WIO_KEY_A) == LOW && !recording) {\n\n    Serial.println("Starting sampling");\n    recording = 1;\n    record_ready = false;  \n}\n#endif\n\n#if defined(WIO_TERMINAL)  \n  if (!recording && record_ready)\n#elif defined(ARDUINO_ARCH_NRF52840) || defined(ARDUINO_SILABS)\n  if (record_ready)\n#endif  \n  {\n  Serial.println("Finished sampling");\n  \n  for (int i = 0; i < SAMPLES; i++) {\n    \n  //int16_t sample = filter.step(recording_buf[i]);\n  int16_t sample = recording_buf[i];\n  Serial.println(sample);\n  }\n  \n  record_ready = false; \n  }\n}\n\nstatic void audio_rec_callback(uint16_t *buf, uint32_t buf_len) {\n  \n  static uint32_t idx = 0;\n  // Copy samples from DMA buffer to inference buffer\n#if defined(WIO_TERMINAL)\n  if (recording) \n#endif\n  {\n    for (uint32_t i = 0; i < buf_len; i++) {\n  \n      // Convert 12-bit unsigned ADC value to 16-bit PCM (signed) audio value\n#if defined(WIO_TERMINAL)\n      recording_buf[idx++] = filter.step((int16_t)(buf[i] - 1024) * 16);\n      //recording_buf[idx++] = (int16_t)(buf[i] - 1024) * 16;  \n#elif defined(ARDUINO_ARCH_NRF52840) || defined(ARDUINO_SILABS)\n      recording_buf[idx++] = buf[i];\n#endif\n\n      if (idx >= SAMPLES){ \n      idx = 0;\n      recording = 0;\n      record_ready = true;\n      break;\n     } \n    }\n  }\n\n}\n')),(0,a.yg)("h3",{id:"function-overview-1"},"Function Overview"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Microphone Configuration")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"mic_config_t mic_config{\n.channel_cnt = 1,\n.sampling_rate = 16000,\n.buf_size = 1600,\n#if defined(WIO_TERMINAL)\n.debug_pin = 1\n#elif defined(ARDUINO_ARCH_NRF52840)\n.debug_pin = LED_BUILTIN\n#elif defined(ARDUINO_SILABS)\n.debug_pin = LED_BUILTIN\n#endif\n};\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"mic_config_t: Defines a microphone configuration structure."),(0,a.yg)("li",{parentName:"ul"},"channel_cnt: set to 1 for mono."),(0,a.yg)("li",{parentName:"ul"},"sampling_rate: Set to 16000 Hz for sampling frequency."),(0,a.yg)("li",{parentName:"ul"},"buf_size: set to 1600 for buffer size."),(0,a.yg)("li",{parentName:"ul"},"ebug_pin: set debug pin according to platform, used for signal indication during debugging.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Microphone instantiation")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"#if defined(WIO_TERMINAL)\nDMA_ADC_Class Mic(&mic_config);\n#elif defined(ARDUINO_ARCH_NRF52840)\nNRF52840_ADC_Class Mic(&mic_config);\n#elif defined(ARDUINO_SILABS)\nMG24_ADC_Class Mic(&mic_config);\n#endif\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Conditional compilation: create the appropriate microphone class instances for different platforms, using the previously defined configuration.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Recording buffers and flags")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"int16_t recording_buf[SAMPLES];\nvolatile uint8_t recording = 0;\nvolatile static bool record_ready = false;\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"recording_buf: Define an array of SAMPLES to store recording samples."),(0,a.yg)("li",{parentName:"ul"},"recording: a volatile variable that marks whether recording is currently in progress to prevent compiler optimization."),(0,a.yg)("li",{parentName:"ul"},"record_ready: a volatile static variable that indicates if the recording is complete and ready for further processing.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Filter Example (for WIO Terminal)")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"#if defined(WIO_TERMINAL)\nFilterBuHp filter;\n#endif\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"If on the WIO Terminal, create an instance of a high-pass filter for filter processing.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"setup")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'void setup() {\nSerial.begin(115200);\nwhile (!Serial) {delay(10);}\n\n#if defined(WIO_TERMINAL)  \npinMode(WIO_KEY_A, INPUT_PULLUP);\n#endif\n\nMic.set_callback(audio_rec_callback);\n\nif (!Mic.begin()) {\n  Serial.println("Mic initialization failed");\n  while (1);\n}\n\nSerial.println("Mic initialization done.");\n}\n')),(0,a.yg)("p",null,"  -Initialize Serial Port: Start serial communication at 115200 baud rate and wait for the serial port to be ready."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set Pin Mode: On WIO Terminal, set the key pins to input pull-up mode."),(0,a.yg)("li",{parentName:"ul"},"Set callback function: call Mic.set_callback(audio_rec_callback) to specify the callback function when recording audio."),(0,a.yg)("li",{parentName:"ul"},"Initialize the microphone: call Mic.begin(), if the initialization fails, print an error message and enter a dead loop.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"loop")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'void loop() { \n#if defined(WIO_TERMINAL)  \nif (digitalRead(WIO_KEY_A) == LOW && !recording) {\n  Serial.println("Starting sampling");\n  recording = 1;\n  record_ready = false;  \n}\n#endif\n\n#if defined(WIO_TERMINAL)  \nif (!recording && record_ready)\n#elif defined(ARDUINO_ARCH_NRF52840) || defined(ARDUINO_SILABS)\nif (record_ready)\n#endif  \n{\n  Serial.println("Finished sampling");\n  \n  for (int i = 0; i < SAMPLES; i++) {\n    int16_t sample = recording_buf[i];\n    Serial.println(sample);\n  }\n  \n  record_ready = false; \n}\n}\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Detect Key: On the WIO Terminal, starts recording when it detects that a key has been pressed and is not recording."),(0,a.yg)("li",{parentName:"ul"},"Finished sampling:Prints \u201cFinished sampling\u201d if not recording and record_ready is set to true."),(0,a.yg)("li",{parentName:"ul"},"Iterates through the recording buffer and prints each sample value.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Audio recording callback function")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"static void audio_rec_callback(uint16_t *buf, uint32_t buf_len) {\nstatic uint32_t idx = 0;\n#if defined(WIO_TERMINAL)\nif (recording) \n#endif\n{\n  for (uint32_t i = 0; i < buf_len; i++) {\n    #if defined(WIO_TERMINAL)\n    recording_buf[idx++] = filter.step((int16_t)(buf[i] - 1024) * 16);\n    #elif defined(ARDUINO_ARCH_NRF52840) || defined(ARDUINO_SILABS)\n    recording_buf[idx++] = buf[i];\n    #endif\n\n    if (idx >= SAMPLES){ \n      idx = 0;\n      recording = 0;\n      record_ready = true;\n      break;\n    } \n  }\n}\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Callback function: called during audio recording, responsible for copying samples from the DMA buffer to the recording buffer."),(0,a.yg)("li",{parentName:"ul"},"Conditional Compilation: Processes the input using filters if on the WIO Terminal."),(0,a.yg)("li",{parentName:"ul"},"Converts 12-bit unsigned ADC values to 16-bit PCM (signed) audio values."),(0,a.yg)("li",{parentName:"ul"},"Sample Fill: copies samples into recording_buf and updates index idx."),(0,a.yg)("li",{parentName:"ul"},"Finish recording: if the number of filled samples reaches SAMPLES, resets the index, marks the end of recording and sets record_ready to true.")),(0,a.yg)("h3",{id:"results-chart-1"},"Results Chart"),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/mic_result1.png",style:{width:680,height:"auto"}})),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/mic_result.png",style:{width:680,height:"auto"}})),(0,a.yg)("p",null,"Here is the waveform of the recognized sound, when you blow, you can clearly see that the waveform oscillation amplitude becomes bigger."),(0,a.yg)("h3",{id:"greater-1"},"Greater"),(0,a.yg)("p",null,"If you want more sample code , Please Click : -> ",(0,a.yg)("strong",{parentName:"p"},'"Example -> Seeed Arduino Mic"')),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/34.png",style:{width:500,height:"auto"}})),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/mg24_mic/35.png",style:{width:500,height:"auto"}})),(0,a.yg)("h2",{id:"resources"},"Resources"),(0,a.yg)("h3",{id:"for-seeed-studio-xiao-mg24-sense"},"For Seeed Studio XIAO MG24 Sense"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,a.yg)("strong",{parentName:"li"},"[PDF]")," ",(0,a.yg)("a",{parentName:"li",href:"https://statics3.seeedstudio.com/fusion/opl/sheets/314040211.pdf"},"Seeed Studio 6-Axis IMU(LSM6DS3TR-C) datasheet")),(0,a.yg)("li",{parentName:"ul"},"\ud83d\udcc4 ",(0,a.yg)("strong",{parentName:"li"},"[PDF]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/mg24_mic/312030602_MEMSensing_MSM381ACT001_Datasheet.pdf"},"Seeed Studio Analog Microphone(MSM381ACT001) datasheet"))),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}p.isMDXComponent=!0}}]);