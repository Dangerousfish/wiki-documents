"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6717],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=i,y=c["".concat(s,".").concat(g)]||c[g]||u[g]||r;return n?a.createElement(y,o(o({ref:t},d),{},{components:n})):a.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},17838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(9668),i=(n(96540),n(15680));const r={description:"Seeed Studio XIAO ESP32C3 with MicroPython",title:"XIAO ESP32C3 with MicroPython",keywords:["xiao"],image:"https://files.seeedstudio.com/wiki/esp32c3_micropython/title.png",slug:"/xiao_esp32c3_with_micropython",last_update:{date:"08/14/2024",author:"Evelyn Chen"}},o="**Seeed Studio XIAO ESP32C3 with MicroPython**",l={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_with_MicroPython",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_with_MicroPython",title:"XIAO ESP32C3 with MicroPython",description:"Seeed Studio XIAO ESP32C3 with MicroPython",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_with_MicroPython.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3",slug:"/xiao_esp32c3_with_micropython",permalink:"/xiao_esp32c3_with_micropython",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_with_MicroPython.md",tags:[],version:"current",lastUpdatedBy:"Evelyn Chen",lastUpdatedAt:1723593600,formattedLastUpdatedAt:"Aug 14, 2024",frontMatter:{description:"Seeed Studio XIAO ESP32C3 with MicroPython",title:"XIAO ESP32C3 with MicroPython",keywords:["xiao"],image:"https://files.seeedstudio.com/wiki/esp32c3_micropython/title.png",slug:"/xiao_esp32c3_with_micropython",last_update:{date:"08/14/2024",author:"Evelyn Chen"}},sidebar:"ProductSidebar",previous:{title:"XIAO ESP32C3 with CircuitPython",permalink:"/xiao_esp32c3_with_circuitpython"},next:{title:"XIAO ESP32C3 accesses Home Assistant via ESPHome service",permalink:"/xiao-esp32c3-esphome"}},s={},p=[{value:"Installing MicroPython",id:"installing-micropython",level:2},{value:"Install Esptool",id:"install-esptool",level:4},{value:"Download the XIAO ESP32C3 MicroPython firmware",id:"download-the-xiao-esp32c3-micropython-firmware",level:4},{value:"Connect the XIAO ESP32C3 on your PC",id:"connect-the-xiao-esp32c3-on-your-pc",level:4},{value:"Check port",id:"check-port",level:4},{value:"Erase flash",id:"erase-flash",level:4},{value:"Write flash",id:"write-flash",level:4},{value:"Recommended Editors for MicroPython",id:"recommended-editors-for-micropython",level:2},{value:"1. Thonny",id:"1-thonny",level:3},{value:"2. Arduino Lab for MicroPython",id:"2-arduino-lab-for-micropython",level:3},{value:"3. Pymakr on Visual Studio Code",id:"3-pymakr-on-visual-studio-code",level:3},{value:"4. uPtCraft IDE",id:"4-uptcraft-ide",level:3},{value:"Pinout/Port Information",id:"pinoutport-information",level:2},{value:"Getting Started with MicroPython on the XIAO ESP32C3",id:"getting-started-with-micropython-on-the-xiao-esp32c3",level:2},{value:"General board control",id:"general-board-control",level:3},{value:"Network-WLAN",id:"network-wlan",level:3},{value:"Delay and timing",id:"delay-and-timing",level:3},{value:"Timers",id:"timers",level:3},{value:"Pins and GPIO",id:"pins-and-gpio",level:3},{value:"UART(serial bus)",id:"uartserial-bus",level:3},{value:"PWM(pulse width modulation)",id:"pwmpulse-width-modulation",level:3},{value:"ADC(analog to digital conversion)",id:"adcanalog-to-digital-conversion",level:3},{value:"SPI",id:"spi",level:3},{value:"Software SPI bus",id:"software-spi-bus",level:4},{value:"Hardware SPI bus",id:"hardware-spi-bus",level:4},{value:"I2C",id:"i2c",level:3},{value:"Software I2C bus",id:"software-i2c-bus",level:4},{value:"Hardware I2C bus",id:"hardware-i2c-bus",level:4},{value:"Expension Board Base for XIAO",id:"expension-board-base-for-xiao",level:3},{value:"Read the light sensor data",id:"read-the-light-sensor-data",level:4},{value:"Light up OLED screen",id:"light-up-oled-screen",level:4},{value:"Resources",id:"resources",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"seeed-studio-xiao-esp32c3-with-micropython"},(0,i.yg)("strong",{parentName:"h1"},"Seeed Studio XIAO ESP32C3 with MicroPython")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/title.png"})),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://github.com/micropython/micropython/wiki"},"MicroPython")," is a Python interprer with a partial native code compilation feature. It provides a subset of Python 3.5 features, implemented for embedded processors and constrained systems. It is different from CPython and you can read more about the differences ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/micropython/micropython/wiki/Differences"},"here"),"."),(0,i.yg)("h2",{id:"installing-micropython"},"Installing MicroPython"),(0,i.yg)("h4",{id:"install-esptool"},"Install Esptool"),(0,i.yg)("p",null,"If you haven't already installed esptool.py, you can do so using pip on your pc:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-linux"},"pip install esptool\n")),(0,i.yg)("h4",{id:"download-the-xiao-esp32c3-micropython-firmware"},"Download the XIAO ESP32C3 MicroPython firmware"),(0,i.yg)("p",null,"You need to download the firmware binary file from ",(0,i.yg)("a",{parentName:"p",href:"https://micropython.org/download/ESP32_GENERIC_C3/"},"micropython.org"),"\nAfter downloading correct bin file, navigate to the folder, and open a cmd terminal there.\nAs of the final draft, the latest version of bin file is:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"ESP32_GENERIC_C3-20230602-v1.23.0.bin\n")),(0,i.yg)("h4",{id:"connect-the-xiao-esp32c3-on-your-pc"},"Connect the XIAO ESP32C3 on your PC"),(0,i.yg)("p",null,"You need to press and hold down BOOT button on your XIAO ESP32C3 board to enter the 'bootloader' mode while pluging in to the type C USB cable to your pc."),(0,i.yg)("h4",{id:"check-port"},"Check port"),(0,i.yg)("p",null,"Find out all serial devices on your pc."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Linux ")),(0,i.yg)("p",null,"On Linux, you can use the ",(0,i.yg)("em",{parentName:"p"},"dmesg")," command to view connected devices:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-Linux"},"dmesg | grep tty\n")),(0,i.yg)("p",null,"Alternatively, you can list serial devices using ",(0,i.yg)("em",{parentName:"p"},"ls"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"ls /dev/ttyS* /dev/ttyUSB*\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Window")),(0,i.yg)("p",null,"On Windows, you can check serial ports through Device Manager. Look for the \u201cPorts (COM & LPT)\u201d section to see the available serial ports. You can also use the mode command in Command Prompt to list serial ports:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"mode\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"macOS")),(0,i.yg)("p",null,"On macOS, you can list available serial ports using the ",(0,i.yg)("em",{parentName:"p"},"ls")," command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"ls /dev/cu*\n")),(0,i.yg)("p",null,"This will show all serial port devices."),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_circuitpython/1.png"})),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"If the port is busy, you can use the following command to find an dkill and processes using the port(On macOS):\nIdentify processes using the port:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre"},"lsof | grep port\n")),(0,i.yg)("p",{parentName:"admonition"},"This command lists open files and searches for any process using the specified port.\nFind the process ID(PID) from the output and kill the procee:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre"},"kill -9 <PID>\n")),(0,i.yg)("p",{parentName:"admonition"},"Replace ",(0,i.yg)("em",{parentName:"p"},"PID")," with the actual process ID found.")),(0,i.yg)("h4",{id:"erase-flash"},"Erase flash"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-linux"},"esptool.py --chip esp32c3 --port /dev/cu.usbmodem11301 erase_flash\n")),(0,i.yg)("p",null,"Replace '/dev/cu.usbmodem11301' with the correct port name from your system(e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"COM3")," on Windows, ",(0,i.yg)("inlineCode",{parentName:"p"},"/dev/ttyUSB0")," on linux)."),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/2.png"})),(0,i.yg)("h4",{id:"write-flash"},"Write flash"),(0,i.yg)("p",null,"Flash the firmware onto XIAO ESP32C3:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-linux"},"esptool.py --chip esp32c3 --port /dev/cu.usbmodem11301 --baud 460800 write_flash -z 0x0 ESP32_GENERIC_C3-20240602-v1.23.0.bin\n")),(0,i.yg)("p",null,"Again, replace '/dev/cu.usbmodem11301' with the correct port name, and 'ESP32_GENERIC_C3-20240602-v1.23.0.bin' with the path to your blank firmware file."),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/3.png"})),"Then can start to compile script using your prefer tool to ESP32!",(0,i.yg)("h2",{id:"recommended-editors-for-micropython"},"Recommended Editors for MicroPython"),(0,i.yg)("p",null,"Some of popular tools are listed below."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/getting-started-thonny-micropython-python-ide-esp32-esp8266/"},"Thonny IDE")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://docs.arduino.cc/micropython/"},"Arduino for micropython")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/micropython-esp32-esp8266-vs-code-pymakr/"},"Visual Studio Code pymakr")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/install-upycraft-ide-windows-pc-instructions/"},"uPyCraft IDE"))),(0,i.yg)("h3",{id:"1-thonny"},"1. Thonny"),(0,i.yg)("p",null,"Install and open thonny, then configure Thonny following the instruction:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"pip install thonny\n#open thonny after installation\nthonny\n")),(0,i.yg)("p",null,'Go to Run--\x3eConfigure Interpreter, and ensure that the Interpreter tab in the Thonny options looks as shown below, select "CircuitPython (generic)" and port:'),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/4.png"})),(0,i.yg)("p",null,'Click "OK" on the dialog and you should be presented with the Micropython shell at the bottom of the thonny window as shown in the figure below.\nEnter scripy line by line to the Shell to get the flash and sram size:'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import gc\ngc.mem_free()\n\nimport esp\nesp.flash_size()\n")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/4.png"})),(0,i.yg)("p",null,"Congratulations on successfully setting up MicroPython on your XIAO ESP32C3 with Thonny!"),(0,i.yg)("h3",{id:"2-arduino-lab-for-micropython"},"2. Arduino Lab for MicroPython"),(0,i.yg)("p",null,"Download Arduino lab for MicroPython and connect the device to your pc."),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:400,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/7.png"})),(0,i.yg)("p",null,"Code like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin\nimport time\n\n# Define the LED pin\nled = Pin(7, Pin.OUT)  # Use the correct GPIO number instead of D10\n\n# Blink the LED in a loop\nwhile True:\n    led.value(1)   # Turn the LED on\n    time.sleep(1)  # Wait for a second\n    led.value(0)   # Turn the LED off\n    time.sleep(1)  # Wait for a second\n")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/9.png"})),(0,i.yg)("h3",{id:"3-pymakr-on-visual-studio-code"},"3. Pymakr on Visual Studio Code"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Install Pymakr\nFollow the ",(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/micropython-esp32-esp8266-vs-code-pymakr/"},"installation instructions")," to install Pymakr."),(0,i.yg)("li",{parentName:"ul"},"Connect Your XIAO ESP32C3 to your computer."),(0,i.yg)("li",{parentName:"ul"},"Create a New Project\nOpen VS Code and create a new project for your microcontroller."),(0,i.yg)("li",{parentName:"ul"},"Add a New Python File\nCreate a new Python file within your project."),(0,i.yg)("li",{parentName:"ul"},"Upload Script to MCU and Compile the Script")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/10.png"})),(0,i.yg)("h3",{id:"4-uptcraft-ide"},"4. uPtCraft IDE"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/install-upycraft-ide-mac-os-x-instructions/"},"macOS")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"PChttps://randomnerdtutorials.com/install-upycraft-ide-windows-pc-instructions/"},"Windows")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://randomnerdtutorials.com/install-upycraft-ide-linux-ubuntu-instructions/"},"Linux"))),(0,i.yg)("h2",{id:"pinoutport-information"},"Pinout/Port Information"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:800,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/11.png"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"More information please refer to ",(0,i.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/#hardware-overview"},"hardware overview")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/XIAO_WiFi/Resources/Seeeduino-XIAO-ESP32C3-SCH.pdf"},"Seeed Studio XIAO ESP32C3 Schematic"))),(0,i.yg)("h2",{id:"getting-started-with-micropython-on-the-xiao-esp32c3"},"Getting Started with MicroPython on the XIAO ESP32C3"),(0,i.yg)("p",null,"Here is ",(0,i.yg)("a",{parentName:"p",href:"https://docs.micropython.org/en/latest/esp32/quickref.html#installing-micropython"},"a quick reference for ESP32 operation by micropython"),".\nFor more knowledge about ",(0,i.yg)("a",{parentName:"p",href:"https://docs.micropython.org/en/latest/library/index.html#python-standard-libraries-and-micro-libraries"},"micropython libraries"),"."),(0,i.yg)("h3",{id:"general-board-control"},"General board control"),(0,i.yg)("p",null,"The MicroPython REPL(",(0,i.yg)("em",{parentName:"p"},"R"),"ead-",(0,i.yg)("em",{parentName:"p"},"E"),"val-",(0,i.yg)("em",{parentName:"p"},"P"),"rint-",(0,i.yg)("em",{parentName:"p"},"L"),"oop) is on UART0 (GPIO1=TX, GPIO3=RX) at baudrate 115200. Tab-completion is useful to find out what methods an object has. Paste mode (ctrl-E) is useful to paste a large slab of Python code into the REPL.\nCan use the ",(0,i.yg)("em",{parentName:"p"},"dir()")," function in MicroPython(similar in Python) to list the attributes and methods of an object.\nFor example, enter ",(0,i.yg)("em",{parentName:"p"},"dir(machine)")," to shell:"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/12.png"})),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"machine")," module:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import machine\nmachine.freq()          # get the current frequency of the CPU, for esp32c3 is 160000000\nmachine.freq(160000000) # set the CPU frequency to 160 MHz\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"esp")," module:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import esp\n\nesp.osdebug(None)       # turn off vendor O/S debugging messages\nesp.osdebug(0)          # redirect vendor O/S debugging messages to UART(0)\n\n# low level methods to interact with flash storage\nesp.flash_size()\nesp.flash_user_start()\nesp.flash_erase(sector_no)\nesp.flash_write(byte_offset, buffer)\nesp.flash_read(byte_offset, buffer)\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"esp32")," module:\nESP32C3, ESP32S2, and ESP32S3 have an internal temperature sensor available and returns the temperature in Celsius:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import esp32\nesp32.mcu_temperature() # read the internal temperature of the MCU, in Celsius\n")),(0,i.yg)("h3",{id:"network-wlan"},"Network-WLAN"),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"Network")," module:\nMore information refer to ",(0,i.yg)("a",{parentName:"p",href:"https://docs.micropython.org/en/latest/library/network.WLAN.html"},"here"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import network\n\nwlan = network.WLAN(network.STA_IF) # create station interface\nwlan.active(True)       # activate the interface\nwlan.scan()             # scan for access points\nwlan.isconnected()      # check if the station is connected to an AP\nwlan.connect('ssid', 'key') # connect to an AP\nwlan.config('mac')      # get the interface's MAC address\nwlan.ifconfig()  # get the interface's IPv4 addresses\n\nap = network.WLAN(network.AP_IF) # create access-point interface\nap.config(ssid='ESP-AP') # set the SSID of the access point\nap.config(max_clients=10) # set how many clients can connect to the network\nap.active(True)         # activate the interface\n\n")),(0,i.yg)("p",null,"A useful function for connecting to your local WiFi network is:\t"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"def do_connect():\n    import network\n    wlan = network.WLAN(network.STA_IF)\n    wlan.active(True)\n    if not wlan.isconnected():\n        print('connecting to network...')\n        wlan.connect('ssid', 'key') #replace the ssid and key\n        while not wlan.isconnected():\n            pass\n    print('network config:', wlan.ifconfig())\n\n")),(0,i.yg)("h3",{id:"delay-and-timing"},"Delay and timing"),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"time")," module:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"import time\n\ntime.sleep(1)           # sleep for 1 second\ntime.sleep_ms(500)      # sleep for 500 milliseconds\ntime.sleep_us(10)       # sleep for 10 microseconds\nstart = time.ticks_ms() # get millisecond counter\ndelta = time.ticks_diff(time.ticks_ms(), start) # compute time difference\n")),(0,i.yg)("h3",{id:"timers"},"Timers"),(0,i.yg)("p",null,"The ESP32 port has four hardware timers. Use the ",(0,i.yg)("a",{parentName:"p",href:"https://docs.micropython.org/en/latest/library/machine.Timer.html#machine-timer"},"class")," with a timer ID from 0 to 3 (inclusive):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Timer\n\ntim0 = Timer(0)\ntim0.init(period=5000, mode=Timer.ONE_SHOT, callback=lambda t:print(0))\n\ntim1 = Timer(1)\ntim1.init(period=2000, mode=Timer.PERIODIC, callback=lambda t:print(1))\n")),(0,i.yg)("p",null,"The period is in milliseconds.\nVirtual timers are not currently supported on this port."),(0,i.yg)("h3",{id:"pins-and-gpio"},"Pins and GPIO"),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"machine.Pin")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'from machine import Pin\n\np2 = Pin(2, Pin.OUT)    # create output pin on GPIO2\np2.on()                 # set pin to "on" (high) level\np2.off()                # set pin to "off" (low) level\np2.value(1)             # set pin to on/high\n\np3 = Pin(3, Pin.IN)     # create input pin on GPIO3\nprint(p3.value())       # get value, 0 or 1\n\np4 = Pin(4, Pin.IN, Pin.PULL_UP) # enable internal pull-up resistor\np5 = Pin(5, Pin.OUT, value=1) # set pin high on creation\np6 = Pin(6, Pin.OUT, drive=Pin.DRIVE_3) # set maximum drive strength\n')),(0,i.yg)("p",null,"Available Pins are from the following ranges (inclusive): 2,3,4,5,6,7,8,9,10,20,21. These correspond to the actual GPIO pin numbers of ESP32C3 chip. "),(0,i.yg)("h3",{id:"uartserial-bus"},"UART(serial bus)"),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"machine.UART")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import UART\n\nuart1 = UART(1, baudrate=9600, tx=21, rx=20)\nuart1.write('hello')  # write 5 bytes\nuart1.read(5)         # read up to 5 bytes\n")),(0,i.yg)("p",null,"The ESP32C3 have one hardware UART. the pins listed below:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"UART"),(0,i.yg)("th",{parentName:"tr",align:null},"Pin"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"TX"),(0,i.yg)("td",{parentName:"tr",align:null},"21")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"RX"),(0,i.yg)("td",{parentName:"tr",align:null},"20")))),(0,i.yg)("h3",{id:"pwmpulse-width-modulation"},"PWM(pulse width modulation)"),(0,i.yg)("p",null,"PWM can be enabled on all output-enabled pins. The base frequency can range from 1Hz to 40MHz but there is a tradeoff; as the base frequency increases the duty resolution decreases.\nThe ",(0,i.yg)("em",{parentName:"p"},"machine.PWM")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin, PWM\n\npwm2 = PWM(Pin(2), freq=5000, duty_u16=32768) # create PWM object from a pin\nfreq = pwm2.freq()         # get current frequency\npwm2.freq(1000)            # set PWM frequency from 1Hz to 40MHz\n\nduty = pwm2.duty()         # get current duty cycle, range 0-1023 (default 512, 50%)\npwm2.duty(256)             # set duty cycle from 0 to 1023 as a ratio duty/1023, (now 25%)\n\nduty_u16 = pwm2.duty_u16() # get current duty cycle, range 0-65535\npwm2.duty_u16(2**16*3//4)  # set duty cycle from 0 to 65535 as a ratio duty_u16/65535, (now 75%)\n\nduty_ns = pwm2.duty_ns()   # get current pulse width in ns\npwm2.duty_ns(250_000)      # set pulse width in nanoseconds from 0 to 1_000_000_000/freq, (now 25%)\n\npwm2.deinit()              # turn off PWM on the pin\n\npwm3 = PWM(Pin(3), freq=20000, duty=512)  # create and configure in one go\nprint(pwm3)                               # view PWM settings\n")),(0,i.yg)("p",null,"ESP chips have different hardware peripherals:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Hardware Specification"),(0,i.yg)("th",{parentName:"tr",align:null},"ESP32C3"),(0,i.yg)("th",{parentName:"tr",align:null},"ESP32"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Number of groups (speed modes)"),(0,i.yg)("td",{parentName:"tr",align:null},"1"),(0,i.yg)("td",{parentName:"tr",align:null},"2")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Number of timers per group"),(0,i.yg)("td",{parentName:"tr",align:null},"4"),(0,i.yg)("td",{parentName:"tr",align:null},"4")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Number of channels per group"),(0,i.yg)("td",{parentName:"tr",align:null},"6"),(0,i.yg)("td",{parentName:"tr",align:null},"8")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Different PWM frequencies (groups * timers)"),(0,i.yg)("td",{parentName:"tr",align:null},"4"),(0,i.yg)("td",{parentName:"tr",align:null},"8")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Total PWM channels (Pins, duties) (groups * channels)"),(0,i.yg)("td",{parentName:"tr",align:null},"6"),(0,i.yg)("td",{parentName:"tr",align:null},"16")))),(0,i.yg)("h3",{id:"adcanalog-to-digital-conversion"},"ADC(analog to digital conversion)"),(0,i.yg)("p",null,"On XIAO ESP32C3, ADC functionality is available on pins 2,3,4."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"A3(GP105) - Uses ADC2, which may become inoperative due to false sampling signals. For analog reads, use ADC1(A0/A1/A2) instead. Refer to the XIAO ESP32C3 datasheet.")),(0,i.yg)("p",null,"The ",(0,i.yg)("em",{parentName:"p"},"machine.ADC")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import ADC\n\nadc = ADC(pin)        # create an ADC object acting on a pin\nval = adc.read_u16()  # read a raw analog value in the range 0-65535\nval = adc.read_uv()   # read an analog value in microvolts\n")),(0,i.yg)("h3",{id:"spi"},"SPI"),(0,i.yg)("h4",{id:"software-spi-bus"},"Software SPI bus"),(0,i.yg)("p",null,"Software SPI (using bit-banging) works on all pins, and is accessed via the ",(0,i.yg)("em",{parentName:"p"},"machine.SoftSPI")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin, SoftSPI\n\n# construct a SoftSPI bus on the given pins\n# polarity is the idle state of SCK\n# phase=0 means sample on the first edge of SCK, phase=1 means the second\nspi = SoftSPI(baudrate=100000, polarity=1, phase=0, sck=Pin(2), mosi=Pin(4), miso=Pin(6))\n\nspi.init(baudrate=200000) # set the baudrate\n\nspi.read(10)            # read 10 bytes on MISO\nspi.read(10, 0xff)      # read 10 bytes while outputting 0xff on MOSI\n\nbuf = bytearray(50)     # create a buffer\nspi.readinto(buf)       # read into the given buffer (reads 50 bytes in this case)\nspi.readinto(buf, 0xff) # read into the given buffer and output 0xff on MOSI\n\nspi.write(b'12345')     # write 5 bytes on MOSI\n\nbuf = bytearray(4)      # create a buffer\nspi.write_readinto(b'1234', buf) # write to MOSI and read from MISO into the buffer\nspi.write_readinto(buf, buf) # write buf to MOSI and read MISO back into buf\n")),(0,i.yg)("h4",{id:"hardware-spi-bus"},"Hardware SPI bus"),(0,i.yg)("p",null,"Hardware SPI is accessed via the machine.SPI class and has the same methods as software SPI above:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin, SPI\n\nhspi = SPI(1, 10000000)\nhspi = SPI(1, 10000000, sck=Pin(8), mosi=Pin(10), miso=Pin(9))\n")),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"SPI"),(0,i.yg)("th",{parentName:"tr",align:null},"Pin"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SCK"),(0,i.yg)("td",{parentName:"tr",align:null},"D8")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"MOSI"),(0,i.yg)("td",{parentName:"tr",align:null},"D10")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"MISO"),(0,i.yg)("td",{parentName:"tr",align:null},"D9")))),(0,i.yg)("h3",{id:"i2c"},"I2C"),(0,i.yg)("h4",{id:"software-i2c-bus"},"Software I2C bus"),(0,i.yg)("p",null,"Software I2C (using bit-banging) works on all output-capable pins, and is accessed via the ",(0,i.yg)("em",{parentName:"p"},"machine.SoftI2C")," class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin, SoftI2C\n\ni2c = SoftI2C(scl=Pin(7), sda=Pin(6), freq=100000)\n\ni2c.scan()              # scan for devices\n\ni2c.readfrom(0x3a, 4)   # read 4 bytes from device with address 0x3a\ni2c.writeto(0x3a, '12') # write '12' to device with address 0x3a\n\nbuf = bytearray(10)     # create a buffer with 10 bytes\ni2c.writeto(0x3a, buf)  # write the given buffer to the peripheral\n")),(0,i.yg)("h4",{id:"hardware-i2c-bus"},"Hardware I2C bus"),(0,i.yg)("p",null,"The driver is accessed via the ",(0,i.yg)("em",{parentName:"p"},"machine.I2C")," class and has the same methods as software I2C above:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},"from machine import Pin, I2C\ni2c = I2C(0, scl=Pin(7), sda=Pin(6), freq=400000)\n")),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"I2C"),(0,i.yg)("th",{parentName:"tr",align:null},"GPIO"),(0,i.yg)("th",{parentName:"tr",align:null},"Pin"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SCL"),(0,i.yg)("td",{parentName:"tr",align:null},"GPIO7"),(0,i.yg)("td",{parentName:"tr",align:null},"D5")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SDA"),(0,i.yg)("td",{parentName:"tr",align:null},"GPIO6"),(0,i.yg)("td",{parentName:"tr",align:null},"D4")))),(0,i.yg)("h3",{id:"expension-board-base-for-xiao"},"Expension Board Base for XIAO"),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"Prerequisites"),":"),(0,i.yg)("table",{align:"center"},(0,i.yg)("tbody",null,(0,i.yg)("tr",null,(0,i.yg)("th",null,"XIAO ESP32C3",(0,i.yg)("br",null)," with soldered header"),(0,i.yg)("th",null,"Expension Board Base for XIAO"),(0,i.yg)("th",null,"Grove Light sensor")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/board-pic.png",style:{width:100,height:"auto"}}))),(0,i.yg)("td",null,(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/esp32c3_circuitpython/15.png",style:{width:210,height:"auto"}}))),(0,i.yg)("td",null,(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/esp32c3_circuitpython/16.png",style:{width:210,height:"auto"}})))),(0,i.yg)("tr",null,(0,i.yg)("td",{align:"center"},(0,i.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,i.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-ESP32C3-p-5431.html"},(0,i.yg)("strong",null,(0,i.yg)("span",null,(0,i.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,i.yg)("td",{align:"center"},(0,i.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,i.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Expansion-board-p-4746.html"},(0,i.yg)("strong",null,(0,i.yg)("span",null,(0,i.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,i.yg)("td",{align:"center"},(0,i.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,i.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Light-Sensor-v1-2-LS06-S-phototransistor.html"},(0,i.yg)("strong",null,(0,i.yg)("span",null,(0,i.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))))))),(0,i.yg)("h4",{id:"read-the-light-sensor-data"},"Read the light sensor data"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:300,src:"https://files.seeedstudio.com/wiki/esp32c3_circuitpython/9.png"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'import time\nfrom machine import Pin, ADC\n\n# Initialize the analog input on pin 2 (corresponds to A0)\nanalog_in = ADC(Pin(2))\nanalog_in.atten(ADC.ATTN_11DB)  # Configure the input range (0-3.6V)\n\ndef get_voltage(pin):\n    # Convert the raw ADC value to voltage\n    return (pin.read() / 4095) * 3.3\n\nwhile True:\n    # Read the raw analog value\n    raw_value = analog_in.read()\n    # Convert the raw value to voltage\n    voltage = get_voltage(analog_in)\n    \n    # Print the raw value and voltage to the serial console\n    print("[Light] Raw value: {:5d} Voltage: {:.2f}V".format(raw_value, voltage))\n    \n    # Delay for a short period of time before reading again\n    time.sleep(1)\n\n')),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/14.png"})),(0,i.yg)("h4",{id:"light-up-oled-screen"},"Light up OLED screen"),(0,i.yg)("p",null,"Plug in your XIAO ESP32C3, open Thonny and click right bottom to configure interpreter\nSelect interpreter- Micropython (ESP32) and ",(0,i.yg)("strong",{parentName:"p"},"Port >>> Click OK")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/15.png"})),(0,i.yg)("p",null,"If everything goes well, you will see the output in the shell\nInstall required ",(0,i.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/XIAO_ESP32C3_MicroPython/#install-required-libraries"},"libraries"),'\nClick "Tools" >>> Click "Management Packages" >>> Enter Library\'s name >>> Click "Search micropython-lib and PyPl"'),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/16.png"})),(0,i.yg)("p",null,"Run the scrip and Flash it to the board.\nAfter you finish coding, click the green button to run the script."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'import time\nfrom machine import Pin, SoftI2C\nimport ssd1306\nimport math\n\n# Pin assignment\ni2c = SoftI2C(scl=Pin(7), sda=Pin(6))  # Adjust the Pin numbers based on your connections\noled_width = 128\noled_height = 64\noled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)\n\noled.fill(0)  # Clear the screen\noled.text("Hello, Seeder!", 10, 15)\noled.text("/////", 30, 40)\noled.text("(`3`)y", 30, 55)\noled.show()  # Show the text\n')),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:600,src:"https://files.seeedstudio.com/wiki/esp32c3_micropython/17.png"})),(0,i.yg)("p",null,"Thank you for reading this article\uff01 Feel free to share your thoughts in the comments."),(0,i.yg)("h2",{id:"resources"},"Resources"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://micropython.org/download/ESP32_GENERIC_C3/"},"The firmware binary file")," for XIAO ESP32C3 with MicroPython")),(0,i.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,i.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,i.yg)("div",{class:"button_tech_support_container"},(0,i.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,i.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,i.yg)("div",{class:"button_tech_support_container"},(0,i.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,i.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}u.isMDXComponent=!0}}]);