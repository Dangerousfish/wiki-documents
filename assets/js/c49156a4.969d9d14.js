"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4026],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,m=c["".concat(s,".").concat(u)]||c[u]||g[u]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},48413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(9668),a=(n(96540),n(15680));const i={description:"Unleash the power of TCP for your Raspberry Pi 4G HAT. Explore how TCP ensures reliable data exchange, essential for IoT applications, remote monitoring, and more.",title:"4G LTE HAT on Raspberry Pi- TCP/IP Networking Explained",keywords:["Raspberry Pi Hat","Getting started","IIoT","IoT","TCP/IP","Edge Computing"],image:"https://files.seeedstudio.com/wiki/4g_hat_raspberry_pi_eg25_gl/tcp.PNG",slug:"/tcp_ip_raspberry_pi_4g_lte_hat",last_update:{date:"12/20/2024",author:"Kasun Thushara"}},o=void 0,l={unversionedId:"Network/RaspberryPi_Devices/LTE_CAT_4_EG25_GL_4G_HAT_for_Raspberry_Pi/Applications/tcp_ip_rpi_4g_lte_hat",id:"Network/RaspberryPi_Devices/LTE_CAT_4_EG25_GL_4G_HAT_for_Raspberry_Pi/Applications/tcp_ip_rpi_4g_lte_hat",title:"4G LTE HAT on Raspberry Pi- TCP/IP Networking Explained",description:"Unleash the power of TCP for your Raspberry Pi 4G HAT. Explore how TCP ensures reliable data exchange, essential for IoT applications, remote monitoring, and more.",source:"@site/docs/Network/RaspberryPi_Devices/LTE_CAT_4_EG25_GL_4G_HAT_for_Raspberry_Pi/Applications/tcp_ip_rpi_4g_lte_hat.md",sourceDirName:"Network/RaspberryPi_Devices/LTE_CAT_4_EG25_GL_4G_HAT_for_Raspberry_Pi/Applications",slug:"/tcp_ip_raspberry_pi_4g_lte_hat",permalink:"/tcp_ip_raspberry_pi_4g_lte_hat",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Network/RaspberryPi_Devices/LTE_CAT_4_EG25_GL_4G_HAT_for_Raspberry_Pi/Applications/tcp_ip_rpi_4g_lte_hat.md",tags:[],version:"current",lastUpdatedBy:"Kasun Thushara",lastUpdatedAt:1734652800,formattedLastUpdatedAt:"Dec 20, 2024",frontMatter:{description:"Unleash the power of TCP for your Raspberry Pi 4G HAT. Explore how TCP ensures reliable data exchange, essential for IoT applications, remote monitoring, and more.",title:"4G LTE HAT on Raspberry Pi- TCP/IP Networking Explained",keywords:["Raspberry Pi Hat","Getting started","IIoT","IoT","TCP/IP","Edge Computing"],image:"https://files.seeedstudio.com/wiki/4g_hat_raspberry_pi_eg25_gl/tcp.PNG",slug:"/tcp_ip_raspberry_pi_4g_lte_hat",last_update:{date:"12/20/2024",author:"Kasun Thushara"}},sidebar:"ProductSidebar",previous:{title:"Setting Up 4G LTE Connectivity for IIoT with MQTT",permalink:"/mqtt_raspberry_pi_4g_lte_hat"},next:{title:"Rockchip-Powered Network Solutions",permalink:"/Rockchip_network_solutions"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Software Requirements",id:"software-requirements",level:3},{value:"Communication drivers and tools",id:"communication-drivers-and-tools",level:4},{value:"Additional Requirements",id:"additional-requirements",level:3},{value:"Send AT Commands to tcpbin.com",id:"send-at-commands-to-tcpbincom",level:2},{value:"Automated Python Script",id:"automated-python-script",level:2},{value:"Python Code Implementation",id:"python-code-implementation",level:2},{value:"Step 1. Prepare the Directory and Virtual Environment",id:"step-1-prepare-the-directory-and-virtual-environment",level:3},{value:"Step 2. Prepare the Python Script",id:"step-2-prepare-the-python-script",level:3},{value:"Step 3. Run the Script",id:"step-3-run-the-script",level:3},{value:"Resources",id:"resources",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:p},c="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"TCP (Transmission Control Protocol) is vital for applications involving the Raspberry Pi 4G HAT because it ensures reliable, ordered, and error-checked data transmission over the internet. This is crucial for real-time applications like IoT devices, where consistent communication with cloud servers or remote systems is needed. TCP\u2019s reliability makes it ideal for sending critical data (e.g., sensor readings, telemetry) and receiving commands, ensuring no data is lost or corrupted. It supports diverse applications such as remote monitoring, messaging systems, and file transfers with the Raspberry Pi acting as a gateway or client."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("h3",{id:"hardware-requirements"},"Hardware Requirements"),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Raspberry Pi 5"),(0,a.yg)("th",null,"Raspberry Pi 4G LTE CAT4 HAT")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://media-cdn.seeedstudio.com/media/catalog/product/cache/bb49d3ec4ee05b6f018e93f896b8a25d/1/-/1-102110919-raspberry-pi-5-8gb-45font.jpg",style:{width:250,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://media-cdn.seeedstudio.com/media/catalog/product/cache/bb49d3ec4ee05b6f018e93f896b8a25d/1/_/1_23_1.jpg",style:{width:250,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Raspberry-Pi-5-8GB-p-5810.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/LTE-CAT-4-EG25-GL-HAT-for-Raspberry-Pi-p-6325.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))))))),(0,a.yg)("h3",{id:"software-requirements"},"Software Requirements"),(0,a.yg)("h4",{id:"communication-drivers-and-tools"},"Communication drivers and tools"),(0,a.yg)("p",null,"If you have not installed relevant drivers and communication tools, please check the ",(0,a.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/getting_started_raspberry_pi_4g_lte_hat/#software-preparation"},"guide")," first"),(0,a.yg)("h3",{id:"additional-requirements"},"Additional Requirements"),(0,a.yg)("p",null,"You will need a pre-configured TCP server with the following details:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Host"),": For example, your own server or for testing purposes tcpbin.com"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Port Number"),": A dedicated port number, or in this case, we will use port ",(0,a.yg)("inlineCode",{parentName:"li"},"4242")," of ",(0,a.yg)("inlineCode",{parentName:"li"},"tcpbin.com"),".")),(0,a.yg)("p",null,"tcpbin.com is a public TCP server used for testing and debugging TCP/IP communication. It echoes back the messages sent to it, making it ideal for verifying connectivity and data transmission."),(0,a.yg)("h2",{id:"send-at-commands-to-tcpbincom"},"Send AT Commands to tcpbin.com"),(0,a.yg)("p",null,"Open Minicom on Raspberry Pi or Qcom Tool on Windows via USB."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"sudo minicom -D /dev/ttyUSB2\n")),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Step"),(0,a.yg)("th",{parentName:"tr",align:null},"Action"),(0,a.yg)("th",{parentName:"tr",align:null},"AT Command"),(0,a.yg)("th",{parentName:"tr",align:null},"Expected Response"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"1"),(0,a.yg)("td",{parentName:"tr",align:null},"Configure the APN for your mobile network provider."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},'AT+QICSGP=1,1,"dialogbb","","",1')),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"OK"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"2"),(0,a.yg)("td",{parentName:"tr",align:null},"Activate the PDP context."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AT+QIACT=1")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"OK"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"3"),(0,a.yg)("td",{parentName:"tr",align:null},"Verify the PDP context is activated."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AT+QIACT?")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},'+QIACT: 1,1,1,"<Your_IP_Address>"')," ",(0,a.yg)("inlineCode",{parentName:"td"},"OK"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"4"),(0,a.yg)("td",{parentName:"tr",align:null},"Open a TCP connection to the server."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},'AT+QIOPEN=1,0,"TCP","tcpbin.com",4242,0,0')),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"+QIOPEN: 0,0")," (Indicates a successful connection)")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"5"),(0,a.yg)("td",{parentName:"tr",align:null},"Send a message to the server."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AT+QISEND=0")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},">")," (Prompt to enter the message)  After typing message: ",(0,a.yg)("inlineCode",{parentName:"td"},"Hello TCPBin<Ctrl+Z>"),"  ",(0,a.yg)("inlineCode",{parentName:"td"},"SEND OK"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"6"),(0,a.yg)("td",{parentName:"tr",align:null},"Read the response from the server."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AT+QIRD=0,1500")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"+QIRD: <length>"),"  ",(0,a.yg)("inlineCode",{parentName:"td"},"Hello TCPBin"),"  ",(0,a.yg)("inlineCode",{parentName:"td"},"OK"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"7"),(0,a.yg)("td",{parentName:"tr",align:null},"Close the TCP connection."),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"AT+QICLOSE=0")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"OK"))))),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/4g_hat_raspberry_pi_eg25_gl/tcp.PNG",style:{width:500}})),(0,a.yg)("h2",{id:"automated-python-script"},"Automated Python Script"),(0,a.yg)("p",null,"Below is an automated Python script to interact with the Quectel 4G LTE module on a Raspberry Pi. The script uses the serial library to send AT commands to the module. You can customize the variables for APN, port, baud rate, TCP port, and address."),(0,a.yg)("h2",{id:"python-code-implementation"},"Python Code Implementation"),(0,a.yg)("h3",{id:"step-1-prepare-the-directory-and-virtual-environment"},"Step 1. Prepare the Directory and Virtual Environment"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Open a terminal on your Raspberry Pi."),(0,a.yg)("li",{parentName:"ul"},"Create a new project folder and navigate into it:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"mkdir TCP_EX\ncd TCP_EX\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Set up a Python virtual environment:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv --system-site-packages env\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Activate the virtual environment:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"source env/bin/activate\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Install the required libraries:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pip install pyserial \n")),(0,a.yg)("h3",{id:"step-2-prepare-the-python-script"},"Step 2. Prepare the Python Script"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Open the ",(0,a.yg)("strong",{parentName:"p"},"Thonny Python IDE")," (pre-installed on Raspberry Pi).")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Create a new file in Thonny and paste the provided code into the editor.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Update the usb_port parameter to match your Raspberry Pi's serial port for the 4G HAT. Typically, it might be ",(0,a.yg)("inlineCode",{parentName:"p"},"/dev/ttyUSB2")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"/dev/ttyUSB3"),". Example:"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'usb_port = "/dev/ttyUSB2"\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Save the file as test_mqtt.py in the ",(0,a.yg)("strong",{parentName:"li"},"TCP_EX")," folder.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'import serial\nimport time\n\n# Configuration Variables\nAPN = "dialogbb"  # Replace with your network APN\nPORT = "/dev/ttyUSB2"  # Serial port connected to the Quectel module\nBAUDRATE = 9600  # Communication baud rate\nTCP_ADDRESS = "tcpbin.com"  # TCP server address\nTCP_PORT = 4242  # TCP server port\nMESSAGE = "Hello TCPBin"  # Message to send\n\n\ndef send_command(ser, command, wait_for="OK", timeout=5):\n    """\n    Send an AT command to the module and wait for a response.\n    """\n    ser.write((command + "\\r\\n").encode())\n    time.sleep(0.5)\n    end_time = time.time() + timeout\n    response = b""\n    while time.time() < end_time:\n        if ser.in_waiting > 0:\n            response += ser.read(ser.in_waiting)\n            if wait_for.encode() in response:\n                break\n    print(f">> {command}")\n    print(response.decode().strip())\n    return response.decode().strip()\n\n\ndef main():\n    try:\n        # Open serial connection\n        ser = serial.Serial(PORT, BAUDRATE, timeout=1)\n        time.sleep(2)  # Allow the module to initialize\n\n        # 1. Configure APN\n        send_command(ser, f\'AT+QICSGP=1,1,"{APN}","","",1\')\n\n        # 2. Activate PDP Context\n        send_command(ser, "AT+QIACT=1")\n\n        # 3. Check PDP Context State\n        send_command(ser, "AT+QIACT?")\n\n        # 4. Open TCP Connection\n        send_command(ser, f\'AT+QIOPEN=1,0,"TCP","{TCP_ADDRESS}",{TCP_PORT},0,0\')\n        time.sleep(5)  # Allow connection to establish\n\n        # 5. Send Data\n        send_command(ser, f"AT+QISEND=0")\n        ser.write((MESSAGE + "\\x1A").encode())  # Send message and end with Ctrl+Z\n        time.sleep(1)  # Allow time for sending\n        print("Message sent.")\n\n        # 6. Read Response\n        response = send_command(ser, "AT+QIRD=0,1500")\n        print(f"Server Response: {response}")\n\n        # 7. Close Connection\n        send_command(ser, "AT+QICLOSE=0")\n        print("Connection closed.")\n\n        # Close serial port\n        ser.close()\n\n    except Exception as e:\n        print(f"Error: {e}")\n\n\nif __name__ == "__main__":\n    main()\n\n\n')),(0,a.yg)("h3",{id:"step-3-run-the-script"},"Step 3. Run the Script"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Open a terminal, ensure you're in the project directory:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cd TCP_EX\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Activate the virtual environment:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"source env/bin/activate\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Run the script using Python:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python test_tcp.py\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The output ")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/4g_hat_raspberry_pi_eg25_gl/tcp_python.PNG",style:{width:600}})),(0,a.yg)("h2",{id:"resources"},"Resources"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[PDF Book]")," ",(0,a.yg)("a",{parentName:"li",href:"https://www.quectel.com/download/quectel_ec2xeg2xeg9xem05_series_tcpip_application_note_v1-3/"},"TCP Application Guide"))),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}g.isMDXComponent=!0}}]);