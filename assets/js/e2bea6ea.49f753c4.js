"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[92662],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>y});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,g=r(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,y=u["".concat(s,".").concat(c)]||u[c]||p[c]||o;return n?i.createElement(y,l(l({ref:t},g),{},{components:n})):i.createElement(y,l({ref:t},g))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},33983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(9668),a=(n(96540),n(15680));const o={description:"Pin multiplexing with Seeed Studio XIAO RA4M1.",title:"Pin Multiplexing with Seeed Studio XIAO RA4M1",keywords:["ra4m1","xiao","pin multiple"],image:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/1-102010551-Seeed-Studio-XIAO-RA4M1.jpg",sidebar_position:1,slug:"/xiao_ra4m1_pin_multiplexing",last_update:{date:"08/15/2024",author:"Jason"}},l=void 0,r={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_RA4M1/XIAO_RA4M1_Pin_Multiplexing",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_RA4M1/XIAO_RA4M1_Pin_Multiplexing",title:"Pin Multiplexing with Seeed Studio XIAO RA4M1",description:"Pin multiplexing with Seeed Studio XIAO RA4M1.",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_RA4M1/XIAO_RA4M1_Pin_Multiplexing.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_RA4M1",slug:"/xiao_ra4m1_pin_multiplexing",permalink:"/xiao_ra4m1_pin_multiplexing",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_RA4M1/XIAO_RA4M1_Pin_Multiplexing.md",tags:[],version:"current",lastUpdatedBy:"Jason",lastUpdatedAt:172368e4,formattedLastUpdatedAt:"Aug 15, 2024",sidebarPosition:1,frontMatter:{description:"Pin multiplexing with Seeed Studio XIAO RA4M1.",title:"Pin Multiplexing with Seeed Studio XIAO RA4M1",keywords:["ra4m1","xiao","pin multiple"],image:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/1-102010551-Seeed-Studio-XIAO-RA4M1.jpg",sidebar_position:1,slug:"/xiao_ra4m1_pin_multiplexing",last_update:{date:"08/15/2024",author:"Jason"}},sidebar:"ProductSidebar",previous:{title:"Getting Started with Seeed Studio XIAO RA4M1",permalink:"/getting_started_xiao_ra4m1"},next:{title:"Hollow Clock Powered by Seeed Studio XIAO RA4M1",permalink:"/xiao_ra4m1_clock"}},s={},d=[{value:"Digital",id:"digital",level:2},{value:"Hardware Preparation",id:"hardware-preparation",level:3},{value:"Software Implementation",id:"software-implementation",level:3},{value:"Digital as PWM",id:"digital-as-pwm",level:2},{value:"Hardware Preparation",id:"hardware-preparation-1",level:3},{value:"Software Implementation",id:"software-implementation-1",level:3},{value:"Analog",id:"analog",level:2},{value:"Hadware Preparation",id:"hadware-preparation",level:3},{value:"Software Implementation",id:"software-implementation-2",level:3},{value:"Serial",id:"serial",level:2},{value:"General Usage",id:"general-usage",level:3},{value:"Usage of Serial1",id:"usage-of-serial1",level:3},{value:"Usage of Software Serial",id:"usage-of-software-serial",level:3},{value:"IIC",id:"iic",level:2},{value:"Harware Preparation",id:"harware-preparation",level:3},{value:"Software Implementation",id:"software-implementation-3",level:3},{value:"Step 1. Install the Seeed Studio XIAO RA4M1 on the Expansion board then conect the Type-C cable.",id:"step-1-install-the-seeed-studio-xiao-ra4m1-on-the-expansion-board-then-conect-the-type-c-cable",level:4},{value:"Step 2. Install the u8g2 library.",id:"step-2-install-the-u8g2-library",level:4},{value:"Step 3. Copy the code and stick on the Ardiono IDE then upload it.",id:"step-3-copy-the-code-and-stick-on-the-ardiono-ide-then-upload-it",level:4},{value:"SPI",id:"spi",level:2},{value:"Hadware Preparation",id:"hadware-preparation-1",level:3},{value:"Software Implementation",id:"software-implementation-4",level:3},{value:"CAN",id:"can",level:2},{value:"Hadware Preparation",id:"hadware-preparation-2",level:3},{value:"Step 1 . Prepare two CAN Bus Breakout Board and XIAO RA4M1",id:"step-1--prepare-two-can-bus-breakout-board-and-xiao-ra4m1",level:4},{value:"Step 2 . Insert these two XIAO RA4M1 separately in CAN Bus Breakout Board",id:"step-2--insert-these-two-xiao-ra4m1-separately-in-can-bus-breakout-board",level:4},{value:"Step 3 . Prepare the DuPont line connection",id:"step-3--prepare-the-dupont-line-connection",level:4},{value:"Software Preparation",id:"software-preparation",level:3},{value:"Software Implementation",id:"software-implementation-5",level:3},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],g={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,i.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"digital"},"Digital"),(0,a.yg)("p",null,"The XIAO RA4M1 has up to 11 regular GPIO pins , 6 analog pins and 8 reusable IO ports behind it. In this example, we will use the XIAO RA4M1, XIAO expansion board, and a relay to demonstrate how to use different digital pins for reading and writing."),(0,a.yg)("h3",{id:"hardware-preparation"},"Hardware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO R4M1"),(0,a.yg)("th",null,"Seeed Studio Expansion Base for XIAO with Grove OLED"),(0,a.yg)("th",null,"Grove - Relay")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Seeeduino-XIAO-Expansion-Board/Update_pic/zheng1.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-Relay/img/Twig-Relay.jpg",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Expansion-board-p-4746.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Relay.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("p",null,"Please install XIAO RA4M1 or Sense onto the expansion board, and connect the relay to the ",(0,a.yg)("strong",{parentName:"p"},"A0/D0")," interface of the expansion board via a Grove cable. Finally, connect XIAO to the computer via a USB-C cable."),(0,a.yg)("h3",{id:"software-implementation"},"Software Implementation"),(0,a.yg)("p",null,"In this example, we will implement control of a relay's on/off state using a button connected to the XIAO expansion board. When the button is pressed, the relay turns on, and when the button is released, the relay turns off."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},"const int buttonPin = D1;     // the number of the pushbutton pin\nint buttonState = 0;          // variable for reading the pushbutton status\nconst int relayPin = D0;\n\nvoid setup() {\n  // initialize the Relay pin as an output:\n  pinMode(relayPin, OUTPUT);\n  // initialize the pushbutton pin as an input:\n  pinMode(buttonPin, INPUT_PULLUP);\n}\n\nvoid loop() {\n  // read the state of the pushbutton value:\n  buttonState = digitalRead(buttonPin);\n\n  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:\n  if (buttonState == HIGH) {\n    // turn Relay on:\n    digitalWrite(relayPin, HIGH);\n  } else {\n    // turn Relay off:\n    digitalWrite(relayPin, LOW);\n  }\n}\n")),(0,a.yg)("p",null,"If everything goes smoothly, after uploading the program, you should see the following effect."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/31.gif",style:{width:600,height:"auto"}})),(0,a.yg)("h2",{id:"digital-as-pwm"},"Digital as PWM"),(0,a.yg)("p",null,"All GPIO pins on XIAO RA4M1 support PWM output. Therefore, you can use any pin to output PWM to adjust the brightness of lights, control servos, and other functions."),(0,a.yg)("h3",{id:"hardware-preparation-1"},"Hardware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO RA4M1"),(0,a.yg)("th",null,"Seeed Studio Expansion Base for XIAO with Grove OLED"),(0,a.yg)("th",null,"Grove - Variable Color LED")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Seeeduino-XIAO-Expansion-Board/Update_pic/zheng1.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-Variable_Color_LED/img/Variable_Color_LED1.jpg",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Expansion-board-p-4746.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Variable-Color-LED-p-852.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("p",null,"Please install XIAO RA4M1 or Sense onto the expansion board, then connect the Variable Color LED to the A0/D0 interface of the expansion board using a Grove cable. Finally, connect XIAO to your computer via USB-C cable."),(0,a.yg)("h3",{id:"software-implementation-1"},"Software Implementation"),(0,a.yg)("p",null,"In this example, we will demonstrate how to use PWM output to control the brightness of a light."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"int LED_pin = D0;    // LED connected to digital pin 10\n\nvoid setup() {\n  // declaring LED pin as output\n  pinMode(LED_pin, OUTPUT);\n}\n\nvoid loop() {\n  // fade in from min to max in increments of 5 points:\n  for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 3) {\n    // sets the value (range from 0 to 255):\n    analogWrite(LED_pin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n  }\n\n  // fade out from max to min in increments of 5 points:\n  for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 3) {\n    // sets the value (range from 0 to 255):\n    analogWrite(LED_pin, fadeValue);\n    // wait for 30 milliseconds to see the dimming effect\n    delay(30);\n  }\n}\n")),(0,a.yg)("p",null,"If the program runs successfully, you will see the following running effect."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/32.gif",style:{width:600,height:"auto"}})),(0,a.yg)("h2",{id:"analog"},"Analog"),(0,a.yg)("p",null,"XIAO RA4M1 Development Board  Having up to 14 bit ADC for high-resolution reading of analog sensor values , it can help us to read more accurate val The analog-to-digital converter(ADC) on an XIAO RA4M1 Development board . By Default , the resolution is set 10-bit , which can be to both 12-bit and 14-bit resolution for improved accuracy on analog readings"),(0,a.yg)("p",null,"Detail Datas by ADC accuracy"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"10-bit :  0~1024"),(0,a.yg)("li",{parentName:"ul"},"12-bit :  0~4096"),(0,a.yg)("li",{parentName:"ul"},"14-bit :  0~16383")),(0,a.yg)("p",null,"Next , We will choose two sensors to reflect the characteristics of ADC . "),(0,a.yg)("h3",{id:"hadware-preparation"},"Hadware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO RA4M1"),(0,a.yg)("th",null,"Grove-Variable Color LED"),(0,a.yg)("th",null,"Grove-Rotary Angle Sensor "),(0,a.yg)("th",null,"Seeed Studio Grove Base for XIAO ")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-Variable_Color_LED/img/Variable_Color_LED1.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_Shield_for_Pi_Pico_V1.0/rotary.png",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-Shield-for-Seeeduino-XIAO/img/xiao_-Preview-25.png",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Variable-Color-LED-p-852.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Rotary-Angle-Sensor.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Shield-for-Seeeduino-XIAO-p-4621.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("h3",{id:"software-implementation-2"},"Software Implementation"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#define ADC_Bit_Fourteen 14\n#define ADC_Bit_Twelve 12\n#define ADC_Bit_Ten 10\n\nconst int analogInPin = A1;  // Analog input pin that the potentiometer is attached to\nconst int analogOutPin = 9;  // Analog output pin that the LED is attached to\n\nint sensorValue = 0;  // value read from the pot\nint outputValue = 0;  // value output to the PWM (analog out)\n\nvoid setup() {\n\n  Serial.begin(115200);\n  // Ten_Bite_ADC_Config(); // 10bit\n  // Twelve_Bite_ADC_Config(); // 12bit\n  Fourteen_Bite_ADC_Config(); // 14bit\n  \n}\n\nvoid loop() {\n  sensorValue = analogRead(analogInPin);\n  outputValue = map(sensorValue, 0, 4095, 0, 255);\n  analogWrite(analogOutPin, outputValue);\n\n  Serial.print("sensor = ");\n  Serial.print(sensorValue);\n  Serial.print("\\t output = ");\n  Serial.println(outputValue);\n  delay(100);\n}\n\nvoid Ten_Bite_ADC_Config() {\n  analogReadResolution(ADC_Bit_Ten);\n}\n\nvoid Twelve_Bite_ADC_Config() {\n  analogReadResolution(ADC_Bit_Twelve);\n}\n\nvoid Fourteen_Bite_ADC_Config() {\n  analogReadResolution(ADC_Bit_Fourteen);\n}\n')),(0,a.yg)("p",null,"If everything goes smoothly, after uploading the program, you should see the following effect."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/33.gif",style:{width:650,height:"auto"}})),(0,a.yg)("h2",{id:"serial"},"Serial"),(0,a.yg)("p",null,"When working with Arduino IDE, Serial communication is an essential part of many projects. To\nuse Serial in Arduino IDE, you need to start by opening the Serial Monitor window. This can be done by clicking on the ",(0,a.yg)("strong",{parentName:"p"},"Serial Monitor")," icon in the toolbar or by pressing the ",(0,a.yg)("strong",{parentName:"p"},"Ctrl+Shift+M")," shortcut key."),(0,a.yg)("h3",{id:"general-usage"},"General Usage"),(0,a.yg)("p",null,"Some of the commonly used Serial functions include:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.begin()")," -- which initializes the communication at a specified baud rate; "),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.print()")," -- which sends data to the Serial port in a readable format; "),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.write()")," -- which sends binary data to the Serial port;"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.available()")," -- which checks if there is any data available to be read from the Serial port; "),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.read()")," -- which reads a single byte of data from the Serial port; "),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Serial.flush()")," -- which waits for the transmission of outgoing serial data to complete. ")),(0,a.yg)("p",null,"By using these Serial functions, you can send and receive data between the Arduino board and your computer, which opens up many possibilities for creating interactive projects."),(0,a.yg)("p",null,"Here is an example program:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'void setup() {\n  // initialize serial communication at 9600 bits per second:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // send data to the serial port\n  Serial.println("Hello World!");\n\n  // read data from the serial port\n  if (Serial.available() > 0) {\n    // read the incoming byte:\n    char incomingByte = Serial.read();\n    // print the incoming byte to the serial monitor:\n    Serial.print("I received: ");\n    Serial.println(incomingByte);\n  }\n  \n  // wait for a second before repeating the loop\n  delay(1000);\n}\n')),(0,a.yg)("h3",{id:"usage-of-serial1"},"Usage of Serial1"),(0,a.yg)("p",null,"According to the above XIAO RA4M1 Pin diagrams for specific parameters, we can observe that there are TX pin and RX pin.\nThis is different from serial communication, but the usage is also very similar, except that a few parameters need to be added.\nSo next, we will use the pins led out by the chip for serial communication."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'\n#define BAUD 115200\n\nvoid setup() {\n    Serial1.begin(BAUD);\n}\n \nvoid loop() {\n  if(Serial1.available() > 0)\n  {\n    char incominByte = Serial1.read();\n    Serial1.print("I received : ");\n    Serial1.println(incominByte);\n  }\n  delay(1000);\n}\n')),(0,a.yg)("h3",{id:"usage-of-software-serial"},"Usage of Software Serial"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'#include <SoftwareSerial.h>\n\nSoftwareSerial mySerial(2, 3); // RX, TX\n\nvoid setup() {\n  // initialize serial communication\n  Serial.begin(9600);\n  while (!Serial);\n\n  // initialize software serial\n  mySerial.begin(9600);\n}\n\nvoid loop() {\n  // read data from software serial\n  if (mySerial.available()) {\n    char data = mySerial.read();\n    Serial.print("Received data: ");\n    Serial.println(data);\n  }\n\n  // write data to software serial\n  mySerial.print("Hello World!");\n\n  // wait for a second before repeating the loop\n  delay(1000);\n}\n')),(0,a.yg)("p",null,"In this program, we first include the ",(0,a.yg)("inlineCode",{parentName:"p"},"SoftwareSerial.h")," library to use software serial. Then, we create a new SoftwareSerial object called mySerial using pins 2 and 3 as RX and TX, respectively."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"setup()")," function, we initialize both the hardware serial (",(0,a.yg)("inlineCode",{parentName:"p"},"Serial.begin()"),") and the software serial (",(0,a.yg)("inlineCode",{parentName:"p"},"mySerial.begin()"),")."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"loop()")," function, we use the ",(0,a.yg)("inlineCode",{parentName:"p"},"mySerial.available()")," function to check if there is any data available to be read from the software serial. If there is, we read the incoming byte using the ",(0,a.yg)("inlineCode",{parentName:"p"},"mySerial.read()")," function and store it in a variable called data. We then use the ",(0,a.yg)("inlineCode",{parentName:"p"},"Serial.print()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Serial.println()"),' functions to print "Received data: " followed by the value of data to the hardware serial.'),(0,a.yg)("p",null,"We also use the ",(0,a.yg)("inlineCode",{parentName:"p"},"mySerial.print()"),' function to write "Hello World!" to the software serial. This will send the data from the XIAO to the device connected to the software serial port.'),(0,a.yg)("p",null,"Finally, we add a ",(0,a.yg)("inlineCode",{parentName:"p"},"delay()")," function to wait for one second before repeating the loop."),(0,a.yg)("h2",{id:"iic"},"IIC"),(0,a.yg)("p",null,"XIAO RA4M1 has an I2C interface that can be used for data transmission and parsing of many sensors, as well as for using some OLED screens."),(0,a.yg)("h3",{id:"harware-preparation"},"Harware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO RA4M1"),(0,a.yg)("th",null,"Seeed Studio Expansion Base for XIAO with Grove OLED")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Seeeduino-XIAO-Expansion-Board/Update_pic/zheng1.jpg",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Expansion-board-p-4746.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("p",null,"The OLED display on the XIAO expansion board uses the I2C protocol and is connected to the XIAO's I2C interface through the I2C circuit on the board. Therefore, we can directly plug the XIAO into the expansion board and program it to display content on the screen."),(0,a.yg)("h3",{id:"software-implementation-3"},"Software Implementation"),(0,a.yg)("p",null,"This example introduces how to use the OLED display on the Seeed Studio Expansion Base for XIAO RA4M1."),(0,a.yg)("h4",{id:"step-1-install-the-seeed-studio-xiao-ra4m1-on-the-expansion-board-then-conect-the-type-c-cable"},"Step 1. Install the Seeed Studio XIAO RA4M1 on the Expansion board then conect the Type-C cable."),(0,a.yg)("h4",{id:"step-2-install-the-u8g2-library"},"Step 2. Install the u8g2 library."),(0,a.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"github_item",href:"https://github.com/olikraus/U8g2_Arduino"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Download the Libraries")))," ",(0,a.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.yg)("h4",{id:"step-3-copy-the-code-and-stick-on-the-ardiono-ide-then-upload-it"},"Step 3. Copy the code and stick on the Ardiono IDE then upload it."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'#include <Arduino.h>\n#include <U8x8lib.h>\n#include <Wire.h>\n\nU8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);   // OLEDs without Reset of the Display\n\nvoid setup(void) {\n  u8x8.begin();\n  u8x8.setFlipMode(1);   // set number from 1 to 3, the screen word will rotary 180\n}\n\nvoid loop(void) {\n  u8x8.setFont(u8x8_font_chroma48medium8_r);\n  u8x8.setCursor(0, 0);\n  u8x8.print("i\'m XIAO RA4M1");\n}\n')),(0,a.yg)("p",null,"In the first few lines of the code, we include the required libraries such as Arduino.h, U8x8lib.h, and Wire.h. The U8x8lib.h library provides functions to control the OLED display, and the Wire.h library provides functions for I2C communication."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"setup()")," function, we initialize the OLED display using the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8x8.begin()")," function. We also set the flip mode of the display using the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8x8.setFlipMode()")," function to rotate the screen 180 degrees."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"loop()")," function, we set the font using the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8x8.setFont()")," function and specify the position of the cursor on the display using the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8x8.setCursor()")," function. Finally, we use the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8x8.print()"),' function to display the string "Hello World!" on the OLED display.'),(0,a.yg)("p",null,"If you upload a program to XIAO RA4M1, you will see content displayed on the OLED display screen on the expansion board."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/21.png",style:{width:800,height:"auto"}})),(0,a.yg)("h2",{id:"spi"},"SPI"),(0,a.yg)("p",null,"The RA4M1 chip integrates multiple peripherals, including an SPI interface that can be used to connect external SPI devices such as flash memory, displays, sensors, and more. The XIAO RA4M1 also supports high-speed SPI transfer mode, which can achieve a maximum SPI transfer rate of 80 MHz, meeting the data transfer needs of most SPI devices."),(0,a.yg)("h3",{id:"hadware-preparation-1"},"Hadware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO RA4M1"),(0,a.yg)("th",null,"Grove - OLED Display 1.12 (SH1107) V3.0 - SPI/IIC")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-OLED-Display-1.12-(SH1107)_V3.0/img/10402050_Main-02.png",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-OLED-Display-1-12-SH1107-V3-0-p-5011.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("p",null,"After preparing the hardware as mentioned above, use jumper wires to connect the SPI interface of the XIAO and OLED. Please refer to the following diagram for the wiring method."),(0,a.yg)("h3",{id:"software-implementation-4"},"Software Implementation"),(0,a.yg)("p",null,"Next, we will take the following program as an example to introduce how to use the SPI interface to control the OLED screen display."),(0,a.yg)("p",null,"Install the u8g2 library."),(0,a.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"github_item",href:"https://github.com/olikraus/U8g2_Arduino"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Download the Libraries")))," ",(0,a.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'#include <Arduino.h>\n#include <U8g2lib.h>\n#include <SPI.h>\n#include <Wire.h>\n \nU8G2_SH1107_128X128_1_4W_HW_SPI u8g2(U8G2_R3, /* cs=*/ D7, /* dc=*/ D4, /* reset=*/ D5);\n \nvoid setup(void) {\n  u8g2.begin();\n}\n \nvoid loop(void) {\n  u8g2.firstPage();\n\n  do {\n    u8g2.setFont(u8g2_font_luBIS08_tf);\n    u8g2.drawStr(0,24,"Hello Seeed!");\n  } while ( u8g2.nextPage() );\n}\n')),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"setup()")," function, the ",(0,a.yg)("inlineCode",{parentName:"p"},"U8G2_SH1107_128X128_1_4W_HW_SPI")," class is instantiated with the appropriate constructor arguments that specify the pins used for chip select (cs), data/command (dc), and reset. Then, the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.begin()")," function is called to initialize the display."),(0,a.yg)("p",null,"In the ",(0,a.yg)("inlineCode",{parentName:"p"},"loop()")," function, the display is updated with new content using the ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.firstPage()"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.setFont()"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.drawStr()")," functions. The ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.firstPage()")," function sets up the display buffer for writing, while ",(0,a.yg)("inlineCode",{parentName:"p"},"u8g2.nextPage()")," displays the updated content. The do-while loop ensures that the content is displayed continuously until the program is stopped."),(0,a.yg)("p",null,"Overall, this code demonstrates how to use the U8g2 library to control an OLED display and display text on it."),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/15.png",style:{width:700,height:"auto"}})),(0,a.yg)("h2",{id:"can"},"CAN"),(0,a.yg)("h3",{id:"hadware-preparation-2"},"Hadware Preparation"),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Seeed Studio XIAO RA4M1"),(0,a.yg)("th",null,"XIAO CAN Bus Expansion Board")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/2-102010551-Seeed-Studio-XIAO-RA4M1-45font.jpg",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/xiao_can_bus_board/main.jpg",style:{width:500,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-XIAO-RA4M1-p-5943.html?utm_source=seeed&utm_medium=wiki&utm&product=xiao-ra4m1"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Seeed-Studio-CAN-Bus-Breakout-Board-for-XIAO-and-QT-Py-p-5702.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))))),(0,a.yg)("h4",{id:"step-1--prepare-two-can-bus-breakout-board-and-xiao-ra4m1"},"Step 1 . Prepare two CAN Bus Breakout Board and XIAO RA4M1"),(0,a.yg)("h4",{id:"step-2--insert-these-two-xiao-ra4m1-separately-in-can-bus-breakout-board"},"Step 2 . Insert these two XIAO RA4M1 separately in CAN Bus Breakout Board"),(0,a.yg)("h4",{id:"step-3--prepare-the-dupont-line-connection"},"Step 3 . Prepare the DuPont line connection"),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/36.png",style:{width:400,height:"auto"}})),(0,a.yg)("h3",{id:"software-preparation"},"Software Preparation"),(0,a.yg)("p",null,"We provide an ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/limengdu/Arduino_CAN_BUS_MCP2515"},"Arduino library for the MCP2515 board"),"."),(0,a.yg)("div",{class:"github_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"github_item",href:"https://github.com/limengdu/Arduino_CAN_BUS_MCP2515"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Download the Libraries")))," ",(0,a.yg)("svg",{"aria-hidden":"true",focusable:"false",role:"img",className:"mr-2",viewBox:"-3 10 9 1",width:16,height:16,fill:"currentColor",style:{textAlign:"center",display:"inline-block",userSelect:"none",verticalAlign:"text-bottom",overflow:"visible"}},(0,a.yg)("path",{d:"M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"})))),(0,a.yg)("br",null),(0,a.yg)("p",null,"The library includes several examples, including:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"OBDII-PIDs"))," -  retrieve data from the OBD-II interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"send"))," - send a frame to the CAN bus"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"recv"))," - receive a frame from the CAN bus"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("em",{parentName:"strong"},"set_mask_filter_recv"))," - receive a frame from the CAN bus with mask and filter settings")),(0,a.yg)("h3",{id:"software-implementation-5"},"Software Implementation"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"It is not allowed to simultaneously power on and download programs for two XIAO RA4M1s, as this will result in errors when downloading the serial port. After downloading one, unplug it, then power on the other XIAO RA4M1 to download the program, and finally power on at the same time to check the serial port message")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"CAN Write Code")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'\n/*  send a frame from can bus\n\n    CAN Baudrate,\n    \n    #define CAN_5KBPS           1\n    #define CAN_10KBPS          2\n    #define CAN_20KBPS          3\n    #define CAN_25KBPS          4 \n    #define CAN_31K25BPS        5\n    #define CAN_33KBPS          6\n    #define CAN_40KBPS          7\n    #define CAN_50KBPS          8\n    #define CAN_80KBPS          9\n    #define CAN_83K3BPS         10\n    #define CAN_95KBPS          11\n    #define CAN_100KBPS         12\n    #define CAN_125KBPS         13\n    #define CAN_200KBPS         14\n    #define CAN_250KBPS         15\n    #define CAN_500KBPS         16\n    #define CAN_666KBPS         17\n    #define CAN_1000KBPS        18\n*/\n   \n#include <mcp_can.h>\n#include <SPI.h>\n\n/* Please modify SPI_CS_PIN to adapt to your board.\n\n   CANBed V1        - 17\n   CANBed M0        - 3\n   CAN Bus Shield   - 9\n   CANBed 2040      - 9\n   CANBed Dual      - 9\n   OBD-2G Dev Kit   - 9\n   OBD-II GPS Kit   - 9\n   Hud Dev Kit      - 9\n\n   Seeed Studio CAN-Bus Breakout Board for XIAO and QT Py - D7\n*/\n\n#define SPI_CS_PIN  D7 \n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\nvoid setup()\n{\n    Serial.begin(115200);\n    while(!Serial);\n    \n    // below code need for OBD-II GPS Dev Kit Atemga32U4 version\n    // pinMode(A3, OUTPUT);\n    // digitalWrite(A3, HIGH);\n    \n    // below code need for OBD-II GPS Dev Kit RP2040 version\n    // pinMode(12, OUTPUT);\n    // digitalWrite(12, HIGH);\n    \n    while (CAN_OK != CAN.begin(CAN_500KBPS))    // init can bus : baudrate = 500k\n    {\n        Serial.println("CAN BUS FAIL!");\n        delay(100);\n    }\n    Serial.println("CAN BUS OK!");\n}\n\nunsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nvoid loop()\n{\n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n}\n\n// END FILE\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"CAN Read Code")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'/*  receive a frame from can bus\n\n    CAN Baudrate,\n    \n    #define CAN_5KBPS           1\n    #define CAN_10KBPS          2\n    #define CAN_20KBPS          3\n    #define CAN_25KBPS          4 \n    #define CAN_31K25BPS        5\n    #define CAN_33KBPS          6\n    #define CAN_40KBPS          7\n    #define CAN_50KBPS          8\n    #define CAN_80KBPS          9\n    #define CAN_83K3BPS         10\n    #define CAN_95KBPS          11\n    #define CAN_100KBPS         12\n    #define CAN_125KBPS         13\n    #define CAN_200KBPS         14\n    #define CAN_250KBPS         15\n    #define CAN_500KBPS         16\n    #define CAN_666KBPS         17\n    #define CAN_1000KBPS        18\n\n    CANBed V1: https://www.longan-labs.cc/1030008.html\n    CANBed M0: https://www.longan-labs.cc/1030014.html\n    CAN Bus Shield: https://www.longan-labs.cc/1030016.html\n    OBD-II CAN Bus GPS Dev Kit: https://www.longan-labs.cc/1030003.html\n*/\n\n#include <SPI.h>\n#include "mcp_can.h"\n\n/* Please modify SPI_CS_PIN to adapt to your board.\n\n   CANBed V1        - 17\n   CANBed M0        - 3\n   CAN Bus Shield   - 9\n   CANBed 2040      - 9\n   CANBed Dual      - 9\n   OBD-2G Dev Kit   - 9\n   OBD-II GPS Kit   - 9\n   Hud Dev Kit      - 9\n\n   Seeed Studio CAN-Bus Breakout Board for XIAO and QT Py - D7\n*/\n\n\n#define SPI_CS_PIN  D7 \n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\n\nvoid setup()\n{\n    Serial.begin(115200);\n    while(!Serial);\n    \n    // below code need for OBD-II GPS Dev Kit Atemga32U4 version\n    // pinMode(A3, OUTPUT);\n    // digitalWrite(A3, HIGH);\n    \n    // below code need for OBD-II GPS Dev Kit RP2040 version\n    // pinMode(12, OUTPUT);\n    // digitalWrite(12, HIGH);\n    \n    while (CAN_OK != CAN.begin(CAN_500KBPS))    // init can bus : baudrate = 500k\n    {\n        Serial.println("CAN BUS FAIL!");\n        delay(100);\n    }\n    Serial.println("CAN BUS OK!");\n}\n\n\nvoid loop()\n{\n    unsigned char len = 0;\n    unsigned char buf[8];\n\n    if(CAN_MSGAVAIL == CAN.checkReceive())            // check if data coming\n    {\n        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf\n\n        unsigned long canId = CAN.getCanId();\n        \n        Serial.println("-----------------------------");\n        Serial.print("Get data from ID: ");\n        Serial.println(canId, HEX);\n\n        for(int i = 0; i<len; i++)    // print the data\n        {\n            Serial.print(buf[i], HEX);\n            Serial.print("\\t");\n        }\n        Serial.println();\n    }\n}\n\n// END FILE\n\n')),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"In this example , you need to solder one of the CAN Bus Breakout Board terminal pins P1 , Only then can any speed be used , otherwise you only can use below 125 CAN baudrate ")),(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/30.png",style:{width:600,height:"auto"}})),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"When do I need to connect the terminal resistor?"))),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("ol",{parentName:"li"},(0,a.yg)("li",{parentName:"ol"},"Long distance communication: If the CAN bus is long (e.g. more than 1 meter), terminal resistors must be connected at both ends of the bus to avoid communication problems caused by signal reflection."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("ol",{parentName:"li",start:2},(0,a.yg)("li",{parentName:"ol"},"Multi node communication: If multiple nodes are connected to the same CAN bus, terminal resistors are also indispensable. They ensure the impedance stability of the bus, thereby preventing signal distortion.")))),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("em",{parentName:"strong"},"When can the terminal resistor be disconnected?"))),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("ol",{parentName:"li"},(0,a.yg)("li",{parentName:"ol"},"Short distance communication: In some short distance applications (usually less than 1 meter), terminal resistors can be omitted because the impact of signal reflection on communication is relatively small."))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("ol",{parentName:"li",start:2},(0,a.yg)("li",{parentName:"ol"},"Single node communication: If there is only one node on the bus (such as in a debugging environment) and the distance is short, the terminal resistor can be temporarily disconnected.")))),(0,a.yg)("table",{align:"center"},(0,a.yg)("tr",null,(0,a.yg)("th",null,"Sender Code Result"),(0,a.yg)("th",null,"Rceciver Code Result")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/25.png",style:{width:500,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO-R4AM1/img/26.png",style:{width:500,height:"auto"}}))))),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}p.isMDXComponent=!0}}]);