"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[32384],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=i,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},14641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(9668),i=(t(96540),t(15680));const o={description:"ReSpeaker Lite Volume Adjustment",title:"Volume Adjustment",keywords:["ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_volume",last_update:{date:"9/27/2024",author:"Jessie"}},a=void 0,l={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_volume",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_volume",title:"Volume Adjustment",description:"ReSpeaker Lite Volume Adjustment",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_volume.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/respeaker_volume",permalink:"/respeaker_volume",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_volume.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1727395200,formattedLastUpdatedAt:"Sep 27, 2024",frontMatter:{description:"ReSpeaker Lite Volume Adjustment",title:"Volume Adjustment",keywords:["ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_volume",last_update:{date:"9/27/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"I2S Test",permalink:"/respeaker_i2s_test"},next:{title:"Usr Button Usage",permalink:"/respeaker_button"}},s={},u=[{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3}],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"functionality"},"Functionality"),(0,i.yg)("p",null,"This example project demonstrates how to adjust the volume of the ReSpeaker Lite via I2C command."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"AIC3204")," I2C address: ",(0,i.yg)("inlineCode",{parentName:"p"},"0x18")),(0,i.yg)("h3",{id:"code"},"Code"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "AudioTools.h"\n#include "Wire.h"\n\n#define AIC3204_ADDR  0x18\n\nAudioInfo info_16k(16000, 2, 32);\nSineWaveGenerator<int16_t> sineWave(1000);                // subclass of SoundGenerator with max amplitude of 32000\nGeneratedSoundStream<int16_t> sound(sineWave);             // Stream generated from sine wave\n\nI2SStream out; \nI2SConfig config_i2s1;\n\n//FormatConverterStream converter(in);\n//StreamCopy copier(out, converter);\nStreamCopy copier(out, sound);\n\nuint32_t now_time = 0;\nuint8_t level_index = 0;\nint8_t level[10] = {0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x00, 0x01, 0x02, 0x03};\n\nvoid aic3204_write_reg(uint8_t reg, uint8_t value)\n{\n  Wire.beginTransmission(AIC3204_ADDR);\n  Wire.write(reg);\n  Wire.write(value);\n  Wire.endTransmission();\n}\n\n\nvoid setup(void) {  \n  // Open Serial \n  Serial.begin(115200);\n  Wire.begin(5,6);\n  // while(!Serial);\n//  AudioLogger::instance().begin(Serial, AudioLogger::Info);\n\n  // start I2S\n  Serial.println("starting I2S...");\n  config_i2s1 = out.defaultConfig(TX_MODE);\n  config_i2s1.copyFrom(info_16k); \n  // Custom I2S output pins\n  config_i2s1.pin_bck = 8;\n  config_i2s1.pin_ws = 7;\n  config_i2s1.pin_data = 43;\n  config_i2s1.pin_data_rx = 44;\n  config_i2s1.is_master = false;\n  out.begin(config_i2s1);\n\n//  converter.begin(info_16k, info_48k);\n  sineWave.begin(info_16k, N_B4);\n\n  Serial.println("started...");\n  \n}\n\n// Arduino loop - copy sound to out \nvoid loop() {\n   copier.copy();\n   if (millis() - now_time > 1000) {\n    now_time = millis();\n    aic3204_write_reg(0x00, 0x01);\n    aic3204_write_reg(0x12, level[level_index]);\n    aic3204_write_reg(0x13, level[level_index]);\n    Serial.print("level: ");\n    Serial.println(level_index);\n    level_index = level_index + 2;\n    if (level_index >= 10) level_index = 0;\n   }\n}\n')))}d.isMDXComponent=!0}}]);