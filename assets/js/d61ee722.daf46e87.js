"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5063],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},44066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(9668),i=(n(96540),n(15680));const o={description:"Keyword Spotting with ReSpeaker Lite and TensorFlow Lite",title:"Keyword Spotting",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_streams_i2s_tflite",last_update:{date:"7/1/2024",author:"Jessie"}},a=void 0,s={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_i2s_tflite",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_i2s_tflite",title:"Keyword Spotting",description:"Keyword Spotting with ReSpeaker Lite and TensorFlow Lite",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_i2s_tflite.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/respeaker_streams_i2s_tflite",permalink:"/respeaker_streams_i2s_tflite",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_i2s_tflite.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"Keyword Spotting with ReSpeaker Lite and TensorFlow Lite",title:"Keyword Spotting",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_streams_i2s_tflite",last_update:{date:"7/1/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"MQTT Audio Streaming",permalink:"/respeaker_steams_mqtt"},next:{title:"Voice Assistant System for Home Assitant",permalink:"/respeaker_lite_ha"}},l={},p=[{value:"Library Required",id:"library-required",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Customization",id:"customization",level:3},{value:"Resource",id:"resource",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This project demonstrates how to perform keyword spotting using the reSpeaker Lite board and TensorFlow Lite. The ReSpeaker Lite is an audio board with an integrated XIAO ESP32S3 microcontroller, featuring a dual-channel microphone and speaker. The project utilizes the reSpeaker Lite library, which is built on top of the AudioTools framework, and integrates with TensorFlow Lite for audio classification."),(0,i.yg)("h3",{id:"library-required"},"Library Required"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/limengdu/tflite-micro-reSpeaker-Lite-arduino-examples"},"TensorFlow Lite library"))),(0,i.yg)("h3",{id:"functionality"},"Functionality"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Captures audio from the I2S interface using the reSpeaker Lite board"),(0,i.yg)("li",{parentName:"ul"},"Performs keyword spotting using a pre-trained TensorFlow Lite model"),(0,i.yg)("li",{parentName:"ul"},"Classifies the captured audio into predefined categories: ",(0,i.yg)("inlineCode",{parentName:"li"},"silence"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"unknown"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"yes"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"no")),(0,i.yg)("li",{parentName:"ul"},"Provides a callback function to respond to detected commands"),(0,i.yg)("li",{parentName:"ul"},"Utilizes the AudioTools framework for audio processing and streaming"),(0,i.yg)("li",{parentName:"ul"},"Easy-to-use AudioLogger for debugging and monitoring")),(0,i.yg)("h3",{id:"code"},"Code"),(0,i.yg)("p",null,"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"streams-i2s-tflite.ino")," sketch in the Arduino IDE."),(0,i.yg)("p",null,"Upload the sketch to your reSpeaker Lite board."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "AudioTools.h"\n#include "AudioLibs/TfLiteAudioStream.h"\n#include "model.h"  // tensorflow model\n\nI2SStream i2s;  // Audio source\nTfLiteAudioStream tfl;  // Audio sink\nconst char* kCategoryLabels[4] = {\n    "silence",\n    "unknown",\n    "yes",\n    "no",\n};\nStreamCopy copier(tfl, i2s);  // copy mic to tfl\nint channels = 1;\nint samples_per_second = 16000;\n\nvoid respondToCommand(const char* found_command, uint8_t score,\n                      bool is_new_command) {\n//  if (is_new_command) {\n    char buffer[80];\n    sprintf(buffer, "Result: %s, score: %d, is_new: %s", found_command, score,\n            is_new_command ? "true" : "false");\n    Serial.println(buffer);\n//  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  AudioLogger::instance().begin(Serial, AudioLogger::Warning);\n\n  // setup Audioi2s input\n  auto cfg = i2s.defaultConfig(RX_MODE);\n  cfg.channels = channels;\n  cfg.sample_rate = samples_per_second;\n  cfg.use_apll = false;\n  cfg.buffer_size = 512;\n  cfg.buffer_count = 16;\n  i2s.begin(cfg);\n\n  // Setup tensorflow output\n  auto tcfg = tfl.defaultConfig();\n  tcfg.setCategories(kCategoryLabels);\n  tcfg.channels = channels;\n  tcfg.sample_rate = samples_per_second;\n  tcfg.kTensorArenaSize = 10 * 1024;\n  tcfg.respondToCommand = respondToCommand;\n  tcfg.model = g_model;\n  tfl.begin(tcfg);\n}\n\nvoid loop() { copier.copy(); }\n')),(0,i.yg)("p",null,"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},"Serial Monitor")," to view the output and any log messages."),(0,i.yg)("p",{style:{textAlign:"center"}},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/respeaker/yes_or_no.png",alt:"pir",width:800,height:"auto"})),(0,i.yg)("h3",{id:"configuration"},"Configuration"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"i2s"),": Creates an instance of the ",(0,i.yg)("inlineCode",{parentName:"p"},"I2SStream")," class to capture audio from the I2S interface."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"tfl"),": Creates an instance of the ",(0,i.yg)("inlineCode",{parentName:"p"},"TfLiteAudioStream")," class to process the captured audio using TensorFlow Lite."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"kCategoryLabels"),": Defines the category labels for the classification results."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"copier"),": Creates a ",(0,i.yg)("inlineCode",{parentName:"p"},"StreamCopy")," object to copy the audio data from the I2S stream to the TensorFlow Lite stream."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"channels"),": Specifies the number of audio channels (1 for mono)."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"samples_per_second"),": Specifies the sample rate of the audio input."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"respondToCommand"),": A callback function that is invoked when a command is detected. It receives the detected command, score, and a flag indicating if it is a new command."),(0,i.yg)("h3",{id:"customization"},"Customization"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"You can modify the ",(0,i.yg)("inlineCode",{parentName:"p"},"kCategoryLabels")," array to define your own set of category labels for the classification results.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The ",(0,i.yg)("inlineCode",{parentName:"p"},"respondToCommand")," function can be customized to perform specific actions based on the detected commands.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The TensorFlow Lite model can be replaced with your own trained model by updating the model.h file."))),(0,i.yg)("h3",{id:"resource"},"Resource"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://github.com/limengdu/reSpeaker_Lite-Arduino-Library/tree/main/examples/streams-i2s-tflite"},"TensorFlow Lite library")))}u.isMDXComponent=!0}}]);